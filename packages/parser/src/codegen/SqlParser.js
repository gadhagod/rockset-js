// Generated from Sql.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SqlListener = require('./SqlListener').SqlListener;
var SqlVisitor = require('./SqlVisitor').SqlVisitor;

var grammarFileName = "Sql.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00e3\u042e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0003\u0002\u0003\u0002\u0007\u0002\u0083\n\u0002\f\u0002\u000e",
    "\u0002\u0086\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u0092\n\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u009b\n\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00a0\n\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00a5\n\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u00a9\n\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0005\u0004\u00af\n\u0004\u0003\u0004\u0005\u0004",
    "\u00b2\n\u0004\u0003\u0005\u0005\u0005\u00b5\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u00bb\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0007\u0006\u00c0\n\u0006\f\u0006\u000e\u0006",
    "\u00c3\u000b\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0007\u0007\u00cb\n\u0007\f\u0007\u000e\u0007\u00ce",
    "\u000b\u0007\u0005\u0007\u00d0\n\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u00d5\n\u0007\u0005\u0007\u00d7\n\u0007\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u00db\n\u0007\u0003\u0007\u0005\u0007\u00de",
    "\n\u0007\u0003\b\u0003\b\u0003\b\u0005\b\u00e3\n\b\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u00e9\n\t\u0003\n\u0003\n\u0003\n\u0007\n\u00ee\n",
    "\n\f\n\u000e\n\u00f1\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u00fe\n\f\u0003\f\u0003\f\u0003\f\u0005\f\u0103\n\f\u0003\f\u0007",
    "\f\u0106\n\f\f\f\u000e\f\u0109\u000b\f\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0007\r\u0112\n\r\f\r\u000e\r\u0115\u000b",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u011b\n\r\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u011f\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u0123\n\u000e\u0003\u000f\u0003\u000f\u0005\u000f\u0127\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u012c\n\u000f\f\u000f\u000e",
    "\u000f\u012f\u000b\u000f\u0003\u000f\u0005\u000f\u0132\n\u000f\u0005",
    "\u000f\u0134\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0007\u000f\u013a\n\u000f\f\u000f\u000e\u000f\u013d\u000b\u000f\u0005",
    "\u000f\u013f\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0143\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0148\n\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u014c\n\u000f\u0003\u0010\u0005\u0010",
    "\u014f\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0154",
    "\n\u0010\f\u0010\u000e\u0010\u0157\u000b\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u015f\n",
    "\u0011\f\u0011\u000e\u0011\u0162\u000b\u0011\u0005\u0011\u0164\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0007\u0011\u016c\n\u0011\f\u0011\u000e\u0011\u016f\u000b\u0011\u0005",
    "\u0011\u0171\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u017a\n\u0011\f\u0011",
    "\u000e\u0011\u017d\u000b\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0181",
    "\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012",
    "\u0187\n\u0012\f\u0012\u000e\u0012\u018a\u000b\u0012\u0005\u0012\u018c",
    "\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0190\n\u0012\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0194\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u019f\n\u0015\u0003\u0015\u0005\u0015\u01a2\n\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u01a9\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01ae",
    "\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01be\n\u0016\u0003",
    "\u0016\u0005\u0016\u01c1\n\u0016\u0007\u0016\u01c3\n\u0016\f\u0016\u000e",
    "\u0016\u01c6\u000b\u0016\u0003\u0017\u0005\u0017\u01c9\n\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u01cd\n\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u01d1\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01d5",
    "\n\u0017\u0005\u0017\u01d7\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u01e0\n",
    "\u0018\f\u0018\u000e\u0018\u01e3\u000b\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u01e7\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01f0\n\u0019",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0005\u001b\u01f6\n",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01fa\n\u001b\u0005\u001b",
    "\u01fc\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007",
    "\u001c\u0202\n\u001c\f\u001c\u000e\u001c\u0205\u000b\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0212\n",
    "\u001d\u0003\u001d\u0005\u001d\u0215\n\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u021a\n\u001d\u0003\u001d\u0005\u001d\u021d",
    "\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0005\u001d\u022a\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0006\u001f\u0233\n\u001f",
    "\r\u001f\u000e\u001f\u0234\u0003 \u0003 \u0003 \u0005 \u023a\n \u0003",
    "!\u0003!\u0003!\u0007!\u023f\n!\f!\u000e!\u0242\u000b!\u0003\"\u0005",
    "\"\u0245\n\"\u0003\"\u0003\"\u0005\"\u0249\n\"\u0003#\u0003#\u0003#",
    "\u0003#\u0003#\u0003#\u0005#\u0251\n#\u0003$\u0003$\u0007$\u0255\n$",
    "\f$\u000e$\u0258\u000b$\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0005",
    "&\u0260\n&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u0268\n",
    "&\f&\u000e&\u026b\u000b&\u0003\'\u0003\'\u0005\'\u026f\n\'\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u027b",
    "\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0283\n(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0007(\u028a\n(\f(\u000e(\u028d\u000b",
    "(\u0003(\u0003(\u0003(\u0005(\u0292\n(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0005(\u029a\n(\u0003(\u0003(\u0003(\u0003(\u0005(\u02a0\n",
    "(\u0003(\u0003(\u0005(\u02a4\n(\u0003(\u0003(\u0003(\u0005(\u02a9\n",
    "(\u0003(\u0003(\u0003(\u0005(\u02ae\n(\u0003(\u0003(\u0003(\u0005(\u02b3",
    "\n(\u0003)\u0003)\u0003)\u0003)\u0005)\u02b9\n)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0007)\u02c9\n)\f)\u000e)\u02cc\u000b)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0005*\u02f0\n*\u0003*\u0005*\u02f3\n*\u0003*\u0003*\u0003",
    "*\u0005*\u02f8\n*\u0003*\u0003*\u0003*\u0007*\u02fd\n*\f*\u000e*\u0300",
    "\u000b*\u0005*\u0302\n*\u0003*\u0003*\u0005*\u0306\n*\u0003*\u0005*",
    "\u0309\n*\u0003*\u0005*\u030c\n*\u0003*\u0003*\u0003*\u0003*\u0003*",
    "\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0006*\u031a\n*\r",
    "*\u000e*\u031b\u0003*\u0003*\u0005*\u0320\n*\u0003*\u0003*\u0003*\u0003",
    "*\u0006*\u0326\n*\r*\u000e*\u0327\u0003*\u0003*\u0005*\u032c\n*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u033f\n*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u0348\n*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007*\u035c\n*\f*\u000e*\u035f",
    "\u000b*\u0005*\u0361\n*\u0003*\u0003*\u0003*\u0003*\u0005*\u0367\n*",
    "\u0003*\u0005*\u036a\n*\u0005*\u036c\n*\u0003*\u0003*\u0003*\u0003*",
    "\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007*\u0379\n*\f",
    "*\u000e*\u037c\u000b*\u0003+\u0003+\u0003+\u0003+\u0007+\u0382\n+\f",
    "+\u000e+\u0385\u000b+\u0005+\u0387\n+\u0003+\u0003+\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u038f\n,\u0005,\u0391\n,\u0003-\u0003-\u0003.\u0003",
    ".\u0003/\u0003/\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u0005",
    "1\u03a0\n1\u00031\u00031\u00051\u03a4\n1\u00031\u00031\u00031\u0005",
    "1\u03a9\n1\u00031\u00031\u00031\u00051\u03ae\n1\u00032\u00032\u0003",
    "3\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00074\u03bb",
    "\n4\f4\u000e4\u03be\u000b4\u00034\u00034\u00054\u03c2\n4\u00054\u03c4",
    "\n4\u00035\u00035\u00055\u03c8\n5\u00036\u00036\u00056\u03cc\n6\u0003",
    "7\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00039\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0007:\u03e5\n:\f:\u000e:\u03e8\u000b:\u0005:\u03ea",
    "\n:\u0003:\u0003:\u0003:\u0003:\u0003:\u0007:\u03f1\n:\f:\u000e:\u03f4",
    "\u000b:\u0005:\u03f6\n:\u0003:\u0005:\u03f9\n:\u0003:\u0003:\u0003;",
    "\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u040d\n;\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u0418\n<\u0003=\u0003",
    "=\u0003=\u0007=\u041d\n=\f=\u000e=\u0420\u000b=\u0003>\u0003>\u0003",
    ">\u0003>\u0005>\u0426\n>\u0003?\u0003?\u0005?\u042a\n?\u0003@\u0003",
    "@\u0003@\u0004\u01ad\u01c0\u0007\u0016*JPRA\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0002\u0014\u0004\u0002IIUU\u0005",
    "\u0002==[[\u00bb\u00bb\u0004\u0002\u0017\u001755\u0004\u0002EEaa\u0004",
    "\u0002\u0010\u001077\u0003\u0002\u00d9\u00da\u0004\u0002\u0019\u0019",
    "\u00a8\u00a8\u0003\u0002\u00d0\u00d1\u0003\u0002\u00d2\u00d4\u0005\u0002",
    "\u001f\u001f\u00a5\u00a5\u00b4\u00b5\u0003\u0002\u00ca\u00cf\u0005\u0002",
    "\u0010\u0010\u0014\u0014\u00a3\u00a3\u0004\u0002CC\u00b3\u00b3\u0003",
    "\u0002,/\u0007\u000222SSkl\u009b\u009b\u00c8\u00c8\u0003\u0002nq\u0004",
    "\u0002FF\u0086\u0086/\u0002\u000f\u0010\u0012\u0012\u0014\u0015\u0017",
    "\u0019\u001c\u001d &++025588>>AADFHHKNSTVVXXZZ\\\\__abddffilnrvwyy{",
    "|\u007f\u007f\u0081\u0086\u0088\u008c\u008e\u0093\u0095\u0095\u0097",
    "\u009b\u009d\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b2\u00b4\u00b4\u00b6",
    "\u00b6\u00b8\u00b9\u00bd\u00bd\u00bf\u00c2\u00c6\u00c9\u0002\u04ba\u0002",
    "\u0080\u0003\u0002\u0002\u0002\u0004\u0089\u0003\u0002\u0002\u0002\u0006",
    "\u00b1\u0003\u0002\u0002\u0002\b\u00b4\u0003\u0002\u0002\u0002\n\u00b8",
    "\u0003\u0002\u0002\u0002\f\u00c4\u0003\u0002\u0002\u0002\u000e\u00df",
    "\u0003\u0002\u0002\u0002\u0010\u00e8\u0003\u0002\u0002\u0002\u0012\u00ea",
    "\u0003\u0002\u0002\u0002\u0014\u00f2\u0003\u0002\u0002\u0002\u0016\u00fd",
    "\u0003\u0002\u0002\u0002\u0018\u011a\u0003\u0002\u0002\u0002\u001a\u011c",
    "\u0003\u0002\u0002\u0002\u001c\u0124\u0003\u0002\u0002\u0002\u001e\u014e",
    "\u0003\u0002\u0002\u0002 \u0180\u0003\u0002\u0002\u0002\"\u018f\u0003",
    "\u0002\u0002\u0002$\u0191\u0003\u0002\u0002\u0002&\u019a\u0003\u0002",
    "\u0002\u0002(\u01a8\u0003\u0002\u0002\u0002*\u01aa\u0003\u0002\u0002",
    "\u0002,\u01d6\u0003\u0002\u0002\u0002.\u01e6\u0003\u0002\u0002\u0002",
    "0\u01e8\u0003\u0002\u0002\u00022\u01f1\u0003\u0002\u0002\u00024\u01f3",
    "\u0003\u0002\u0002\u00026\u01fd\u0003\u0002\u0002\u00028\u0229\u0003",
    "\u0002\u0002\u0002:\u022b\u0003\u0002\u0002\u0002<\u0232\u0003\u0002",
    "\u0002\u0002>\u0239\u0003\u0002\u0002\u0002@\u023b\u0003\u0002\u0002",
    "\u0002B\u0244\u0003\u0002\u0002\u0002D\u0250\u0003\u0002\u0002\u0002",
    "F\u0252\u0003\u0002\u0002\u0002H\u0259\u0003\u0002\u0002\u0002J\u025f",
    "\u0003\u0002\u0002\u0002L\u026c\u0003\u0002\u0002\u0002N\u02b2\u0003",
    "\u0002\u0002\u0002P\u02b8\u0003\u0002\u0002\u0002R\u036b\u0003\u0002",
    "\u0002\u0002T\u037d\u0003\u0002\u0002\u0002V\u0390\u0003\u0002\u0002",
    "\u0002X\u0392\u0003\u0002\u0002\u0002Z\u0394\u0003\u0002\u0002\u0002",
    "\\\u0396\u0003\u0002\u0002\u0002^\u0398\u0003\u0002\u0002\u0002`\u03ad",
    "\u0003\u0002\u0002\u0002b\u03af\u0003\u0002\u0002\u0002d\u03b1\u0003",
    "\u0002\u0002\u0002f\u03c3\u0003\u0002\u0002\u0002h\u03c7\u0003\u0002",
    "\u0002\u0002j\u03cb\u0003\u0002\u0002\u0002l\u03cd\u0003\u0002\u0002",
    "\u0002n\u03d2\u0003\u0002\u0002\u0002p\u03d8\u0003\u0002\u0002\u0002",
    "r\u03dd\u0003\u0002\u0002\u0002t\u040c\u0003\u0002\u0002\u0002v\u0417",
    "\u0003\u0002\u0002\u0002x\u0419\u0003\u0002\u0002\u0002z\u0425\u0003",
    "\u0002\u0002\u0002|\u0429\u0003\u0002\u0002\u0002~\u042b\u0003\u0002",
    "\u0002\u0002\u0080\u0084\u0005\u0006\u0004\u0002\u0081\u0083\u0007\u0003",
    "\u0002\u0002\u0082\u0081\u0003\u0002\u0002\u0002\u0083\u0086\u0003\u0002",
    "\u0002\u0002\u0084\u0082\u0003\u0002\u0002\u0002\u0084\u0085\u0003\u0002",
    "\u0002\u0002\u0085\u0087\u0003\u0002\u0002\u0002\u0086\u0084\u0003\u0002",
    "\u0002\u0002\u0087\u0088\u0007\u0002\u0002\u0003\u0088\u0003\u0003\u0002",
    "\u0002\u0002\u0089\u008a\u0005H%\u0002\u008a\u008b\u0007\u0002\u0002",
    "\u0003\u008b\u0005\u0003\u0002\u0002\u0002\u008c\u00b2\u0005\b\u0005",
    "\u0002\u008d\u008e\u0007Y\u0002\u0002\u008e\u008f\u0007]\u0002\u0002",
    "\u008f\u0091\u0005x=\u0002\u0090\u0092\u00056\u001c\u0002\u0091\u0090",
    "\u0003\u0002\u0002\u0002\u0091\u0092\u0003\u0002\u0002\u0002\u0092\u0093",
    "\u0003\u0002\u0002\u0002\u0093\u0094\u0005\b\u0005\u0002\u0094\u00b2",
    "\u0003\u0002\u0002\u0002\u0095\u0096\u0007\u00a1\u0002\u0002\u0096\u0097",
    "\u0007#\u0002\u0002\u0097\u0098\t\u0002\u0002\u0002\u0098\u009a\u0005",
    "B\"\u0002\u0099\u009b\u0005p9\u0002\u009a\u0099\u0003\u0002\u0002\u0002",
    "\u009a\u009b\u0003\u0002\u0002\u0002\u009b\u00b2\u0003\u0002\u0002\u0002",
    "\u009c\u009d\u00076\u0002\u0002\u009d\u009f\u0005B\"\u0002\u009e\u00a0",
    "\u0005p9\u0002\u009f\u009e\u0003\u0002\u0002\u0002\u009f\u00a0\u0003",
    "\u0002\u0002\u0002\u00a0\u00b2\u0003\u0002\u0002\u0002\u00a1\u00a2\u0007",
    "5\u0002\u0002\u00a2\u00a4\u0005B\"\u0002\u00a3\u00a5\u0005p9\u0002\u00a4",
    "\u00a3\u0003\u0002\u0002\u0002\u00a4\u00a5\u0003\u0002\u0002\u0002\u00a5",
    "\u00b2\u0003\u0002\u0002\u0002\u00a6\u00a8\u0007A\u0002\u0002\u00a7",
    "\u00a9\u0007\u0012\u0002\u0002\u00a8\u00a7\u0003\u0002\u0002\u0002\u00a8",
    "\u00a9\u0003\u0002\u0002\u0002\u00a9\u00ae\u0003\u0002\u0002\u0002\u00aa",
    "\u00ab\u0007\u0004\u0002\u0002\u00ab\u00ac\u0005\u0012\n\u0002\u00ac",
    "\u00ad\u0007\u0005\u0002\u0002\u00ad\u00af\u0003\u0002\u0002\u0002\u00ae",
    "\u00aa\u0003\u0002\u0002\u0002\u00ae\u00af\u0003\u0002\u0002\u0002\u00af",
    "\u00b0\u0003\u0002\u0002\u0002\u00b0\u00b2\u0005\b\u0005\u0002\u00b1",
    "\u008c\u0003\u0002\u0002\u0002\u00b1\u008d\u0003\u0002\u0002\u0002\u00b1",
    "\u0095\u0003\u0002\u0002\u0002\u00b1\u009c\u0003\u0002\u0002\u0002\u00b1",
    "\u00a1\u0003\u0002\u0002\u0002\u00b1\u00a6\u0003\u0002\u0002\u0002\u00b2",
    "\u0007\u0003\u0002\u0002\u0002\u00b3\u00b5\u0005\n\u0006\u0002\u00b4",
    "\u00b3\u0003\u0002\u0002\u0002\u00b4\u00b5\u0003\u0002\u0002\u0002\u00b5",
    "\u00b6\u0003\u0002\u0002\u0002\u00b6\u00b7\u0005\f\u0007\u0002\u00b7",
    "\t\u0003\u0002\u0002\u0002\u00b8\u00ba\u0007\u00c5\u0002\u0002\u00b9",
    "\u00bb\u0007\u008d\u0002\u0002\u00ba\u00b9\u0003\u0002\u0002\u0002\u00ba",
    "\u00bb\u0003\u0002\u0002\u0002\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc",
    "\u00c1\u0005$\u0013\u0002\u00bd\u00be\u0007\u0006\u0002\u0002\u00be",
    "\u00c0\u0005$\u0013\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00c0",
    "\u00c3\u0003\u0002\u0002\u0002\u00c1\u00bf\u0003\u0002\u0002\u0002\u00c1",
    "\u00c2\u0003\u0002\u0002\u0002\u00c2\u000b\u0003\u0002\u0002\u0002\u00c3",
    "\u00c1\u0003\u0002\u0002\u0002\u00c4\u00cf\u0005\u0016\f\u0002\u00c5",
    "\u00c6\u0007~\u0002\u0002\u00c6\u00c7\u0007\u001b\u0002\u0002\u00c7",
    "\u00cc\u0005\u001a\u000e\u0002\u00c8\u00c9\u0007\u0006\u0002\u0002\u00c9",
    "\u00cb\u0005\u001a\u000e\u0002\u00ca\u00c8\u0003\u0002\u0002\u0002\u00cb",
    "\u00ce\u0003\u0002\u0002\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cc",
    "\u00cd\u0003\u0002\u0002\u0002\u00cd\u00d0\u0003\u0002\u0002\u0002\u00ce",
    "\u00cc\u0003\u0002\u0002\u0002\u00cf\u00c5\u0003\u0002\u0002\u0002\u00cf",
    "\u00d0\u0003\u0002\u0002\u0002\u00d0\u00d6\u0003\u0002\u0002\u0002\u00d1",
    "\u00d4\u0007f\u0002\u0002\u00d2\u00d5\u0005H%\u0002\u00d3\u00d5\u0007",
    "\u0010\u0002\u0002\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d4\u00d3\u0003",
    "\u0002\u0002\u0002\u00d5\u00d7\u0003\u0002\u0002\u0002\u00d6\u00d1\u0003",
    "\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u00da\u0003",
    "\u0002\u0002\u0002\u00d8\u00d9\u0007y\u0002\u0002\u00d9\u00db\u0005",
    "H%\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00da\u00db\u0003\u0002",
    "\u0002\u0002\u00db\u00dd\u0003\u0002\u0002\u0002\u00dc\u00de\u0005\u0014",
    "\u000b\u0002\u00dd\u00dc\u0003\u0002\u0002\u0002\u00dd\u00de\u0003\u0002",
    "\u0002\u0002\u00de\r\u0003\u0002\u0002\u0002\u00df\u00e2\u0005z>\u0002",
    "\u00e0\u00e1\u0007\u00ca\u0002\u0002\u00e1\u00e3\u0005\u0010\t\u0002",
    "\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002",
    "\u00e3\u000f\u0003\u0002\u0002\u0002\u00e4\u00e9\u0005F$\u0002\u00e5",
    "\u00e9\u0005|?\u0002\u00e6\u00e9\u0005V,\u0002\u00e7\u00e9\u0005\\/",
    "\u0002\u00e8\u00e4\u0003\u0002\u0002\u0002\u00e8\u00e5\u0003\u0002\u0002",
    "\u0002\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e8\u00e7\u0003\u0002\u0002",
    "\u0002\u00e9\u0011\u0003\u0002\u0002\u0002\u00ea\u00ef\u0005\u000e\b",
    "\u0002\u00eb\u00ec\u0007\u0006\u0002\u0002\u00ec\u00ee\u0005\u000e\b",
    "\u0002\u00ed\u00eb\u0003\u0002\u0002\u0002\u00ee\u00f1\u0003\u0002\u0002",
    "\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003\u0002\u0002",
    "\u0002\u00f0\u0013\u0003\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002\u0002",
    "\u0002\u00f2\u00f3\u0007R\u0002\u0002\u00f3\u00f4\u0007\u0004\u0002",
    "\u0002\u00f4\u00f5\u0005\u0012\n\u0002\u00f5\u00f6\u0007\u0005\u0002",
    "\u0002\u00f6\u0015\u0003\u0002\u0002\u0002\u00f7\u00f8\b\f\u0001\u0002",
    "\u00f8\u00fe\u0005\u0018\r\u0002\u00f9\u00fa\u0007\u0004\u0002\u0002",
    "\u00fa\u00fb\u0005\u0016\f\u0002\u00fb\u00fc\u0007\u0005\u0002\u0002",
    "\u00fc\u00fe\u0003\u0002\u0002\u0002\u00fd\u00f7\u0003\u0002\u0002\u0002",
    "\u00fd\u00f9\u0003\u0002\u0002\u0002\u00fe\u0107\u0003\u0002\u0002\u0002",
    "\u00ff\u0100\f\u0003\u0002\u0002\u0100\u0102\t\u0003\u0002\u0002\u0101",
    "\u0103\u0005&\u0014\u0002\u0102\u0101\u0003\u0002\u0002\u0002\u0102",
    "\u0103\u0003\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104",
    "\u0106\u0005\u0016\f\u0004\u0105\u00ff\u0003\u0002\u0002\u0002\u0106",
    "\u0109\u0003\u0002\u0002\u0002\u0107\u0105\u0003\u0002\u0002\u0002\u0107",
    "\u0108\u0003\u0002\u0002\u0002\u0108\u0017\u0003\u0002\u0002\u0002\u0109",
    "\u0107\u0003\u0002\u0002\u0002\u010a\u011b\u0005\u001c\u000f\u0002\u010b",
    "\u010c\u0007\u00a9\u0002\u0002\u010c\u011b\u0005B\"\u0002\u010d\u010e",
    "\u0007\u00c0\u0002\u0002\u010e\u0113\u0005H%\u0002\u010f\u0110\u0007",
    "\u0006\u0002\u0002\u0110\u0112\u0005H%\u0002\u0111\u010f\u0003\u0002",
    "\u0002\u0002\u0112\u0115\u0003\u0002\u0002\u0002\u0113\u0111\u0003\u0002",
    "\u0002\u0002\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u011b\u0003\u0002",
    "\u0002\u0002\u0115\u0113\u0003\u0002\u0002\u0002\u0116\u0117\u0007\u0004",
    "\u0002\u0002\u0117\u0118\u0005\f\u0007\u0002\u0118\u0119\u0007\u0005",
    "\u0002\u0002\u0119\u011b\u0003\u0002\u0002\u0002\u011a\u010a\u0003\u0002",
    "\u0002\u0002\u011a\u010b\u0003\u0002\u0002\u0002\u011a\u010d\u0003\u0002",
    "\u0002\u0002\u011a\u0116\u0003\u0002\u0002\u0002\u011b\u0019\u0003\u0002",
    "\u0002\u0002\u011c\u011e\u0005H%\u0002\u011d\u011f\t\u0004\u0002\u0002",
    "\u011e\u011d\u0003\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002",
    "\u011f\u0122\u0003\u0002\u0002\u0002\u0120\u0121\u0007w\u0002\u0002",
    "\u0121\u0123\t\u0005\u0002\u0002\u0122\u0120\u0003\u0002\u0002\u0002",
    "\u0122\u0123\u0003\u0002\u0002\u0002\u0123\u001b\u0003\u0002\u0002\u0002",
    "\u0124\u0126\u0007\u009c\u0002\u0002\u0125\u0127\u0005&\u0014\u0002",
    "\u0126\u0125\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002",
    "\u0127\u0133\u0003\u0002\u0002\u0002\u0128\u012d\u0005(\u0015\u0002",
    "\u0129\u012a\u0007\u0006\u0002\u0002\u012a\u012c\u0005(\u0015\u0002",
    "\u012b\u0129\u0003\u0002\u0002\u0002\u012c\u012f\u0003\u0002\u0002\u0002",
    "\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002\u0002",
    "\u012e\u0131\u0003\u0002\u0002\u0002\u012f\u012d\u0003\u0002\u0002\u0002",
    "\u0130\u0132\u0007\u0006\u0002\u0002\u0131\u0130\u0003\u0002\u0002\u0002",
    "\u0131\u0132\u0003\u0002\u0002\u0002\u0132\u0134\u0003\u0002\u0002\u0002",
    "\u0133\u0128\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002",
    "\u0134\u013e\u0003\u0002\u0002\u0002\u0135\u0136\u0007I\u0002\u0002",
    "\u0136\u013b\u0005*\u0016\u0002\u0137\u0138\u0007\u0006\u0002\u0002",
    "\u0138\u013a\u0005*\u0016\u0002\u0139\u0137\u0003\u0002\u0002\u0002",
    "\u013a\u013d\u0003\u0002\u0002\u0002\u013b\u0139\u0003\u0002\u0002\u0002",
    "\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013f\u0003\u0002\u0002\u0002",
    "\u013d\u013b\u0003\u0002\u0002\u0002\u013e\u0135\u0003\u0002\u0002\u0002",
    "\u013e\u013f\u0003\u0002\u0002\u0002\u013f\u0142\u0003\u0002\u0002\u0002",
    "\u0140\u0141\u0007\u00c4\u0002\u0002\u0141\u0143\u0005J&\u0002\u0142",
    "\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143",
    "\u0147\u0003\u0002\u0002\u0002\u0144\u0145\u0007O\u0002\u0002\u0145",
    "\u0146\u0007\u001b\u0002\u0002\u0146\u0148\u0005\u001e\u0010\u0002\u0147",
    "\u0144\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002\u0002\u0148",
    "\u014b\u0003\u0002\u0002\u0002\u0149\u014a\u0007Q\u0002\u0002\u014a",
    "\u014c\u0005J&\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014b\u014c",
    "\u0003\u0002\u0002\u0002\u014c\u001d\u0003\u0002\u0002\u0002\u014d\u014f",
    "\u0005&\u0014\u0002\u014e\u014d\u0003\u0002\u0002\u0002\u014e\u014f",
    "\u0003\u0002\u0002\u0002\u014f\u0150\u0003\u0002\u0002\u0002\u0150\u0155",
    "\u0005 \u0011\u0002\u0151\u0152\u0007\u0006\u0002\u0002\u0152\u0154",
    "\u0005 \u0011\u0002\u0153\u0151\u0003\u0002\u0002\u0002\u0154\u0157",
    "\u0003\u0002\u0002\u0002\u0155\u0153\u0003\u0002\u0002\u0002\u0155\u0156",
    "\u0003\u0002\u0002\u0002\u0156\u001f\u0003\u0002\u0002\u0002\u0157\u0155",
    "\u0003\u0002\u0002\u0002\u0158\u0181\u0005\"\u0012\u0002\u0159\u015a",
    "\u0007\u0096\u0002\u0002\u015a\u0163\u0007\u0004\u0002\u0002\u015b\u0160",
    "\u0005H%\u0002\u015c\u015d\u0007\u0006\u0002\u0002\u015d\u015f\u0005",
    "H%\u0002\u015e\u015c\u0003\u0002\u0002\u0002\u015f\u0162\u0003\u0002",
    "\u0002\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002",
    "\u0002\u0002\u0161\u0164\u0003\u0002\u0002\u0002\u0162\u0160\u0003\u0002",
    "\u0002\u0002\u0163\u015b\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002",
    "\u0002\u0002\u0164\u0165\u0003\u0002\u0002\u0002\u0165\u0181\u0007\u0005",
    "\u0002\u0002\u0166\u0167\u0007*\u0002\u0002\u0167\u0170\u0007\u0004",
    "\u0002\u0002\u0168\u016d\u0005H%\u0002\u0169\u016a\u0007\u0006\u0002",
    "\u0002\u016a\u016c\u0005H%\u0002\u016b\u0169\u0003\u0002\u0002\u0002",
    "\u016c\u016f\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002\u0002",
    "\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u0171\u0003\u0002\u0002\u0002",
    "\u016f\u016d\u0003\u0002\u0002\u0002\u0170\u0168\u0003\u0002\u0002\u0002",
    "\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002",
    "\u0172\u0181\u0007\u0005\u0002\u0002\u0173\u0174\u0007P\u0002\u0002",
    "\u0174\u0175\u0007\u00a0\u0002\u0002\u0175\u0176\u0007\u0004\u0002\u0002",
    "\u0176\u017b\u0005\"\u0012\u0002\u0177\u0178\u0007\u0006\u0002\u0002",
    "\u0178\u017a\u0005\"\u0012\u0002\u0179\u0177\u0003\u0002\u0002\u0002",
    "\u017a\u017d\u0003\u0002\u0002\u0002\u017b\u0179\u0003\u0002\u0002\u0002",
    "\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017e\u0003\u0002\u0002\u0002",
    "\u017d\u017b\u0003\u0002\u0002\u0002\u017e\u017f\u0007\u0005\u0002\u0002",
    "\u017f\u0181\u0003\u0002\u0002\u0002\u0180\u0158\u0003\u0002\u0002\u0002",
    "\u0180\u0159\u0003\u0002\u0002\u0002\u0180\u0166\u0003\u0002\u0002\u0002",
    "\u0180\u0173\u0003\u0002\u0002\u0002\u0181!\u0003\u0002\u0002\u0002",
    "\u0182\u018b\u0007\u0004\u0002\u0002\u0183\u0188\u0005H%\u0002\u0184",
    "\u0185\u0007\u0006\u0002\u0002\u0185\u0187\u0005H%\u0002\u0186\u0184",
    "\u0003\u0002\u0002\u0002\u0187\u018a\u0003\u0002\u0002\u0002\u0188\u0186",
    "\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u018c",
    "\u0003\u0002\u0002\u0002\u018a\u0188\u0003\u0002\u0002\u0002\u018b\u0183",
    "\u0003\u0002\u0002\u0002\u018b\u018c\u0003\u0002\u0002\u0002\u018c\u018d",
    "\u0003\u0002\u0002\u0002\u018d\u0190\u0007\u0005\u0002\u0002\u018e\u0190",
    "\u0005H%\u0002\u018f\u0182\u0003\u0002\u0002\u0002\u018f\u018e\u0003",
    "\u0002\u0002\u0002\u0190#\u0003\u0002\u0002\u0002\u0191\u0193\u0005",
    "z>\u0002\u0192\u0194\u00056\u001c\u0002\u0193\u0192\u0003\u0002\u0002",
    "\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002",
    "\u0002\u0195\u0196\u0007\u0016\u0002\u0002\u0196\u0197\u0007\u0004\u0002",
    "\u0002\u0197\u0198\u0005\b\u0005\u0002\u0198\u0199\u0007\u0005\u0002",
    "\u0002\u0199%\u0003\u0002\u0002\u0002\u019a\u019b\t\u0006\u0002\u0002",
    "\u019b\'\u0003\u0002\u0002\u0002\u019c\u01a1\u0005H%\u0002\u019d\u019f",
    "\u0007\u0016\u0002\u0002\u019e\u019d\u0003\u0002\u0002\u0002\u019e\u019f",
    "\u0003\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a2",
    "\u0005z>\u0002\u01a1\u019e\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003",
    "\u0002\u0002\u0002\u01a2\u01a9\u0003\u0002\u0002\u0002\u01a3\u01a4\u0005",
    "z>\u0002\u01a4\u01a5\u0007\u0007\u0002\u0002\u01a5\u01a6\u0007\u00d2",
    "\u0002\u0002\u01a6\u01a9\u0003\u0002\u0002\u0002\u01a7\u01a9\u0007\u00d2",
    "\u0002\u0002\u01a8\u019c\u0003\u0002\u0002\u0002\u01a8\u01a3\u0003\u0002",
    "\u0002\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a9)\u0003\u0002",
    "\u0002\u0002\u01aa\u01ab\b\u0016\u0001\u0002\u01ab\u01ad\u00050\u0019",
    "\u0002\u01ac\u01ae\u0005\u0014\u000b\u0002\u01ad\u01ae\u0003\u0002\u0002",
    "\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ae\u01c4\u0003\u0002\u0002",
    "\u0002\u01af\u01bd\f\u0004\u0002\u0002\u01b0\u01b1\u0007)\u0002\u0002",
    "\u01b1\u01b2\u0007`\u0002\u0002\u01b2\u01be\u00050\u0019\u0002\u01b3",
    "\u01b4\u0005,\u0017\u0002\u01b4\u01b5\u0007`\u0002\u0002\u01b5\u01b6",
    "\u0005*\u0016\u0002\u01b6\u01b7\u0005.\u0018\u0002\u01b7\u01be\u0003",
    "\u0002\u0002\u0002\u01b8\u01b9\u0007m\u0002\u0002\u01b9\u01ba\u0005",
    ",\u0017\u0002\u01ba\u01bb\u0007`\u0002\u0002\u01bb\u01bc\u00050\u0019",
    "\u0002\u01bc\u01be\u0003\u0002\u0002\u0002\u01bd\u01b0\u0003\u0002\u0002",
    "\u0002\u01bd\u01b3\u0003\u0002\u0002\u0002\u01bd\u01b8\u0003\u0002\u0002",
    "\u0002\u01be\u01c0\u0003\u0002\u0002\u0002\u01bf\u01c1\u0005\u0014\u000b",
    "\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c0\u01bf\u0003\u0002\u0002",
    "\u0002\u01c1\u01c3\u0003\u0002\u0002\u0002\u01c2\u01af\u0003\u0002\u0002",
    "\u0002\u01c3\u01c6\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002",
    "\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5+\u0003\u0002\u0002",
    "\u0002\u01c6\u01c4\u0003\u0002\u0002\u0002\u01c7\u01c9\u0007W\u0002",
    "\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002",
    "\u0002\u01c9\u01d7\u0003\u0002\u0002\u0002\u01ca\u01cc\u0007c\u0002",
    "\u0002\u01cb\u01cd\u0007\u0080\u0002\u0002\u01cc\u01cb\u0003\u0002\u0002",
    "\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cd\u01d7\u0003\u0002\u0002",
    "\u0002\u01ce\u01d0\u0007\u0094\u0002\u0002\u01cf\u01d1\u0007\u0080\u0002",
    "\u0002\u01d0\u01cf\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002",
    "\u0002\u01d1\u01d7\u0003\u0002\u0002\u0002\u01d2\u01d4\u0007J\u0002",
    "\u0002\u01d3\u01d5\u0007\u0080\u0002\u0002\u01d4\u01d3\u0003\u0002\u0002",
    "\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d7\u0003\u0002\u0002",
    "\u0002\u01d6\u01c8\u0003\u0002\u0002\u0002\u01d6\u01ca\u0003\u0002\u0002",
    "\u0002\u01d6\u01ce\u0003\u0002\u0002\u0002\u01d6\u01d2\u0003\u0002\u0002",
    "\u0002\u01d7-\u0003\u0002\u0002\u0002\u01d8\u01d9\u0007z\u0002\u0002",
    "\u01d9\u01e7\u0005J&\u0002\u01da\u01db\u0007\u00be\u0002\u0002\u01db",
    "\u01dc\u0007\u0004\u0002\u0002\u01dc\u01e1\u0005z>\u0002\u01dd\u01de",
    "\u0007\u0006\u0002\u0002\u01de\u01e0\u0005z>\u0002\u01df\u01dd\u0003",
    "\u0002\u0002\u0002\u01e0\u01e3\u0003\u0002\u0002\u0002\u01e1\u01df\u0003",
    "\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2\u01e4\u0003",
    "\u0002\u0002\u0002\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e5\u0007",
    "\u0005\u0002\u0002\u01e5\u01e7\u0003\u0002\u0002\u0002\u01e6\u01d8\u0003",
    "\u0002\u0002\u0002\u01e6\u01da\u0003\u0002\u0002\u0002\u01e7/\u0003",
    "\u0002\u0002\u0002\u01e8\u01ef\u00054\u001b\u0002\u01e9\u01ea\u0007",
    "\u00ab\u0002\u0002\u01ea\u01eb\u00052\u001a\u0002\u01eb\u01ec\u0007",
    "\u0004\u0002\u0002\u01ec\u01ed\t\u0007\u0002\u0002\u01ed\u01ee\u0007",
    "\u0005\u0002\u0002\u01ee\u01f0\u0003\u0002\u0002\u0002\u01ef\u01e9\u0003",
    "\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002\u01f01\u0003",
    "\u0002\u0002\u0002\u01f1\u01f2\t\b\u0002\u0002\u01f23\u0003\u0002\u0002",
    "\u0002\u01f3\u01fb\u00058\u001d\u0002\u01f4\u01f6\u0007\u0016\u0002",
    "\u0002\u01f5\u01f4\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002",
    "\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f9\u0005z>\u0002",
    "\u01f8\u01fa\u00056\u001c\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002",
    "\u01f9\u01fa\u0003\u0002\u0002\u0002\u01fa\u01fc\u0003\u0002\u0002\u0002",
    "\u01fb\u01f5\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002",
    "\u01fc5\u0003\u0002\u0002\u0002\u01fd\u01fe\u0007\u0004\u0002\u0002",
    "\u01fe\u0203\u0005z>\u0002\u01ff\u0200\u0007\u0006\u0002\u0002\u0200",
    "\u0202\u0005z>\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0202\u0205",
    "\u0003\u0002\u0002\u0002\u0203\u0201\u0003\u0002\u0002\u0002\u0203\u0204",
    "\u0003\u0002\u0002\u0002\u0204\u0206\u0003\u0002\u0002\u0002\u0205\u0203",
    "\u0003\u0002\u0002\u0002\u0206\u0207\u0007\u0005\u0002\u0002\u02077",
    "\u0003\u0002\u0002\u0002\u0208\u022a\u0005B\"\u0002\u0209\u020a\u0007",
    "\u0004\u0002\u0002\u020a\u020b\u0005\b\u0005\u0002\u020b\u020c\u0007",
    "\u0005\u0002\u0002\u020c\u022a\u0003\u0002\u0002\u0002\u020d\u020e\u0007",
    "\u00bc\u0002\u0002\u020e\u020f\u0007\u0004\u0002\u0002\u020f\u0214\u0005",
    "H%\u0002\u0210\u0212\u0007\u0016\u0002\u0002\u0211\u0210\u0003\u0002",
    "\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002",
    "\u0002\u0002\u0213\u0215\u0005z>\u0002\u0214\u0211\u0003\u0002\u0002",
    "\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u021c\u0003\u0002\u0002",
    "\u0002\u0216\u0217\u0007\u00c5\u0002\u0002\u0217\u0219\u0007\u007f\u0002",
    "\u0002\u0218\u021a\u0007\u0016\u0002\u0002\u0219\u0218\u0003\u0002\u0002",
    "\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002",
    "\u0002\u021b\u021d\u0005z>\u0002\u021c\u0216\u0003\u0002\u0002\u0002",
    "\u021c\u021d\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002",
    "\u021e\u021f\u0007\u0005\u0002\u0002\u021f\u022a\u0003\u0002\u0002\u0002",
    "\u0220\u0221\u0007b\u0002\u0002\u0221\u0222\u0007\u0004\u0002\u0002",
    "\u0222\u0223\u0005\b\u0005\u0002\u0223\u0224\u0007\u0005\u0002\u0002",
    "\u0224\u022a\u0003\u0002\u0002\u0002\u0225\u0226\u0007\u0004\u0002\u0002",
    "\u0226\u0227\u0005*\u0016\u0002\u0227\u0228\u0007\u0005\u0002\u0002",
    "\u0228\u022a\u0003\u0002\u0002\u0002\u0229\u0208\u0003\u0002\u0002\u0002",
    "\u0229\u0209\u0003\u0002\u0002\u0002\u0229\u020d\u0003\u0002\u0002\u0002",
    "\u0229\u0220\u0003\u0002\u0002\u0002\u0229\u0225\u0003\u0002\u0002\u0002",
    "\u022a9\u0003\u0002\u0002\u0002\u022b\u022c\u0007\b\u0002\u0002\u022c",
    "\u022d\u0005z>\u0002\u022d\u022e\u0007\u0007\u0002\u0002\u022e;\u0003",
    "\u0002\u0002\u0002\u022f\u0230\u0005z>\u0002\u0230\u0231\u0007\u0007",
    "\u0002\u0002\u0231\u0233\u0003\u0002\u0002\u0002\u0232\u022f\u0003\u0002",
    "\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0232\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235=\u0003\u0002",
    "\u0002\u0002\u0236\u0237\u0007\u0007\u0002\u0002\u0237\u023a\u0005z",
    ">\u0002\u0238\u023a\u0007\t\u0002\u0002\u0239\u0236\u0003\u0002\u0002",
    "\u0002\u0239\u0238\u0003\u0002\u0002\u0002\u023a?\u0003\u0002\u0002",
    "\u0002\u023b\u023c\u0007\n\u0002\u0002\u023c\u0240\u0005z>\u0002\u023d",
    "\u023f\u0005> \u0002\u023e\u023d\u0003\u0002\u0002\u0002\u023f\u0242",
    "\u0003\u0002\u0002\u0002\u0240\u023e\u0003\u0002\u0002\u0002\u0240\u0241",
    "\u0003\u0002\u0002\u0002\u0241A\u0003\u0002\u0002\u0002\u0242\u0240",
    "\u0003\u0002\u0002\u0002\u0243\u0245\u0005:\u001e\u0002\u0244\u0243",
    "\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0246",
    "\u0003\u0002\u0002\u0002\u0246\u0248\u0005x=\u0002\u0247\u0249\u0005",
    "@!\u0002\u0248\u0247\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002",
    "\u0002\u0002\u0249C\u0003\u0002\u0002\u0002\u024a\u024b\u0007\u0007",
    "\u0002\u0002\u024b\u0251\u0005z>\u0002\u024c\u0251\u0007\t\u0002\u0002",
    "\u024d\u024e\u0007\u000b\u0002\u0002\u024e\u024f\u0007\u00d9\u0002\u0002",
    "\u024f\u0251\u0007\f\u0002\u0002\u0250\u024a\u0003\u0002\u0002\u0002",
    "\u0250\u024c\u0003\u0002\u0002\u0002\u0250\u024d\u0003\u0002\u0002\u0002",
    "\u0251E\u0003\u0002\u0002\u0002\u0252\u0256\u0005z>\u0002\u0253\u0255",
    "\u0005D#\u0002\u0254\u0253\u0003\u0002\u0002\u0002\u0255\u0258\u0003",
    "\u0002\u0002\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0257\u0003",
    "\u0002\u0002\u0002\u0257G\u0003\u0002\u0002\u0002\u0258\u0256\u0003",
    "\u0002\u0002\u0002\u0259\u025a\u0005J&\u0002\u025aI\u0003\u0002\u0002",
    "\u0002\u025b\u025c\b&\u0001\u0002\u025c\u0260\u0005L\'\u0002\u025d\u025e",
    "\u0007t\u0002\u0002\u025e\u0260\u0005J&\u0005\u025f\u025b\u0003\u0002",
    "\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002\u0260\u0269\u0003\u0002",
    "\u0002\u0002\u0261\u0262\f\u0004\u0002\u0002\u0262\u0263\u0007\u0013",
    "\u0002\u0002\u0263\u0268\u0005J&\u0005\u0264\u0265\f\u0003\u0002\u0002",
    "\u0265\u0266\u0007}\u0002\u0002\u0266\u0268\u0005J&\u0004\u0267\u0261",
    "\u0003\u0002\u0002\u0002\u0267\u0264\u0003\u0002\u0002\u0002\u0268\u026b",
    "\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002\u0002\u0269\u026a",
    "\u0003\u0002\u0002\u0002\u026aK\u0003\u0002\u0002\u0002\u026b\u0269",
    "\u0003\u0002\u0002\u0002\u026c\u026e\u0005P)\u0002\u026d\u026f\u0005",
    "N(\u0002\u026e\u026d\u0003\u0002\u0002\u0002\u026e\u026f\u0003\u0002",
    "\u0002\u0002\u026fM\u0003\u0002\u0002\u0002\u0270\u0271\u0005X-\u0002",
    "\u0271\u0272\u0005P)\u0002\u0272\u02b3\u0003\u0002\u0002\u0002\u0273",
    "\u0274\u0005X-\u0002\u0274\u0275\u0005Z.\u0002\u0275\u0276\u0007\u0004",
    "\u0002\u0002\u0276\u0277\u0005\b\u0005\u0002\u0277\u0278\u0007\u0005",
    "\u0002\u0002\u0278\u02b3\u0003\u0002\u0002\u0002\u0279\u027b\u0007t",
    "\u0002\u0002\u027a\u0279\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002",
    "\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027d\u0007\u001a",
    "\u0002\u0002\u027d\u027e\u0005P)\u0002\u027e\u027f\u0007\u0013\u0002",
    "\u0002\u027f\u0280\u0005P)\u0002\u0280\u02b3\u0003\u0002\u0002\u0002",
    "\u0281\u0283\u0007t\u0002\u0002\u0282\u0281\u0003\u0002\u0002\u0002",
    "\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002",
    "\u0284\u0285\u0007U\u0002\u0002\u0285\u0286\u0007\u0004\u0002\u0002",
    "\u0286\u028b\u0005H%\u0002\u0287\u0288\u0007\u0006\u0002\u0002\u0288",
    "\u028a\u0005H%\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u028a\u028d",
    "\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002\u0002\u028b\u028c",
    "\u0003\u0002\u0002\u0002\u028c\u028e\u0003\u0002\u0002\u0002\u028d\u028b",
    "\u0003\u0002\u0002\u0002\u028e\u028f\u0007\u0005\u0002\u0002\u028f\u02b3",
    "\u0003\u0002\u0002\u0002\u0290\u0292\u0007t\u0002\u0002\u0291\u0290",
    "\u0003\u0002\u0002\u0002\u0291\u0292\u0003\u0002\u0002\u0002\u0292\u0293",
    "\u0003\u0002\u0002\u0002\u0293\u0294\u0007U\u0002\u0002\u0294\u0295",
    "\u0007\u0004\u0002\u0002\u0295\u0296\u0005\b\u0005\u0002\u0296\u0297",
    "\u0007\u0005\u0002\u0002\u0297\u02b3\u0003\u0002\u0002\u0002\u0298\u029a",
    "\u0007t\u0002\u0002\u0299\u0298\u0003\u0002\u0002\u0002\u0299\u029a",
    "\u0003\u0002\u0002\u0002\u029a\u029b\u0003\u0002\u0002\u0002\u029b\u029c",
    "\u0007e\u0002\u0002\u029c\u029f\u0005P)\u0002\u029d\u029e\u0007<\u0002",
    "\u0002\u029e\u02a0\u0005P)\u0002\u029f\u029d\u0003\u0002\u0002\u0002",
    "\u029f\u02a0\u0003\u0002\u0002\u0002\u02a0\u02b3\u0003\u0002\u0002\u0002",
    "\u02a1\u02a3\u0007^\u0002\u0002\u02a2\u02a4\u0007t\u0002\u0002\u02a3",
    "\u02a2\u0003\u0002\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4",
    "\u02a5\u0003\u0002\u0002\u0002\u02a5\u02b3\u0007u\u0002\u0002\u02a6",
    "\u02a8\u0007^\u0002\u0002\u02a7\u02a9\u0007t\u0002\u0002\u02a8\u02a7",
    "\u0003\u0002\u0002\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02aa",
    "\u0003\u0002\u0002\u0002\u02aa\u02b3\u0007\u00ba\u0002\u0002\u02ab\u02ad",
    "\u0007^\u0002\u0002\u02ac\u02ae\u0007t\u0002\u0002\u02ad\u02ac\u0003",
    "\u0002\u0002\u0002\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae\u02af\u0003",
    "\u0002\u0002\u0002\u02af\u02b0\u00077\u0002\u0002\u02b0\u02b1\u0007",
    "I\u0002\u0002\u02b1\u02b3\u0005P)\u0002\u02b2\u0270\u0003\u0002\u0002",
    "\u0002\u02b2\u0273\u0003\u0002\u0002\u0002\u02b2\u027a\u0003\u0002\u0002",
    "\u0002\u02b2\u0282\u0003\u0002\u0002\u0002\u02b2\u0291\u0003\u0002\u0002",
    "\u0002\u02b2\u0299\u0003\u0002\u0002\u0002\u02b2\u02a1\u0003\u0002\u0002",
    "\u0002\u02b2\u02a6\u0003\u0002\u0002\u0002\u02b2\u02ab\u0003\u0002\u0002",
    "\u0002\u02b3O\u0003\u0002\u0002\u0002\u02b4\u02b5\b)\u0001\u0002\u02b5",
    "\u02b9\u0005R*\u0002\u02b6\u02b7\t\t\u0002\u0002\u02b7\u02b9\u0005P",
    ")\u0006\u02b8\u02b4\u0003\u0002\u0002\u0002\u02b8\u02b6\u0003\u0002",
    "\u0002\u0002\u02b9\u02ca\u0003\u0002\u0002\u0002\u02ba\u02bb\f\u0007",
    "\u0002\u0002\u02bb\u02bc\u0007\u0018\u0002\u0002\u02bc\u02bd\u0007\u00ae",
    "\u0002\u0002\u02bd\u02be\u0007\u00c9\u0002\u0002\u02be\u02c9\u0005P",
    ")\b\u02bf\u02c0\f\u0005\u0002\u0002\u02c0\u02c1\t\n\u0002\u0002\u02c1",
    "\u02c9\u0005P)\u0006\u02c2\u02c3\f\u0004\u0002\u0002\u02c3\u02c4\t\t",
    "\u0002\u0002\u02c4\u02c9\u0005P)\u0005\u02c5\u02c6\f\u0003\u0002\u0002",
    "\u02c6\u02c7\u0007\u00d5\u0002\u0002\u02c7\u02c9\u0005P)\u0004\u02c8",
    "\u02ba\u0003\u0002\u0002\u0002\u02c8\u02bf\u0003\u0002\u0002\u0002\u02c8",
    "\u02c2\u0003\u0002\u0002\u0002\u02c8\u02c5\u0003\u0002\u0002\u0002\u02c9",
    "\u02cc\u0003\u0002\u0002\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002\u02ca",
    "\u02cb\u0003\u0002\u0002\u0002\u02cbQ\u0003\u0002\u0002\u0002\u02cc",
    "\u02ca\u0003\u0002\u0002\u0002\u02cd\u02ce\b*\u0001\u0002\u02ce\u036c",
    "\u0007u\u0002\u0002\u02cf\u036c\u0007\u00ba\u0002\u0002\u02d0\u036c",
    "\u0007x\u0002\u0002\u02d1\u036c\u0005`1\u0002\u02d2\u02d3\u0005z>\u0002",
    "\u02d3\u02d4\u0005V,\u0002\u02d4\u036c\u0003\u0002\u0002\u0002\u02d5",
    "\u02d6\u0007\u00de\u0002\u0002\u02d6\u036c\u0005V,\u0002\u02d7\u036c",
    "\u0005|?\u0002\u02d8\u036c\u0005\\/\u0002\u02d9\u036c\u0005V,\u0002",
    "\u02da\u02db\u0007\u0015\u0002\u0002\u02db\u036c\u0005T+\u0002\u02dc",
    "\u036c\u0005T+\u0002\u02dd\u036c\u0007\u00d8\u0002\u0002\u02de\u036c",
    "\u0007\r\u0002\u0002\u02df\u02e0\u0007\n\u0002\u0002\u02e0\u036c\u0007",
    "\u00d9\u0002\u0002\u02e1\u02e2\u0007\n\u0002\u0002\u02e2\u036c\u0005",
    "z>\u0002\u02e3\u02e4\u0007\u0085\u0002\u0002\u02e4\u02e5\u0007\u0004",
    "\u0002\u0002\u02e5\u02e6\u0005P)\u0002\u02e6\u02e7\u0007U\u0002\u0002",
    "\u02e7\u02e8\u0005P)\u0002\u02e8\u02e9\u0007\u0005\u0002\u0002\u02e9",
    "\u036c\u0003\u0002\u0002\u0002\u02ea\u02eb\u0005x=\u0002\u02eb\u02ec",
    "\u0007\u0004\u0002\u0002\u02ec\u02ed\u0007\u00d2\u0002\u0002\u02ed\u02ef",
    "\u0007\u0005\u0002\u0002\u02ee\u02f0\u0005n8\u0002\u02ef\u02ee\u0003",
    "\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f2\u0003",
    "\u0002\u0002\u0002\u02f1\u02f3\u0005r:\u0002\u02f2\u02f1\u0003\u0002",
    "\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u036c\u0003\u0002",
    "\u0002\u0002\u02f4\u02f5\u0005x=\u0002\u02f5\u0301\u0007\u0004\u0002",
    "\u0002\u02f6\u02f8\u0005&\u0014\u0002\u02f7\u02f6\u0003\u0002\u0002",
    "\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002",
    "\u0002\u02f9\u02fe\u0005H%\u0002\u02fa\u02fb\u0007\u0006\u0002\u0002",
    "\u02fb\u02fd\u0005H%\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fd",
    "\u0300\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe",
    "\u02ff\u0003\u0002\u0002\u0002\u02ff\u0302\u0003\u0002\u0002\u0002\u0300",
    "\u02fe\u0003\u0002\u0002\u0002\u0301\u02f7\u0003\u0002\u0002\u0002\u0301",
    "\u0302\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303",
    "\u0305\u0007\u0005\u0002\u0002\u0304\u0306\u0005p9\u0002\u0305\u0304",
    "\u0003\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0308",
    "\u0003\u0002\u0002\u0002\u0307\u0309\u0005n8\u0002\u0308\u0307\u0003",
    "\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030b\u0003",
    "\u0002\u0002\u0002\u030a\u030c\u0005r:\u0002\u030b\u030a\u0003\u0002",
    "\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u036c\u0003\u0002",
    "\u0002\u0002\u030d\u030e\u0007\u0004\u0002\u0002\u030e\u030f\u0005\b",
    "\u0005\u0002\u030f\u0310\u0007\u0005\u0002\u0002\u0310\u036c\u0003\u0002",
    "\u0002\u0002\u0311\u0312\u0007@\u0002\u0002\u0312\u0313\u0007\u0004",
    "\u0002\u0002\u0313\u0314\u0005\b\u0005\u0002\u0314\u0315\u0007\u0005",
    "\u0002\u0002\u0315\u036c\u0003\u0002\u0002\u0002\u0316\u0317\u0007\u001e",
    "\u0002\u0002\u0317\u0319\u0005P)\u0002\u0318\u031a\u0005l7\u0002\u0319",
    "\u0318\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002\u0002\u031b",
    "\u0319\u0003\u0002\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002\u031c",
    "\u031f\u0003\u0002\u0002\u0002\u031d\u031e\u0007:\u0002\u0002\u031e",
    "\u0320\u0005H%\u0002\u031f\u031d\u0003\u0002\u0002\u0002\u031f\u0320",
    "\u0003\u0002\u0002\u0002\u0320\u0321\u0003\u0002\u0002\u0002\u0321\u0322",
    "\u0007;\u0002\u0002\u0322\u036c\u0003\u0002\u0002\u0002\u0323\u0325",
    "\u0007\u001e\u0002\u0002\u0324\u0326\u0005l7\u0002\u0325\u0324\u0003",
    "\u0002\u0002\u0002\u0326\u0327\u0003\u0002\u0002\u0002\u0327\u0325\u0003",
    "\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u032b\u0003",
    "\u0002\u0002\u0002\u0329\u032a\u0007:\u0002\u0002\u032a\u032c\u0005",
    "H%\u0002\u032b\u0329\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002",
    "\u0002\u0002\u032c\u032d\u0003\u0002\u0002\u0002\u032d\u032e\u0007;",
    "\u0002\u0002\u032e\u036c\u0003\u0002\u0002\u0002\u032f\u0330\t\u000b",
    "\u0002\u0002\u0330\u0331\u0007\u0004\u0002\u0002\u0331\u0332\u0005H",
    "%\u0002\u0332\u0333\u0007\u0016\u0002\u0002\u0333\u0334\u0005f4\u0002",
    "\u0334\u0335\u0007\u0005\u0002\u0002\u0335\u036c\u0003\u0002\u0002\u0002",
    "\u0336\u036c\u0005z>\u0002\u0337\u0338\u0007\u00a7\u0002\u0002\u0338",
    "\u0339\u0007\u0004\u0002\u0002\u0339\u033a\u0005P)\u0002\u033a\u033b",
    "\u0007I\u0002\u0002\u033b\u033e\u0005P)\u0002\u033c\u033d\u0007G\u0002",
    "\u0002\u033d\u033f\u0005P)\u0002\u033e\u033c\u0003\u0002\u0002\u0002",
    "\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002",
    "\u0340\u0341\u0007\u0005\u0002\u0002\u0341\u036c\u0003\u0002\u0002\u0002",
    "\u0342\u0343\u0007s\u0002\u0002\u0343\u0344\u0007\u0004\u0002\u0002",
    "\u0344\u0347\u0005P)\u0002\u0345\u0346\u0007\u0006\u0002\u0002\u0346",
    "\u0348\u0005d3\u0002\u0347\u0345\u0003\u0002\u0002\u0002\u0347\u0348",
    "\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002\u0349\u034a",
    "\u0007\u0005\u0002\u0002\u034a\u036c\u0003\u0002\u0002\u0002\u034b\u034c",
    "\u0007B\u0002\u0002\u034c\u034d\u0007\u0004\u0002\u0002\u034d\u034e",
    "\u0005z>\u0002\u034e\u034f\u0007I\u0002\u0002\u034f\u0350\u0005P)\u0002",
    "\u0350\u0351\u0007\u0005\u0002\u0002\u0351\u036c\u0003\u0002\u0002\u0002",
    "\u0352\u0353\u0007\u0004\u0002\u0002\u0353\u0354\u0005H%\u0002\u0354",
    "\u0355\u0007\u0005\u0002\u0002\u0355\u036c\u0003\u0002\u0002\u0002\u0356",
    "\u0357\u0007P\u0002\u0002\u0357\u0360\u0007\u0004\u0002\u0002\u0358",
    "\u035d\u0005H%\u0002\u0359\u035a\u0007\u0006\u0002\u0002\u035a\u035c",
    "\u0005H%\u0002\u035b\u0359\u0003\u0002\u0002\u0002\u035c\u035f\u0003",
    "\u0002\u0002\u0002\u035d\u035b\u0003\u0002\u0002\u0002\u035d\u035e\u0003",
    "\u0002\u0002\u0002\u035e\u0361\u0003\u0002\u0002\u0002\u035f\u035d\u0003",
    "\u0002\u0002\u0002\u0360\u0358\u0003\u0002\u0002\u0002\u0360\u0361\u0003",
    "\u0002\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002\u0362\u036c\u0007",
    "\u0005\u0002\u0002\u0363\u0369\u0005^0\u0002\u0364\u0366\u0007\u0004",
    "\u0002\u0002\u0365\u0367\u0005V,\u0002\u0366\u0365\u0003\u0002\u0002",
    "\u0002\u0366\u0367\u0003\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002",
    "\u0002\u0368\u036a\u0007\u0005\u0002\u0002\u0369\u0364\u0003\u0002\u0002",
    "\u0002\u0369\u036a\u0003\u0002\u0002\u0002\u036a\u036c\u0003\u0002\u0002",
    "\u0002\u036b\u02cd\u0003\u0002\u0002\u0002\u036b\u02cf\u0003\u0002\u0002",
    "\u0002\u036b\u02d0\u0003\u0002\u0002\u0002\u036b\u02d1\u0003\u0002\u0002",
    "\u0002\u036b\u02d2\u0003\u0002\u0002\u0002\u036b\u02d5\u0003\u0002\u0002",
    "\u0002\u036b\u02d7\u0003\u0002\u0002\u0002\u036b\u02d8\u0003\u0002\u0002",
    "\u0002\u036b\u02d9\u0003\u0002\u0002\u0002\u036b\u02da\u0003\u0002\u0002",
    "\u0002\u036b\u02dc\u0003\u0002\u0002\u0002\u036b\u02dd\u0003\u0002\u0002",
    "\u0002\u036b\u02de\u0003\u0002\u0002\u0002\u036b\u02df\u0003\u0002\u0002",
    "\u0002\u036b\u02e1\u0003\u0002\u0002\u0002\u036b\u02e3\u0003\u0002\u0002",
    "\u0002\u036b\u02ea\u0003\u0002\u0002\u0002\u036b\u02f4\u0003\u0002\u0002",
    "\u0002\u036b\u030d\u0003\u0002\u0002\u0002\u036b\u0311\u0003\u0002\u0002",
    "\u0002\u036b\u0316\u0003\u0002\u0002\u0002\u036b\u0323\u0003\u0002\u0002",
    "\u0002\u036b\u032f\u0003\u0002\u0002\u0002\u036b\u0336\u0003\u0002\u0002",
    "\u0002\u036b\u0337\u0003\u0002\u0002\u0002\u036b\u0342\u0003\u0002\u0002",
    "\u0002\u036b\u034b\u0003\u0002\u0002\u0002\u036b\u0352\u0003\u0002\u0002",
    "\u0002\u036b\u0356\u0003\u0002\u0002\u0002\u036b\u0363\u0003\u0002\u0002",
    "\u0002\u036c\u037a\u0003\u0002\u0002\u0002\u036d\u036e\f\f\u0002\u0002",
    "\u036e\u036f\u0007\u000e\u0002\u0002\u036f\u0379\u0005f4\u0002\u0370",
    "\u0371\f\u000b\u0002\u0002\u0371\u0372\u0007\u000b\u0002\u0002\u0372",
    "\u0373\u0005P)\u0002\u0373\u0374\u0007\f\u0002\u0002\u0374\u0379\u0003",
    "\u0002\u0002\u0002\u0375\u0376\f\t\u0002\u0002\u0376\u0377\u0007\u0007",
    "\u0002\u0002\u0377\u0379\u0005z>\u0002\u0378\u036d\u0003\u0002\u0002",
    "\u0002\u0378\u0370\u0003\u0002\u0002\u0002\u0378\u0375\u0003\u0002\u0002",
    "\u0002\u0379\u037c\u0003\u0002\u0002\u0002\u037a\u0378\u0003\u0002\u0002",
    "\u0002\u037a\u037b\u0003\u0002\u0002\u0002\u037bS\u0003\u0002\u0002",
    "\u0002\u037c\u037a\u0003\u0002\u0002\u0002\u037d\u0386\u0007\u000b\u0002",
    "\u0002\u037e\u0383\u0005H%\u0002\u037f\u0380\u0007\u0006\u0002\u0002",
    "\u0380\u0382\u0005H%\u0002\u0381\u037f\u0003\u0002\u0002\u0002\u0382",
    "\u0385\u0003\u0002\u0002\u0002\u0383\u0381\u0003\u0002\u0002\u0002\u0383",
    "\u0384\u0003\u0002\u0002\u0002\u0384\u0387\u0003\u0002\u0002\u0002\u0385",
    "\u0383\u0003\u0002\u0002\u0002\u0386\u037e\u0003\u0002\u0002\u0002\u0386",
    "\u0387\u0003\u0002\u0002\u0002\u0387\u0388\u0003\u0002\u0002\u0002\u0388",
    "\u0389\u0007\f\u0002\u0002\u0389U\u0003\u0002\u0002\u0002\u038a\u0391",
    "\u0007\u00d6\u0002\u0002\u038b\u038e\u0007\u00d7\u0002\u0002\u038c\u038d",
    "\u0007\u00b7\u0002\u0002\u038d\u038f\u0007\u00d6\u0002\u0002\u038e\u038c",
    "\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002\u038f\u0391",
    "\u0003\u0002\u0002\u0002\u0390\u038a\u0003\u0002\u0002\u0002\u0390\u038b",
    "\u0003\u0002\u0002\u0002\u0391W\u0003\u0002\u0002\u0002\u0392\u0393",
    "\t\f\u0002\u0002\u0393Y\u0003\u0002\u0002\u0002\u0394\u0395\t\r\u0002",
    "\u0002\u0395[\u0003\u0002\u0002\u0002\u0396\u0397\t\u000e\u0002\u0002",
    "\u0397]\u0003\u0002\u0002\u0002\u0398\u0399\t\u000f\u0002\u0002\u0399",
    "_\u0003\u0002\u0002\u0002\u039a\u039b\u0007\\\u0002\u0002\u039b\u039c",
    "\u0005V,\u0002\u039c\u039f\u0005b2\u0002\u039d\u039e\u0007\u00b1\u0002",
    "\u0002\u039e\u03a0\u0005b2\u0002\u039f\u039d\u0003\u0002\u0002\u0002",
    "\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03ae\u0003\u0002\u0002\u0002",
    "\u03a1\u03a3\u0007\\\u0002\u0002\u03a2\u03a4\t\t\u0002\u0002\u03a3\u03a2",
    "\u0003\u0002\u0002\u0002\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a4\u03a5",
    "\u0003\u0002\u0002\u0002\u03a5\u03a8\u0007\u00d9\u0002\u0002\u03a6\u03a7",
    "\u0007\u0007\u0002\u0002\u03a7\u03a9\u0007\u00d9\u0002\u0002\u03a8\u03a6",
    "\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9\u03aa",
    "\u0003\u0002\u0002\u0002\u03aa\u03ae\u0005b2\u0002\u03ab\u03ac\u0007",
    "\\\u0002\u0002\u03ac\u03ae\u0005V,\u0002\u03ad\u039a\u0003\u0002\u0002",
    "\u0002\u03ad\u03a1\u0003\u0002\u0002\u0002\u03ad\u03ab\u0003\u0002\u0002",
    "\u0002\u03aea\u0003\u0002\u0002\u0002\u03af\u03b0\t\u0010\u0002\u0002",
    "\u03b0c\u0003\u0002\u0002\u0002\u03b1\u03b2\t\u0011\u0002\u0002\u03b2",
    "e\u0003\u0002\u0002\u0002\u03b3\u03c4\u0007\u0015\u0002\u0002\u03b4",
    "\u03c4\u0007j\u0002\u0002\u03b5\u03c1\u0005j6\u0002\u03b6\u03b7\u0007",
    "\u0004\u0002\u0002\u03b7\u03bc\u0005h5\u0002\u03b8\u03b9\u0007\u0006",
    "\u0002\u0002\u03b9\u03bb\u0005h5\u0002\u03ba\u03b8\u0003\u0002\u0002",
    "\u0002\u03bb\u03be\u0003\u0002\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002",
    "\u0002\u03bc\u03bd\u0003\u0002\u0002\u0002\u03bd\u03bf\u0003\u0002\u0002",
    "\u0002\u03be\u03bc\u0003\u0002\u0002\u0002\u03bf\u03c0\u0007\u0005\u0002",
    "\u0002\u03c0\u03c2\u0003\u0002\u0002\u0002\u03c1\u03b6\u0003\u0002\u0002",
    "\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2\u03c4\u0003\u0002\u0002",
    "\u0002\u03c3\u03b3\u0003\u0002\u0002\u0002\u03c3\u03b4\u0003\u0002\u0002",
    "\u0002\u03c3\u03b5\u0003\u0002\u0002\u0002\u03c4g\u0003\u0002\u0002",
    "\u0002\u03c5\u03c8\u0007\u00d9\u0002\u0002\u03c6\u03c8\u0005f4\u0002",
    "\u03c7\u03c5\u0003\u0002\u0002\u0002\u03c7\u03c6\u0003\u0002\u0002\u0002",
    "\u03c8i\u0003\u0002\u0002\u0002\u03c9\u03cc\u0007\u00de\u0002\u0002",
    "\u03ca\u03cc\u0005z>\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002\u03cb",
    "\u03ca\u0003\u0002\u0002\u0002\u03cck\u0003\u0002\u0002\u0002\u03cd",
    "\u03ce\u0007\u00c3\u0002\u0002\u03ce\u03cf\u0005H%\u0002\u03cf\u03d0",
    "\u0007\u00ad\u0002\u0002\u03d0\u03d1\u0005H%\u0002\u03d1m\u0003\u0002",
    "\u0002\u0002\u03d2\u03d3\u0007D\u0002\u0002\u03d3\u03d4\u0007\u0004",
    "\u0002\u0002\u03d4\u03d5\u0007\u00c4\u0002\u0002\u03d5\u03d6\u0005J",
    "&\u0002\u03d6\u03d7\u0007\u0005\u0002\u0002\u03d7o\u0003\u0002\u0002",
    "\u0002\u03d8\u03d9\u0007|\u0002\u0002\u03d9\u03da\u0007\u0004\u0002",
    "\u0002\u03da\u03db\u0005\u0012\n\u0002\u03db\u03dc\u0007\u0005\u0002",
    "\u0002\u03dcq\u0003\u0002\u0002\u0002\u03dd\u03de\u0007\u0082\u0002",
    "\u0002\u03de\u03e9\u0007\u0004\u0002\u0002\u03df\u03e0\u0007\u0083\u0002",
    "\u0002\u03e0\u03e1\u0007\u001b\u0002\u0002\u03e1\u03e6\u0005H%\u0002",
    "\u03e2\u03e3\u0007\u0006\u0002\u0002\u03e3\u03e5\u0005H%\u0002\u03e4",
    "\u03e2\u0003\u0002\u0002\u0002\u03e5\u03e8\u0003\u0002\u0002\u0002\u03e6",
    "\u03e4\u0003\u0002\u0002\u0002\u03e6\u03e7\u0003\u0002\u0002\u0002\u03e7",
    "\u03ea\u0003\u0002\u0002\u0002\u03e8\u03e6\u0003\u0002\u0002\u0002\u03e9",
    "\u03df\u0003\u0002\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea",
    "\u03f5\u0003\u0002\u0002\u0002\u03eb\u03ec\u0007~\u0002\u0002\u03ec",
    "\u03ed\u0007\u001b\u0002\u0002\u03ed\u03f2\u0005\u001a\u000e\u0002\u03ee",
    "\u03ef\u0007\u0006\u0002\u0002\u03ef\u03f1\u0005\u001a\u000e\u0002\u03f0",
    "\u03ee\u0003\u0002\u0002\u0002\u03f1\u03f4\u0003\u0002\u0002\u0002\u03f2",
    "\u03f0\u0003\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3",
    "\u03f6\u0003\u0002\u0002\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002\u03f5",
    "\u03eb\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6",
    "\u03f8\u0003\u0002\u0002\u0002\u03f7\u03f9\u0005t;\u0002\u03f8\u03f7",
    "\u0003\u0002\u0002\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fa",
    "\u0003\u0002\u0002\u0002\u03fa\u03fb\u0007\u0005\u0002\u0002\u03fbs",
    "\u0003\u0002\u0002\u0002\u03fc\u03fd\u0007\u008b\u0002\u0002\u03fd\u040d",
    "\u0005v<\u0002\u03fe\u03ff\u0007\u0098\u0002\u0002\u03ff\u040d\u0005",
    "v<\u0002\u0400\u0401\u0007\u008b\u0002\u0002\u0401\u0402\u0007\u001a",
    "\u0002\u0002\u0402\u0403\u0005v<\u0002\u0403\u0404\u0007\u0013\u0002",
    "\u0002\u0404\u0405\u0005v<\u0002\u0405\u040d\u0003\u0002\u0002\u0002",
    "\u0406\u0407\u0007\u0098\u0002\u0002\u0407\u0408\u0007\u001a\u0002\u0002",
    "\u0408\u0409\u0005v<\u0002\u0409\u040a\u0007\u0013\u0002\u0002\u040a",
    "\u040b\u0005v<\u0002\u040b\u040d\u0003\u0002\u0002\u0002\u040c\u03fc",
    "\u0003\u0002\u0002\u0002\u040c\u03fe\u0003\u0002\u0002\u0002\u040c\u0400",
    "\u0003\u0002\u0002\u0002\u040c\u0406\u0003\u0002\u0002\u0002\u040du",
    "\u0003\u0002\u0002\u0002\u040e\u040f\u0007\u00b8\u0002\u0002\u040f\u0418",
    "\u0007\u0086\u0002\u0002\u0410\u0411\u0007\u00b8\u0002\u0002\u0411\u0418",
    "\u0007F\u0002\u0002\u0412\u0413\u0007+\u0002\u0002\u0413\u0418\u0007",
    "\u0097\u0002\u0002\u0414\u0415\u0005H%\u0002\u0415\u0416\t\u0012\u0002",
    "\u0002\u0416\u0418\u0003\u0002\u0002\u0002\u0417\u040e\u0003\u0002\u0002",
    "\u0002\u0417\u0410\u0003\u0002\u0002\u0002\u0417\u0412\u0003\u0002\u0002",
    "\u0002\u0417\u0414\u0003\u0002\u0002\u0002\u0418w\u0003\u0002\u0002",
    "\u0002\u0419\u041e\u0005z>\u0002\u041a\u041b\u0007\u0007\u0002\u0002",
    "\u041b\u041d\u0005z>\u0002\u041c\u041a\u0003\u0002\u0002\u0002\u041d",
    "\u0420\u0003\u0002\u0002\u0002\u041e\u041c\u0003\u0002\u0002\u0002\u041e",
    "\u041f\u0003\u0002\u0002\u0002\u041fy\u0003\u0002\u0002\u0002\u0420",
    "\u041e\u0003\u0002\u0002\u0002\u0421\u0426\u0007\u00db\u0002\u0002\u0422",
    "\u0426\u0007\u00dc\u0002\u0002\u0423\u0426\u0005~@\u0002\u0424\u0426",
    "\u0007\u00dd\u0002\u0002\u0425\u0421\u0003\u0002\u0002\u0002\u0425\u0422",
    "\u0003\u0002\u0002\u0002\u0425\u0423\u0003\u0002\u0002\u0002\u0425\u0424",
    "\u0003\u0002\u0002\u0002\u0426{\u0003\u0002\u0002\u0002\u0427\u042a",
    "\u0007\u00da\u0002\u0002\u0428\u042a\u0007\u00d9\u0002\u0002\u0429\u0427",
    "\u0003\u0002\u0002\u0002\u0429\u0428\u0003\u0002\u0002\u0002\u042a}",
    "\u0003\u0002\u0002\u0002\u042b\u042c\t\u0013\u0002\u0002\u042c\u007f",
    "\u0003\u0002\u0002\u0002\u008e\u0084\u0091\u009a\u009f\u00a4\u00a8\u00ae",
    "\u00b1\u00b4\u00ba\u00c1\u00cc\u00cf\u00d4\u00d6\u00da\u00dd\u00e2\u00e8",
    "\u00ef\u00fd\u0102\u0107\u0113\u011a\u011e\u0122\u0126\u012d\u0131\u0133",
    "\u013b\u013e\u0142\u0147\u014b\u014e\u0155\u0160\u0163\u016d\u0170\u017b",
    "\u0180\u0188\u018b\u018f\u0193\u019e\u01a1\u01a8\u01ad\u01bd\u01c0\u01c4",
    "\u01c8\u01cc\u01d0\u01d4\u01d6\u01e1\u01e6\u01ef\u01f5\u01f9\u01fb\u0203",
    "\u0211\u0214\u0219\u021c\u0229\u0234\u0239\u0240\u0244\u0248\u0250\u0256",
    "\u025f\u0267\u0269\u026e\u027a\u0282\u028b\u0291\u0299\u029f\u02a3\u02a8",
    "\u02ad\u02b2\u02b8\u02c8\u02ca\u02ef\u02f2\u02f7\u02fe\u0301\u0305\u0308",
    "\u030b\u031b\u031f\u0327\u032b\u033e\u0347\u035d\u0360\u0366\u0369\u036b",
    "\u0378\u037a\u0383\u0386\u038e\u0390\u039f\u03a3\u03a8\u03ad\u03bc\u03c1",
    "\u03c3\u03c7\u03cb\u03e6\u03e9\u03f2\u03f5\u03f8\u040c\u0417\u041e\u0425",
    "\u0429"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'('", "')'", "','", "'.'", "'$'", "'[*]'", 
                     "':'", "'['", "']'", "'?'", "'::'", "'ADD'", "'ALL'", 
                     "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", 
                     "'AS'", "'ASC'", "'AT'", "'BERNOULLI'", "'BETWEEN'", 
                     "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
                     "'CATALOGS'", "'COALESCE'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'CONSTRAINT'", 
                     "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_DATETIME'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", "'DELETE'", 
                     "'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DISTRIBUTED'", 
                     "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
                     "'EXTRACT'", "'FALSE'", "'FILTER'", "'FIRST'", "'FOLLOWING'", 
                     "'FOR'", "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTIONS'", 
                     "'GRANT'", "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", 
                     "'HAVING'", "'HINT'", "'HOUR'", "'IF'", "'IN'", "'INCLUDING'", 
                     "'INNER'", "'INPUT'", "'INSERT'", "'INTEGER'", "'INTERSECT'", 
                     "'INTERVAL'", "'INTO'", "'IS'", "'ISOLATION'", "'JOIN'", 
                     "'LAST'", "'LATERAL'", "'LEFT'", "'LEVEL'", "'LIKE'", 
                     "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOGICAL'", 
                     "'MAP'", "'MINUTE'", "'MONTH'", "'NATURAL'", "'NFC'", 
                     "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NORMALIZE'", 
                     "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", "'NULL_VALUE'", 
                     "'OFFSET'", "'ON'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", 
                     "'ORDINALITY'", "'OUTER'", "'OUTPUT'", "'OVER'", "'PARTITION'", 
                     "'PARTITIONS'", "'POSITION'", "'PRECEDING'", "'PREPARE'", 
                     "'PRIVILEGES'", "'PROPERTIES'", "'PUBLIC'", "'RANGE'", 
                     "'READ'", "'RECURSIVE'", "'RENAME'", "'REPEATABLE'", 
                     "'REPLACE'", "'RESET'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEMA'", 
                     "'SCHEMAS'", "'SECOND'", "'SELECT'", "'SERIALIZABLE'", 
                     "'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SMALLINT'", 
                     "'SOME'", "'START'", "'STATIC_CAST'", "'STATS'", "'SUBSTRING'", 
                     "'SYSTEM'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
                     "'TEXT'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TINYINT'", 
                     "'TO'", "'TRANSACTION'", "'TRUE'", "'TRY_CAST'", "'TRY_STATIC_CAST'", 
                     "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNDEFINED'", "'UNION'", "'UNNEST'", "'USE'", "'USING'", 
                     "'VALIDATE'", "'VALUES'", "'VERBOSE'", "'VIEW'", "'WHEN'", 
                     "'WHERE'", "'WITH'", "'WORK'", "'WRITE'", "'YEAR'", 
                     "'ZONE'", "'='", null, "'<'", "'<='", "'>'", "'>='", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'||'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, "ADD", "ALL", "ALTER", "ANALYZE", 
                      "AND", "ANY", "ARRAY", "AS", "ASC", "AT", "BERNOULLI", 
                      "BETWEEN", "BY", "CALL", "CASCADE", "CASE", "CAST", 
                      "CATALOGS", "COALESCE", "COLUMN", "COLUMNS", "COMMENT", 
                      "COMMIT", "COMMITTED", "CONSTRAINT", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_DATETIME", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATA", "DATE", 
                      "DAY", "DEALLOCATE", "DELETE", "DESC", "DESCRIBE", 
                      "DISTINCT", "DISTRIBUTED", "DROP", "ELSE", "END", 
                      "ESCAPE", "EXCEPT", "EXCLUDING", "EXECUTE", "EXISTS", 
                      "EXPLAIN", "EXTRACT", "BOOL_FALSE", "FILTER", "FIRST", 
                      "FOLLOWING", "FOR", "FORMAT", "FROM", "FULL", "FUNCTIONS", 
                      "GRANT", "GRANTS", "GRAPHVIZ", "GROUP", "GROUPING", 
                      "HAVING", "HINT", "HOUR", "IF", "IN", "INCLUDING", 
                      "INNER", "INPUT", "INSERT", "INTEGER", "INTERSECT", 
                      "INTERVAL", "INTO", "IS", "ISOLATION", "JOIN", "LAST", 
                      "LATERAL", "LEFT", "LEVEL", "LIKE", "LIMIT", "LOCALTIME", 
                      "LOCALTIMESTAMP", "LOGICAL", "MAP", "MINUTE", "MONTH", 
                      "NATURAL", "NFC", "NFD", "NFKC", "NFKD", "NO", "NORMALIZE", 
                      "NOT", "XNULL", "NULLIF", "NULLS", "NULL_VALUE", "OFFSET", 
                      "ON", "ONLY", "OPTION", "OR", "ORDER", "ORDINALITY", 
                      "OUTER", "OUTPUT", "OVER", "PARTITION", "PARTITIONS", 
                      "POSITION", "PRECEDING", "PREPARE", "PRIVILEGES", 
                      "PROPERTIES", "PUBLIC", "RANGE", "READ", "RECURSIVE", 
                      "RENAME", "REPEATABLE", "REPLACE", "RESET", "RESTRICT", 
                      "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWS", 
                      "SCHEMA", "SCHEMAS", "SECOND", "SELECT", "SERIALIZABLE", 
                      "SESSION", "SET", "SETS", "SHOW", "SMALLINT", "SOME", 
                      "START", "STATIC_CAST", "STATS", "SUBSTRING", "SYSTEM", 
                      "TABLE", "TABLES", "TABLESAMPLE", "TEXT", "THEN", 
                      "TIME", "TIMESTAMP", "TINYINT", "TO", "TRANSACTION", 
                      "BOOL_TRUE", "TRY_CAST", "TRY_STATIC_CAST", "TYPE", 
                      "UESCAPE", "UNBOUNDED", "UNCOMMITTED", "UNDEFINED", 
                      "UNION", "UNNEST", "USE", "USING", "VALIDATE", "VALUES", 
                      "VERBOSE", "VIEW", "WHEN", "WHERE", "WITH", "WORK", 
                      "WRITE", "YEAR", "ZONE", "EQ", "NEQ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "CONCAT", "STRING", "UNICODE_STR", "BINARY_LITERAL", 
                      "INTEGER_VALUE", "DECIMAL_VALUE", "IDENTIFIER", "QUOTED_IDENTIFIER", 
                      "BACKQUOTED_IDENTIFIER", "DOUBLE_PRECISION", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER" ];

var ruleNames =  [ "singleStatement", "singleExpression", "statement", "query", 
                   "cWith", "queryNoWith", "hint", "hintValue", "hintList", 
                   "hints", "queryBody", "queryTerm", "sortItem", "querySpecification", 
                   "groupBy", "groupingElement", "groupingExpressions", 
                   "namedQuery", "setQuantifier", "selectItem", "relation", 
                   "joinType", "joinCriteria", "sampledRelation", "sampleType", 
                   "aliasedRelation", "columnAliases", "relationPrimary", 
                   "tablePrefix", "tableWorkspace", "tableFieldPart", "tableField", 
                   "tableQualifiedName", "fieldPathPart", "fieldPath", "expression", 
                   "booleanExpression", "predicated", "predicate", "valueExpression", 
                   "primaryExpression", "array", "string", "comparisonOperator", 
                   "comparisonQuantifier", "booleanValue", "dateFunctionName", 
                   "interval", "intervalField", "normalForm", "type", "typeParameter", 
                   "baseType", "whenClause", "filter", "callOptions", "over", 
                   "windowFrame", "frameBound", "qualifiedName", "identifier", 
                   "number", "nonReserved" ];

function SqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SqlParser.prototype = Object.create(antlr4.Parser.prototype);
SqlParser.prototype.constructor = SqlParser;

Object.defineProperty(SqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SqlParser.EOF = antlr4.Token.EOF;
SqlParser.T__0 = 1;
SqlParser.T__1 = 2;
SqlParser.T__2 = 3;
SqlParser.T__3 = 4;
SqlParser.T__4 = 5;
SqlParser.T__5 = 6;
SqlParser.T__6 = 7;
SqlParser.T__7 = 8;
SqlParser.T__8 = 9;
SqlParser.T__9 = 10;
SqlParser.T__10 = 11;
SqlParser.T__11 = 12;
SqlParser.ADD = 13;
SqlParser.ALL = 14;
SqlParser.ALTER = 15;
SqlParser.ANALYZE = 16;
SqlParser.AND = 17;
SqlParser.ANY = 18;
SqlParser.ARRAY = 19;
SqlParser.AS = 20;
SqlParser.ASC = 21;
SqlParser.AT = 22;
SqlParser.BERNOULLI = 23;
SqlParser.BETWEEN = 24;
SqlParser.BY = 25;
SqlParser.CALL = 26;
SqlParser.CASCADE = 27;
SqlParser.CASE = 28;
SqlParser.CAST = 29;
SqlParser.CATALOGS = 30;
SqlParser.COALESCE = 31;
SqlParser.COLUMN = 32;
SqlParser.COLUMNS = 33;
SqlParser.COMMENT = 34;
SqlParser.COMMIT = 35;
SqlParser.COMMITTED = 36;
SqlParser.CONSTRAINT = 37;
SqlParser.CREATE = 38;
SqlParser.CROSS = 39;
SqlParser.CUBE = 40;
SqlParser.CURRENT = 41;
SqlParser.CURRENT_DATE = 42;
SqlParser.CURRENT_DATETIME = 43;
SqlParser.CURRENT_TIME = 44;
SqlParser.CURRENT_TIMESTAMP = 45;
SqlParser.DATA = 46;
SqlParser.DATE = 47;
SqlParser.DAY = 48;
SqlParser.DEALLOCATE = 49;
SqlParser.DELETE = 50;
SqlParser.DESC = 51;
SqlParser.DESCRIBE = 52;
SqlParser.DISTINCT = 53;
SqlParser.DISTRIBUTED = 54;
SqlParser.DROP = 55;
SqlParser.ELSE = 56;
SqlParser.END = 57;
SqlParser.ESCAPE = 58;
SqlParser.EXCEPT = 59;
SqlParser.EXCLUDING = 60;
SqlParser.EXECUTE = 61;
SqlParser.EXISTS = 62;
SqlParser.EXPLAIN = 63;
SqlParser.EXTRACT = 64;
SqlParser.BOOL_FALSE = 65;
SqlParser.FILTER = 66;
SqlParser.FIRST = 67;
SqlParser.FOLLOWING = 68;
SqlParser.FOR = 69;
SqlParser.FORMAT = 70;
SqlParser.FROM = 71;
SqlParser.FULL = 72;
SqlParser.FUNCTIONS = 73;
SqlParser.GRANT = 74;
SqlParser.GRANTS = 75;
SqlParser.GRAPHVIZ = 76;
SqlParser.GROUP = 77;
SqlParser.GROUPING = 78;
SqlParser.HAVING = 79;
SqlParser.HINT = 80;
SqlParser.HOUR = 81;
SqlParser.IF = 82;
SqlParser.IN = 83;
SqlParser.INCLUDING = 84;
SqlParser.INNER = 85;
SqlParser.INPUT = 86;
SqlParser.INSERT = 87;
SqlParser.INTEGER = 88;
SqlParser.INTERSECT = 89;
SqlParser.INTERVAL = 90;
SqlParser.INTO = 91;
SqlParser.IS = 92;
SqlParser.ISOLATION = 93;
SqlParser.JOIN = 94;
SqlParser.LAST = 95;
SqlParser.LATERAL = 96;
SqlParser.LEFT = 97;
SqlParser.LEVEL = 98;
SqlParser.LIKE = 99;
SqlParser.LIMIT = 100;
SqlParser.LOCALTIME = 101;
SqlParser.LOCALTIMESTAMP = 102;
SqlParser.LOGICAL = 103;
SqlParser.MAP = 104;
SqlParser.MINUTE = 105;
SqlParser.MONTH = 106;
SqlParser.NATURAL = 107;
SqlParser.NFC = 108;
SqlParser.NFD = 109;
SqlParser.NFKC = 110;
SqlParser.NFKD = 111;
SqlParser.NO = 112;
SqlParser.NORMALIZE = 113;
SqlParser.NOT = 114;
SqlParser.XNULL = 115;
SqlParser.NULLIF = 116;
SqlParser.NULLS = 117;
SqlParser.NULL_VALUE = 118;
SqlParser.OFFSET = 119;
SqlParser.ON = 120;
SqlParser.ONLY = 121;
SqlParser.OPTION = 122;
SqlParser.OR = 123;
SqlParser.ORDER = 124;
SqlParser.ORDINALITY = 125;
SqlParser.OUTER = 126;
SqlParser.OUTPUT = 127;
SqlParser.OVER = 128;
SqlParser.PARTITION = 129;
SqlParser.PARTITIONS = 130;
SqlParser.POSITION = 131;
SqlParser.PRECEDING = 132;
SqlParser.PREPARE = 133;
SqlParser.PRIVILEGES = 134;
SqlParser.PROPERTIES = 135;
SqlParser.PUBLIC = 136;
SqlParser.RANGE = 137;
SqlParser.READ = 138;
SqlParser.RECURSIVE = 139;
SqlParser.RENAME = 140;
SqlParser.REPEATABLE = 141;
SqlParser.REPLACE = 142;
SqlParser.RESET = 143;
SqlParser.RESTRICT = 144;
SqlParser.REVOKE = 145;
SqlParser.RIGHT = 146;
SqlParser.ROLLBACK = 147;
SqlParser.ROLLUP = 148;
SqlParser.ROW = 149;
SqlParser.ROWS = 150;
SqlParser.SCHEMA = 151;
SqlParser.SCHEMAS = 152;
SqlParser.SECOND = 153;
SqlParser.SELECT = 154;
SqlParser.SERIALIZABLE = 155;
SqlParser.SESSION = 156;
SqlParser.SET = 157;
SqlParser.SETS = 158;
SqlParser.SHOW = 159;
SqlParser.SMALLINT = 160;
SqlParser.SOME = 161;
SqlParser.START = 162;
SqlParser.STATIC_CAST = 163;
SqlParser.STATS = 164;
SqlParser.SUBSTRING = 165;
SqlParser.SYSTEM = 166;
SqlParser.TABLE = 167;
SqlParser.TABLES = 168;
SqlParser.TABLESAMPLE = 169;
SqlParser.TEXT = 170;
SqlParser.THEN = 171;
SqlParser.TIME = 172;
SqlParser.TIMESTAMP = 173;
SqlParser.TINYINT = 174;
SqlParser.TO = 175;
SqlParser.TRANSACTION = 176;
SqlParser.BOOL_TRUE = 177;
SqlParser.TRY_CAST = 178;
SqlParser.TRY_STATIC_CAST = 179;
SqlParser.TYPE = 180;
SqlParser.UESCAPE = 181;
SqlParser.UNBOUNDED = 182;
SqlParser.UNCOMMITTED = 183;
SqlParser.UNDEFINED = 184;
SqlParser.UNION = 185;
SqlParser.UNNEST = 186;
SqlParser.USE = 187;
SqlParser.USING = 188;
SqlParser.VALIDATE = 189;
SqlParser.VALUES = 190;
SqlParser.VERBOSE = 191;
SqlParser.VIEW = 192;
SqlParser.WHEN = 193;
SqlParser.WHERE = 194;
SqlParser.WITH = 195;
SqlParser.WORK = 196;
SqlParser.WRITE = 197;
SqlParser.YEAR = 198;
SqlParser.ZONE = 199;
SqlParser.EQ = 200;
SqlParser.NEQ = 201;
SqlParser.LT = 202;
SqlParser.LTE = 203;
SqlParser.GT = 204;
SqlParser.GTE = 205;
SqlParser.PLUS = 206;
SqlParser.MINUS = 207;
SqlParser.ASTERISK = 208;
SqlParser.SLASH = 209;
SqlParser.PERCENT = 210;
SqlParser.CONCAT = 211;
SqlParser.STRING = 212;
SqlParser.UNICODE_STR = 213;
SqlParser.BINARY_LITERAL = 214;
SqlParser.INTEGER_VALUE = 215;
SqlParser.DECIMAL_VALUE = 216;
SqlParser.IDENTIFIER = 217;
SqlParser.QUOTED_IDENTIFIER = 218;
SqlParser.BACKQUOTED_IDENTIFIER = 219;
SqlParser.DOUBLE_PRECISION = 220;
SqlParser.SIMPLE_COMMENT = 221;
SqlParser.BRACKETED_COMMENT = 222;
SqlParser.WS = 223;
SqlParser.UNRECOGNIZED = 224;
SqlParser.DELIMITER = 225;

SqlParser.RULE_singleStatement = 0;
SqlParser.RULE_singleExpression = 1;
SqlParser.RULE_statement = 2;
SqlParser.RULE_query = 3;
SqlParser.RULE_cWith = 4;
SqlParser.RULE_queryNoWith = 5;
SqlParser.RULE_hint = 6;
SqlParser.RULE_hintValue = 7;
SqlParser.RULE_hintList = 8;
SqlParser.RULE_hints = 9;
SqlParser.RULE_queryBody = 10;
SqlParser.RULE_queryTerm = 11;
SqlParser.RULE_sortItem = 12;
SqlParser.RULE_querySpecification = 13;
SqlParser.RULE_groupBy = 14;
SqlParser.RULE_groupingElement = 15;
SqlParser.RULE_groupingExpressions = 16;
SqlParser.RULE_namedQuery = 17;
SqlParser.RULE_setQuantifier = 18;
SqlParser.RULE_selectItem = 19;
SqlParser.RULE_relation = 20;
SqlParser.RULE_joinType = 21;
SqlParser.RULE_joinCriteria = 22;
SqlParser.RULE_sampledRelation = 23;
SqlParser.RULE_sampleType = 24;
SqlParser.RULE_aliasedRelation = 25;
SqlParser.RULE_columnAliases = 26;
SqlParser.RULE_relationPrimary = 27;
SqlParser.RULE_tablePrefix = 28;
SqlParser.RULE_tableWorkspace = 29;
SqlParser.RULE_tableFieldPart = 30;
SqlParser.RULE_tableField = 31;
SqlParser.RULE_tableQualifiedName = 32;
SqlParser.RULE_fieldPathPart = 33;
SqlParser.RULE_fieldPath = 34;
SqlParser.RULE_expression = 35;
SqlParser.RULE_booleanExpression = 36;
SqlParser.RULE_predicated = 37;
SqlParser.RULE_predicate = 38;
SqlParser.RULE_valueExpression = 39;
SqlParser.RULE_primaryExpression = 40;
SqlParser.RULE_array = 41;
SqlParser.RULE_string = 42;
SqlParser.RULE_comparisonOperator = 43;
SqlParser.RULE_comparisonQuantifier = 44;
SqlParser.RULE_booleanValue = 45;
SqlParser.RULE_dateFunctionName = 46;
SqlParser.RULE_interval = 47;
SqlParser.RULE_intervalField = 48;
SqlParser.RULE_normalForm = 49;
SqlParser.RULE_type = 50;
SqlParser.RULE_typeParameter = 51;
SqlParser.RULE_baseType = 52;
SqlParser.RULE_whenClause = 53;
SqlParser.RULE_filter = 54;
SqlParser.RULE_callOptions = 55;
SqlParser.RULE_over = 56;
SqlParser.RULE_windowFrame = 57;
SqlParser.RULE_frameBound = 58;
SqlParser.RULE_qualifiedName = 59;
SqlParser.RULE_identifier = 60;
SqlParser.RULE_number = 61;
SqlParser.RULE_nonReserved = 62;


function SingleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_singleStatement;
    return this;
}

SingleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;

SingleStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SingleStatementContext.prototype.EOF = function() {
    return this.getToken(SqlParser.EOF, 0);
};

SingleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSingleStatement(this);
	}
};

SingleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSingleStatement(this);
	}
};

SingleStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSingleStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.SingleStatementContext = SingleStatementContext;

SqlParser.prototype.singleStatement = function() {

    var localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SqlParser.RULE_singleStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 126;
        this.statement();
        this.state = 130;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlParser.T__0) {
            this.state = 127;
            this.match(SqlParser.T__0);
            this.state = 132;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 133;
        this.match(SqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_singleExpression;
    return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;

SingleExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SingleExpressionContext.prototype.EOF = function() {
    return this.getToken(SqlParser.EOF, 0);
};

SingleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSingleExpression(this);
	}
};

SingleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSingleExpression(this);
	}
};

SingleExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSingleExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.SingleExpressionContext = SingleExpressionContext;

SqlParser.prototype.singleExpression = function() {

    var localctx = new SingleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SqlParser.RULE_singleExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 135;
        this.expression();
        this.state = 136;
        this.match(SqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.options = null; // HintListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainContext.prototype = Object.create(StatementContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

SqlParser.ExplainContext = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlParser.EXPLAIN, 0);
};

ExplainContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

ExplainContext.prototype.ANALYZE = function() {
    return this.getToken(SqlParser.ANALYZE, 0);
};

ExplainContext.prototype.hintList = function() {
    return this.getTypedRuleContext(HintListContext,0);
};
ExplainContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterExplain(this);
	}
};

ExplainContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitExplain(this);
	}
};

ExplainContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitExplain(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StatementDefaultContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatementDefaultContext.prototype = Object.create(StatementContext.prototype);
StatementDefaultContext.prototype.constructor = StatementDefaultContext;

SqlParser.StatementDefaultContext = StatementDefaultContext;

StatementDefaultContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
StatementDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterStatementDefault(this);
	}
};

StatementDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitStatementDefault(this);
	}
};

StatementDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitStatementDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InsertIntoContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertIntoContext.prototype = Object.create(StatementContext.prototype);
InsertIntoContext.prototype.constructor = InsertIntoContext;

SqlParser.InsertIntoContext = InsertIntoContext;

InsertIntoContext.prototype.INSERT = function() {
    return this.getToken(SqlParser.INSERT, 0);
};

InsertIntoContext.prototype.INTO = function() {
    return this.getToken(SqlParser.INTO, 0);
};

InsertIntoContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

InsertIntoContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

InsertIntoContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};
InsertIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterInsertInto(this);
	}
};

InsertIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitInsertInto(this);
	}
};

InsertIntoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitInsertInto(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowColumnsContext.prototype = Object.create(StatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;

SqlParser.ShowColumnsContext = ShowColumnsContext;

ShowColumnsContext.prototype.SHOW = function() {
    return this.getToken(SqlParser.SHOW, 0);
};

ShowColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlParser.COLUMNS, 0);
};

ShowColumnsContext.prototype.tableQualifiedName = function() {
    return this.getTypedRuleContext(TableQualifiedNameContext,0);
};

ShowColumnsContext.prototype.FROM = function() {
    return this.getToken(SqlParser.FROM, 0);
};

ShowColumnsContext.prototype.IN = function() {
    return this.getToken(SqlParser.IN, 0);
};

ShowColumnsContext.prototype.callOptions = function() {
    return this.getTypedRuleContext(CallOptionsContext,0);
};

ShowColumnsContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlParser.DESCRIBE, 0);
};

ShowColumnsContext.prototype.DESC = function() {
    return this.getToken(SqlParser.DESC, 0);
};
ShowColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterShowColumns(this);
	}
};

ShowColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitShowColumns(this);
	}
};

ShowColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitShowColumns(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.StatementContext = StatementContext;

SqlParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SqlParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 175;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.T__1:
        case SqlParser.SELECT:
        case SqlParser.TABLE:
        case SqlParser.VALUES:
        case SqlParser.WITH:
            localctx = new StatementDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 138;
            this.query();
            break;
        case SqlParser.INSERT:
            localctx = new InsertIntoContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 139;
            this.match(SqlParser.INSERT);
            this.state = 140;
            this.match(SqlParser.INTO);
            this.state = 141;
            this.qualifiedName();
            this.state = 143;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
            if(la_===1) {
                this.state = 142;
                this.columnAliases();

            }
            this.state = 145;
            this.query();
            break;
        case SqlParser.SHOW:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 147;
            this.match(SqlParser.SHOW);
            this.state = 148;
            this.match(SqlParser.COLUMNS);
            this.state = 149;
            _la = this._input.LA(1);
            if(!(_la===SqlParser.FROM || _la===SqlParser.IN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 150;
            this.tableQualifiedName();
            this.state = 152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.OPTION) {
                this.state = 151;
                this.callOptions();
            }

            break;
        case SqlParser.DESCRIBE:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 154;
            this.match(SqlParser.DESCRIBE);
            this.state = 155;
            this.tableQualifiedName();
            this.state = 157;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.OPTION) {
                this.state = 156;
                this.callOptions();
            }

            break;
        case SqlParser.DESC:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 159;
            this.match(SqlParser.DESC);
            this.state = 160;
            this.tableQualifiedName();
            this.state = 162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.OPTION) {
                this.state = 161;
                this.callOptions();
            }

            break;
        case SqlParser.EXPLAIN:
            localctx = new ExplainContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 164;
            this.match(SqlParser.EXPLAIN);
            this.state = 166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.ANALYZE) {
                this.state = 165;
                this.match(SqlParser.ANALYZE);
            }

            this.state = 172;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
            if(la_===1) {
                this.state = 168;
                this.match(SqlParser.T__1);
                this.state = 169;
                localctx.options = this.hintList();
                this.state = 170;
                this.match(SqlParser.T__2);

            }
            this.state = 174;
            this.query();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};

QueryContext.prototype.cWith = function() {
    return this.getTypedRuleContext(CWithContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQuery(this);
	}
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.QueryContext = QueryContext;

SqlParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SqlParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 178;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.WITH) {
            this.state = 177;
            this.cWith();
        }

        this.state = 180;
        this.queryNoWith();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_cWith;
    return this;
}

CWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CWithContext.prototype.constructor = CWithContext;

CWithContext.prototype.WITH = function() {
    return this.getToken(SqlParser.WITH, 0);
};

CWithContext.prototype.namedQuery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedQueryContext);
    } else {
        return this.getTypedRuleContext(NamedQueryContext,i);
    }
};

CWithContext.prototype.RECURSIVE = function() {
    return this.getToken(SqlParser.RECURSIVE, 0);
};

CWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterCWith(this);
	}
};

CWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitCWith(this);
	}
};

CWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitCWith(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.CWithContext = CWithContext;

SqlParser.prototype.cWith = function() {

    var localctx = new CWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SqlParser.RULE_cWith);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 182;
        this.match(SqlParser.WITH);
        this.state = 184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.RECURSIVE) {
            this.state = 183;
            this.match(SqlParser.RECURSIVE);
        }

        this.state = 186;
        this.namedQuery();
        this.state = 191;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlParser.T__3) {
            this.state = 187;
            this.match(SqlParser.T__3);
            this.state = 188;
            this.namedQuery();
            this.state = 193;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryNoWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_queryNoWith;
    this.limit = null; // ExpressionContext
    this.offset = null; // ExpressionContext
    return this;
}

QueryNoWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryNoWithContext.prototype.constructor = QueryNoWithContext;

QueryNoWithContext.prototype.queryBody = function() {
    return this.getTypedRuleContext(QueryBodyContext,0);
};

QueryNoWithContext.prototype.ORDER = function() {
    return this.getToken(SqlParser.ORDER, 0);
};

QueryNoWithContext.prototype.BY = function() {
    return this.getToken(SqlParser.BY, 0);
};

QueryNoWithContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

QueryNoWithContext.prototype.LIMIT = function() {
    return this.getToken(SqlParser.LIMIT, 0);
};

QueryNoWithContext.prototype.OFFSET = function() {
    return this.getToken(SqlParser.OFFSET, 0);
};

QueryNoWithContext.prototype.hints = function() {
    return this.getTypedRuleContext(HintsContext,0);
};

QueryNoWithContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

QueryNoWithContext.prototype.ALL = function() {
    return this.getToken(SqlParser.ALL, 0);
};

QueryNoWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQueryNoWith(this);
	}
};

QueryNoWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQueryNoWith(this);
	}
};

QueryNoWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQueryNoWith(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.QueryNoWithContext = QueryNoWithContext;

SqlParser.prototype.queryNoWith = function() {

    var localctx = new QueryNoWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SqlParser.RULE_queryNoWith);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 194;
        this.queryBody(0);
        this.state = 205;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.ORDER) {
            this.state = 195;
            this.match(SqlParser.ORDER);
            this.state = 196;
            this.match(SqlParser.BY);
            this.state = 197;
            this.sortItem();
            this.state = 202;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlParser.T__3) {
                this.state = 198;
                this.match(SqlParser.T__3);
                this.state = 199;
                this.sortItem();
                this.state = 204;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.LIMIT) {
            this.state = 207;
            this.match(SqlParser.LIMIT);
            this.state = 210;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
            switch(la_) {
            case 1:
                this.state = 208;
                localctx.limit = this.expression();
                break;

            case 2:
                this.state = 209;
                this.match(SqlParser.ALL);
                break;

            }
        }

        this.state = 216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.OFFSET) {
            this.state = 214;
            this.match(SqlParser.OFFSET);
            this.state = 215;
            localctx.offset = this.expression();
        }

        this.state = 219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.HINT) {
            this.state = 218;
            this.hints();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_hint;
    this.name = null; // IdentifierContext
    this.value = null; // HintValueContext
    return this;
}

HintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintContext.prototype.constructor = HintContext;

HintContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

HintContext.prototype.EQ = function() {
    return this.getToken(SqlParser.EQ, 0);
};

HintContext.prototype.hintValue = function() {
    return this.getTypedRuleContext(HintValueContext,0);
};

HintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterHint(this);
	}
};

HintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitHint(this);
	}
};

HintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitHint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.HintContext = HintContext;

SqlParser.prototype.hint = function() {

    var localctx = new HintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SqlParser.RULE_hint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 221;
        localctx.name = this.identifier();
        this.state = 224;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.EQ) {
            this.state = 222;
            this.match(SqlParser.EQ);
            this.state = 223;
            localctx.value = this.hintValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HintValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_hintValue;
    return this;
}

HintValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintValueContext.prototype.constructor = HintValueContext;


 
HintValueContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function HintValueBooleanContext(parser, ctx) {
	HintValueContext.call(this, parser);
    HintValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HintValueBooleanContext.prototype = Object.create(HintValueContext.prototype);
HintValueBooleanContext.prototype.constructor = HintValueBooleanContext;

SqlParser.HintValueBooleanContext = HintValueBooleanContext;

HintValueBooleanContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};
HintValueBooleanContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterHintValueBoolean(this);
	}
};

HintValueBooleanContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitHintValueBoolean(this);
	}
};

HintValueBooleanContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitHintValueBoolean(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HintValueNumberContext(parser, ctx) {
	HintValueContext.call(this, parser);
    HintValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HintValueNumberContext.prototype = Object.create(HintValueContext.prototype);
HintValueNumberContext.prototype.constructor = HintValueNumberContext;

SqlParser.HintValueNumberContext = HintValueNumberContext;

HintValueNumberContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
HintValueNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterHintValueNumber(this);
	}
};

HintValueNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitHintValueNumber(this);
	}
};

HintValueNumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitHintValueNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HintValueStringContext(parser, ctx) {
	HintValueContext.call(this, parser);
    HintValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HintValueStringContext.prototype = Object.create(HintValueContext.prototype);
HintValueStringContext.prototype.constructor = HintValueStringContext;

SqlParser.HintValueStringContext = HintValueStringContext;

HintValueStringContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};
HintValueStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterHintValueString(this);
	}
};

HintValueStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitHintValueString(this);
	}
};

HintValueStringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitHintValueString(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HintValueFieldPathContext(parser, ctx) {
	HintValueContext.call(this, parser);
    HintValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HintValueFieldPathContext.prototype = Object.create(HintValueContext.prototype);
HintValueFieldPathContext.prototype.constructor = HintValueFieldPathContext;

SqlParser.HintValueFieldPathContext = HintValueFieldPathContext;

HintValueFieldPathContext.prototype.fieldPath = function() {
    return this.getTypedRuleContext(FieldPathContext,0);
};
HintValueFieldPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterHintValueFieldPath(this);
	}
};

HintValueFieldPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitHintValueFieldPath(this);
	}
};

HintValueFieldPathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitHintValueFieldPath(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.HintValueContext = HintValueContext;

SqlParser.prototype.hintValue = function() {

    var localctx = new HintValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SqlParser.RULE_hintValue);
    try {
        this.state = 230;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.ADD:
        case SqlParser.ALL:
        case SqlParser.ANALYZE:
        case SqlParser.ANY:
        case SqlParser.ARRAY:
        case SqlParser.ASC:
        case SqlParser.AT:
        case SqlParser.BERNOULLI:
        case SqlParser.CALL:
        case SqlParser.CASCADE:
        case SqlParser.CATALOGS:
        case SqlParser.COALESCE:
        case SqlParser.COLUMN:
        case SqlParser.COLUMNS:
        case SqlParser.COMMENT:
        case SqlParser.COMMIT:
        case SqlParser.COMMITTED:
        case SqlParser.CURRENT:
        case SqlParser.DATA:
        case SqlParser.DATE:
        case SqlParser.DAY:
        case SqlParser.DESC:
        case SqlParser.DISTRIBUTED:
        case SqlParser.EXCLUDING:
        case SqlParser.EXPLAIN:
        case SqlParser.FILTER:
        case SqlParser.FIRST:
        case SqlParser.FOLLOWING:
        case SqlParser.FORMAT:
        case SqlParser.FUNCTIONS:
        case SqlParser.GRANT:
        case SqlParser.GRANTS:
        case SqlParser.GRAPHVIZ:
        case SqlParser.HOUR:
        case SqlParser.IF:
        case SqlParser.INCLUDING:
        case SqlParser.INPUT:
        case SqlParser.INTEGER:
        case SqlParser.INTERVAL:
        case SqlParser.ISOLATION:
        case SqlParser.LAST:
        case SqlParser.LATERAL:
        case SqlParser.LEVEL:
        case SqlParser.LIMIT:
        case SqlParser.LOGICAL:
        case SqlParser.MAP:
        case SqlParser.MINUTE:
        case SqlParser.MONTH:
        case SqlParser.NFC:
        case SqlParser.NFD:
        case SqlParser.NFKC:
        case SqlParser.NFKD:
        case SqlParser.NO:
        case SqlParser.NULLIF:
        case SqlParser.NULLS:
        case SqlParser.OFFSET:
        case SqlParser.ONLY:
        case SqlParser.OPTION:
        case SqlParser.ORDINALITY:
        case SqlParser.OUTPUT:
        case SqlParser.OVER:
        case SqlParser.PARTITION:
        case SqlParser.PARTITIONS:
        case SqlParser.POSITION:
        case SqlParser.PRECEDING:
        case SqlParser.PRIVILEGES:
        case SqlParser.PROPERTIES:
        case SqlParser.PUBLIC:
        case SqlParser.RANGE:
        case SqlParser.READ:
        case SqlParser.RENAME:
        case SqlParser.REPEATABLE:
        case SqlParser.REPLACE:
        case SqlParser.RESET:
        case SqlParser.RESTRICT:
        case SqlParser.REVOKE:
        case SqlParser.ROLLBACK:
        case SqlParser.ROW:
        case SqlParser.ROWS:
        case SqlParser.SCHEMA:
        case SqlParser.SCHEMAS:
        case SqlParser.SECOND:
        case SqlParser.SERIALIZABLE:
        case SqlParser.SESSION:
        case SqlParser.SET:
        case SqlParser.SETS:
        case SqlParser.SHOW:
        case SqlParser.SMALLINT:
        case SqlParser.SOME:
        case SqlParser.START:
        case SqlParser.STATS:
        case SqlParser.SUBSTRING:
        case SqlParser.SYSTEM:
        case SqlParser.TABLES:
        case SqlParser.TABLESAMPLE:
        case SqlParser.TEXT:
        case SqlParser.TIME:
        case SqlParser.TIMESTAMP:
        case SqlParser.TINYINT:
        case SqlParser.TO:
        case SqlParser.TRANSACTION:
        case SqlParser.TRY_CAST:
        case SqlParser.TYPE:
        case SqlParser.UNBOUNDED:
        case SqlParser.UNCOMMITTED:
        case SqlParser.USE:
        case SqlParser.VALIDATE:
        case SqlParser.VALUES:
        case SqlParser.VERBOSE:
        case SqlParser.VIEW:
        case SqlParser.WORK:
        case SqlParser.WRITE:
        case SqlParser.YEAR:
        case SqlParser.ZONE:
        case SqlParser.IDENTIFIER:
        case SqlParser.QUOTED_IDENTIFIER:
        case SqlParser.BACKQUOTED_IDENTIFIER:
            localctx = new HintValueFieldPathContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 226;
            this.fieldPath();
            break;
        case SqlParser.INTEGER_VALUE:
        case SqlParser.DECIMAL_VALUE:
            localctx = new HintValueNumberContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 227;
            this.number();
            break;
        case SqlParser.STRING:
        case SqlParser.UNICODE_STR:
            localctx = new HintValueStringContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 228;
            this.string();
            break;
        case SqlParser.BOOL_FALSE:
        case SqlParser.BOOL_TRUE:
            localctx = new HintValueBooleanContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 229;
            this.booleanValue();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HintListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_hintList;
    return this;
}

HintListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintListContext.prototype.constructor = HintListContext;

HintListContext.prototype.hint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HintContext);
    } else {
        return this.getTypedRuleContext(HintContext,i);
    }
};

HintListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterHintList(this);
	}
};

HintListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitHintList(this);
	}
};

HintListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitHintList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.HintListContext = HintListContext;

SqlParser.prototype.hintList = function() {

    var localctx = new HintListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SqlParser.RULE_hintList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 232;
        this.hint();
        this.state = 237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlParser.T__3) {
            this.state = 233;
            this.match(SqlParser.T__3);
            this.state = 234;
            this.hint();
            this.state = 239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HintsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_hints;
    return this;
}

HintsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintsContext.prototype.constructor = HintsContext;

HintsContext.prototype.HINT = function() {
    return this.getToken(SqlParser.HINT, 0);
};

HintsContext.prototype.hintList = function() {
    return this.getTypedRuleContext(HintListContext,0);
};

HintsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterHints(this);
	}
};

HintsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitHints(this);
	}
};

HintsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitHints(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.HintsContext = HintsContext;

SqlParser.prototype.hints = function() {

    var localctx = new HintsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SqlParser.RULE_hints);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 240;
        this.match(SqlParser.HINT);
        this.state = 241;
        this.match(SqlParser.T__1);
        this.state = 242;
        this.hintList();
        this.state = 243;
        this.match(SqlParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_queryBody;
    return this;
}

QueryBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryBodyContext.prototype.constructor = QueryBodyContext;


 
QueryBodyContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function QueryBodySetOperationContext(parser, ctx) {
	QueryBodyContext.call(this, parser);
    this.left = null; // QueryBodyContext;
    this.op = null; // Token;
    this.right = null; // QueryBodyContext;
    QueryBodyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryBodySetOperationContext.prototype = Object.create(QueryBodyContext.prototype);
QueryBodySetOperationContext.prototype.constructor = QueryBodySetOperationContext;

SqlParser.QueryBodySetOperationContext = QueryBodySetOperationContext;

QueryBodySetOperationContext.prototype.queryBody = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryBodyContext);
    } else {
        return this.getTypedRuleContext(QueryBodyContext,i);
    }
};

QueryBodySetOperationContext.prototype.UNION = function() {
    return this.getToken(SqlParser.UNION, 0);
};

QueryBodySetOperationContext.prototype.INTERSECT = function() {
    return this.getToken(SqlParser.INTERSECT, 0);
};

QueryBodySetOperationContext.prototype.EXCEPT = function() {
    return this.getToken(SqlParser.EXCEPT, 0);
};

QueryBodySetOperationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};
QueryBodySetOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQueryBodySetOperation(this);
	}
};

QueryBodySetOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQueryBodySetOperation(this);
	}
};

QueryBodySetOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQueryBodySetOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryBodyDefaultContext(parser, ctx) {
	QueryBodyContext.call(this, parser);
    QueryBodyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryBodyDefaultContext.prototype = Object.create(QueryBodyContext.prototype);
QueryBodyDefaultContext.prototype.constructor = QueryBodyDefaultContext;

SqlParser.QueryBodyDefaultContext = QueryBodyDefaultContext;

QueryBodyDefaultContext.prototype.queryTerm = function() {
    return this.getTypedRuleContext(QueryTermContext,0);
};
QueryBodyDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQueryBodyDefault(this);
	}
};

QueryBodyDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQueryBodyDefault(this);
	}
};

QueryBodyDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQueryBodyDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryBodyParenthesizedContext(parser, ctx) {
	QueryBodyContext.call(this, parser);
    QueryBodyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryBodyParenthesizedContext.prototype = Object.create(QueryBodyContext.prototype);
QueryBodyParenthesizedContext.prototype.constructor = QueryBodyParenthesizedContext;

SqlParser.QueryBodyParenthesizedContext = QueryBodyParenthesizedContext;

QueryBodyParenthesizedContext.prototype.queryBody = function() {
    return this.getTypedRuleContext(QueryBodyContext,0);
};
QueryBodyParenthesizedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQueryBodyParenthesized(this);
	}
};

QueryBodyParenthesizedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQueryBodyParenthesized(this);
	}
};

QueryBodyParenthesizedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQueryBodyParenthesized(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.prototype.queryBody = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QueryBodyContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 20;
    this.enterRecursionRule(localctx, 20, SqlParser.RULE_queryBody, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 251;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            localctx = new QueryBodyDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 246;
            this.queryTerm();
            break;

        case 2:
            localctx = new QueryBodyParenthesizedContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 247;
            this.match(SqlParser.T__1);
            this.state = 248;
            this.queryBody(0);
            this.state = 249;
            this.match(SqlParser.T__2);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 261;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new QueryBodySetOperationContext(this, new QueryBodyContext(this, _parentctx, _parentState));
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_queryBody);
                this.state = 253;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 254;
                localctx.op = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===SqlParser.EXCEPT || _la===SqlParser.INTERSECT || _la===SqlParser.UNION)) {
                    localctx.op = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 256;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlParser.ALL || _la===SqlParser.DISTINCT) {
                    this.state = 255;
                    this.setQuantifier();
                }

                this.state = 258;
                localctx.right = this.queryBody(2); 
            }
            this.state = 263;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_queryTerm;
    return this;
}

QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;


 
QueryTermContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryContext.prototype = Object.create(QueryTermContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SqlParser.SubqueryContext = SubqueryContext;

SubqueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};
SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSubquery(this);
	}
};

SubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryTermDefaultContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryTermDefaultContext.prototype = Object.create(QueryTermContext.prototype);
QueryTermDefaultContext.prototype.constructor = QueryTermDefaultContext;

SqlParser.QueryTermDefaultContext = QueryTermDefaultContext;

QueryTermDefaultContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};
QueryTermDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQueryTermDefault(this);
	}
};

QueryTermDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQueryTermDefault(this);
	}
};

QueryTermDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQueryTermDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableContext.prototype = Object.create(QueryTermContext.prototype);
TableContext.prototype.constructor = TableContext;

SqlParser.TableContext = TableContext;

TableContext.prototype.TABLE = function() {
    return this.getToken(SqlParser.TABLE, 0);
};

TableContext.prototype.tableQualifiedName = function() {
    return this.getTypedRuleContext(TableQualifiedNameContext,0);
};
TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTable(this);
	}
};

TableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InlineTableContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineTableContext.prototype = Object.create(QueryTermContext.prototype);
InlineTableContext.prototype.constructor = InlineTableContext;

SqlParser.InlineTableContext = InlineTableContext;

InlineTableContext.prototype.VALUES = function() {
    return this.getToken(SqlParser.VALUES, 0);
};

InlineTableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InlineTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterInlineTable(this);
	}
};

InlineTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitInlineTable(this);
	}
};

InlineTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitInlineTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.QueryTermContext = QueryTermContext;

SqlParser.prototype.queryTerm = function() {

    var localctx = new QueryTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SqlParser.RULE_queryTerm);
    try {
        this.state = 280;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.SELECT:
            localctx = new QueryTermDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 264;
            this.querySpecification();
            break;
        case SqlParser.TABLE:
            localctx = new TableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 265;
            this.match(SqlParser.TABLE);
            this.state = 266;
            this.tableQualifiedName();
            break;
        case SqlParser.VALUES:
            localctx = new InlineTableContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 267;
            this.match(SqlParser.VALUES);
            this.state = 268;
            this.expression();
            this.state = 273;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 269;
                    this.match(SqlParser.T__3);
                    this.state = 270;
                    this.expression(); 
                }
                this.state = 275;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
            }

            break;
        case SqlParser.T__1:
            localctx = new SubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 276;
            this.match(SqlParser.T__1);
            this.state = 277;
            this.queryNoWith();
            this.state = 278;
            this.match(SqlParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_sortItem;
    this.ordering = null; // Token
    this.nullOrdering = null; // Token
    return this;
}

SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;

SortItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SortItemContext.prototype.NULLS = function() {
    return this.getToken(SqlParser.NULLS, 0);
};

SortItemContext.prototype.ASC = function() {
    return this.getToken(SqlParser.ASC, 0);
};

SortItemContext.prototype.DESC = function() {
    return this.getToken(SqlParser.DESC, 0);
};

SortItemContext.prototype.FIRST = function() {
    return this.getToken(SqlParser.FIRST, 0);
};

SortItemContext.prototype.LAST = function() {
    return this.getToken(SqlParser.LAST, 0);
};

SortItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSortItem(this);
	}
};

SortItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSortItem(this);
	}
};

SortItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSortItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.SortItemContext = SortItemContext;

SqlParser.prototype.sortItem = function() {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SqlParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 282;
        this.expression();
        this.state = 284;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.ASC || _la===SqlParser.DESC) {
            this.state = 283;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlParser.ASC || _la===SqlParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.NULLS) {
            this.state = 286;
            this.match(SqlParser.NULLS);
            this.state = 287;
            localctx.nullOrdering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlParser.FIRST || _la===SqlParser.LAST)) {
                localctx.nullOrdering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_querySpecification;
    this.where = null; // BooleanExpressionContext
    this.having = null; // BooleanExpressionContext
    return this;
}

QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;

QuerySpecificationContext.prototype.SELECT = function() {
    return this.getToken(SqlParser.SELECT, 0);
};

QuerySpecificationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

QuerySpecificationContext.prototype.selectItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemContext);
    } else {
        return this.getTypedRuleContext(SelectItemContext,i);
    }
};

QuerySpecificationContext.prototype.FROM = function() {
    return this.getToken(SqlParser.FROM, 0);
};

QuerySpecificationContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

QuerySpecificationContext.prototype.WHERE = function() {
    return this.getToken(SqlParser.WHERE, 0);
};

QuerySpecificationContext.prototype.GROUP = function() {
    return this.getToken(SqlParser.GROUP, 0);
};

QuerySpecificationContext.prototype.BY = function() {
    return this.getToken(SqlParser.BY, 0);
};

QuerySpecificationContext.prototype.groupBy = function() {
    return this.getTypedRuleContext(GroupByContext,0);
};

QuerySpecificationContext.prototype.HAVING = function() {
    return this.getToken(SqlParser.HAVING, 0);
};

QuerySpecificationContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

QuerySpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQuerySpecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.QuerySpecificationContext = QuerySpecificationContext;

SqlParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SqlParser.RULE_querySpecification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 290;
        this.match(SqlParser.SELECT);
        this.state = 292;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 291;
            this.setQuantifier();

        }
        this.state = 305;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 294;
            this.selectItem();
            this.state = 299;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 295;
                    this.match(SqlParser.T__3);
                    this.state = 296;
                    this.selectItem(); 
                }
                this.state = 301;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
            }

            this.state = 303;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
            if(la_===1) {
                this.state = 302;
                this.match(SqlParser.T__3);

            }

        }
        this.state = 316;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 307;
            this.match(SqlParser.FROM);
            this.state = 308;
            this.relation(0);
            this.state = 313;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 309;
                    this.match(SqlParser.T__3);
                    this.state = 310;
                    this.relation(0); 
                }
                this.state = 315;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
            }


        }
        this.state = 320;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 318;
            this.match(SqlParser.WHERE);
            this.state = 319;
            localctx.where = this.booleanExpression(0);

        }
        this.state = 325;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        if(la_===1) {
            this.state = 322;
            this.match(SqlParser.GROUP);
            this.state = 323;
            this.match(SqlParser.BY);
            this.state = 324;
            this.groupBy();

        }
        this.state = 329;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 327;
            this.match(SqlParser.HAVING);
            this.state = 328;
            localctx.having = this.booleanExpression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_groupBy;
    return this;
}

GroupByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByContext.prototype.constructor = GroupByContext;

GroupByContext.prototype.groupingElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingElementContext);
    } else {
        return this.getTypedRuleContext(GroupingElementContext,i);
    }
};

GroupByContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

GroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterGroupBy(this);
	}
};

GroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitGroupBy(this);
	}
};

GroupByContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitGroupBy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.GroupByContext = GroupByContext;

SqlParser.prototype.groupBy = function() {

    var localctx = new GroupByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SqlParser.RULE_groupBy);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 331;
            this.setQuantifier();

        }
        this.state = 334;
        this.groupingElement();
        this.state = 339;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 335;
                this.match(SqlParser.T__3);
                this.state = 336;
                this.groupingElement(); 
            }
            this.state = 341;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_groupingElement;
    return this;
}

GroupingElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingElementContext.prototype.constructor = GroupingElementContext;


 
GroupingElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MultipleGroupingSetsContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultipleGroupingSetsContext.prototype = Object.create(GroupingElementContext.prototype);
MultipleGroupingSetsContext.prototype.constructor = MultipleGroupingSetsContext;

SqlParser.MultipleGroupingSetsContext = MultipleGroupingSetsContext;

MultipleGroupingSetsContext.prototype.GROUPING = function() {
    return this.getToken(SqlParser.GROUPING, 0);
};

MultipleGroupingSetsContext.prototype.SETS = function() {
    return this.getToken(SqlParser.SETS, 0);
};

MultipleGroupingSetsContext.prototype.groupingExpressions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingExpressionsContext);
    } else {
        return this.getTypedRuleContext(GroupingExpressionsContext,i);
    }
};
MultipleGroupingSetsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterMultipleGroupingSets(this);
	}
};

MultipleGroupingSetsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitMultipleGroupingSets(this);
	}
};

MultipleGroupingSetsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitMultipleGroupingSets(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SingleGroupingSetContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingleGroupingSetContext.prototype = Object.create(GroupingElementContext.prototype);
SingleGroupingSetContext.prototype.constructor = SingleGroupingSetContext;

SqlParser.SingleGroupingSetContext = SingleGroupingSetContext;

SingleGroupingSetContext.prototype.groupingExpressions = function() {
    return this.getTypedRuleContext(GroupingExpressionsContext,0);
};
SingleGroupingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSingleGroupingSet(this);
	}
};

SingleGroupingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSingleGroupingSet(this);
	}
};

SingleGroupingSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSingleGroupingSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CubeContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CubeContext.prototype = Object.create(GroupingElementContext.prototype);
CubeContext.prototype.constructor = CubeContext;

SqlParser.CubeContext = CubeContext;

CubeContext.prototype.CUBE = function() {
    return this.getToken(SqlParser.CUBE, 0);
};

CubeContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
CubeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterCube(this);
	}
};

CubeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitCube(this);
	}
};

CubeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitCube(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RollupContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RollupContext.prototype = Object.create(GroupingElementContext.prototype);
RollupContext.prototype.constructor = RollupContext;

SqlParser.RollupContext = RollupContext;

RollupContext.prototype.ROLLUP = function() {
    return this.getToken(SqlParser.ROLLUP, 0);
};

RollupContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RollupContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterRollup(this);
	}
};

RollupContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitRollup(this);
	}
};

RollupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitRollup(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.GroupingElementContext = GroupingElementContext;

SqlParser.prototype.groupingElement = function() {

    var localctx = new GroupingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SqlParser.RULE_groupingElement);
    var _la = 0; // Token type
    try {
        this.state = 382;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SingleGroupingSetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 342;
            this.groupingExpressions();
            break;

        case 2:
            localctx = new RollupContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 343;
            this.match(SqlParser.ROLLUP);
            this.state = 344;
            this.match(SqlParser.T__1);
            this.state = 353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.T__7) | (1 << SqlParser.T__8) | (1 << SqlParser.T__10) | (1 << SqlParser.ADD) | (1 << SqlParser.ALL) | (1 << SqlParser.ANALYZE) | (1 << SqlParser.ANY) | (1 << SqlParser.ARRAY) | (1 << SqlParser.ASC) | (1 << SqlParser.AT) | (1 << SqlParser.BERNOULLI) | (1 << SqlParser.CALL) | (1 << SqlParser.CASCADE) | (1 << SqlParser.CASE) | (1 << SqlParser.CAST) | (1 << SqlParser.CATALOGS) | (1 << SqlParser.COALESCE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlParser.COLUMN - 32)) | (1 << (SqlParser.COLUMNS - 32)) | (1 << (SqlParser.COMMENT - 32)) | (1 << (SqlParser.COMMIT - 32)) | (1 << (SqlParser.COMMITTED - 32)) | (1 << (SqlParser.CURRENT - 32)) | (1 << (SqlParser.CURRENT_DATE - 32)) | (1 << (SqlParser.CURRENT_DATETIME - 32)) | (1 << (SqlParser.CURRENT_TIME - 32)) | (1 << (SqlParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlParser.DATA - 32)) | (1 << (SqlParser.DATE - 32)) | (1 << (SqlParser.DAY - 32)) | (1 << (SqlParser.DESC - 32)) | (1 << (SqlParser.DISTRIBUTED - 32)) | (1 << (SqlParser.EXCLUDING - 32)) | (1 << (SqlParser.EXISTS - 32)) | (1 << (SqlParser.EXPLAIN - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlParser.EXTRACT - 64)) | (1 << (SqlParser.BOOL_FALSE - 64)) | (1 << (SqlParser.FILTER - 64)) | (1 << (SqlParser.FIRST - 64)) | (1 << (SqlParser.FOLLOWING - 64)) | (1 << (SqlParser.FORMAT - 64)) | (1 << (SqlParser.FUNCTIONS - 64)) | (1 << (SqlParser.GRANT - 64)) | (1 << (SqlParser.GRANTS - 64)) | (1 << (SqlParser.GRAPHVIZ - 64)) | (1 << (SqlParser.GROUPING - 64)) | (1 << (SqlParser.HOUR - 64)) | (1 << (SqlParser.IF - 64)) | (1 << (SqlParser.INCLUDING - 64)) | (1 << (SqlParser.INPUT - 64)) | (1 << (SqlParser.INTEGER - 64)) | (1 << (SqlParser.INTERVAL - 64)) | (1 << (SqlParser.ISOLATION - 64)) | (1 << (SqlParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlParser.LATERAL - 96)) | (1 << (SqlParser.LEVEL - 96)) | (1 << (SqlParser.LIMIT - 96)) | (1 << (SqlParser.LOGICAL - 96)) | (1 << (SqlParser.MAP - 96)) | (1 << (SqlParser.MINUTE - 96)) | (1 << (SqlParser.MONTH - 96)) | (1 << (SqlParser.NFC - 96)) | (1 << (SqlParser.NFD - 96)) | (1 << (SqlParser.NFKC - 96)) | (1 << (SqlParser.NFKD - 96)) | (1 << (SqlParser.NO - 96)) | (1 << (SqlParser.NORMALIZE - 96)) | (1 << (SqlParser.NOT - 96)) | (1 << (SqlParser.XNULL - 96)) | (1 << (SqlParser.NULLIF - 96)) | (1 << (SqlParser.NULLS - 96)) | (1 << (SqlParser.NULL_VALUE - 96)) | (1 << (SqlParser.OFFSET - 96)) | (1 << (SqlParser.ONLY - 96)) | (1 << (SqlParser.OPTION - 96)) | (1 << (SqlParser.ORDINALITY - 96)) | (1 << (SqlParser.OUTPUT - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlParser.OVER - 128)) | (1 << (SqlParser.PARTITION - 128)) | (1 << (SqlParser.PARTITIONS - 128)) | (1 << (SqlParser.POSITION - 128)) | (1 << (SqlParser.PRECEDING - 128)) | (1 << (SqlParser.PRIVILEGES - 128)) | (1 << (SqlParser.PROPERTIES - 128)) | (1 << (SqlParser.PUBLIC - 128)) | (1 << (SqlParser.RANGE - 128)) | (1 << (SqlParser.READ - 128)) | (1 << (SqlParser.RENAME - 128)) | (1 << (SqlParser.REPEATABLE - 128)) | (1 << (SqlParser.REPLACE - 128)) | (1 << (SqlParser.RESET - 128)) | (1 << (SqlParser.RESTRICT - 128)) | (1 << (SqlParser.REVOKE - 128)) | (1 << (SqlParser.ROLLBACK - 128)) | (1 << (SqlParser.ROW - 128)) | (1 << (SqlParser.ROWS - 128)) | (1 << (SqlParser.SCHEMA - 128)) | (1 << (SqlParser.SCHEMAS - 128)) | (1 << (SqlParser.SECOND - 128)) | (1 << (SqlParser.SERIALIZABLE - 128)) | (1 << (SqlParser.SESSION - 128)) | (1 << (SqlParser.SET - 128)) | (1 << (SqlParser.SETS - 128)) | (1 << (SqlParser.SHOW - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlParser.SMALLINT - 160)) | (1 << (SqlParser.SOME - 160)) | (1 << (SqlParser.START - 160)) | (1 << (SqlParser.STATIC_CAST - 160)) | (1 << (SqlParser.STATS - 160)) | (1 << (SqlParser.SUBSTRING - 160)) | (1 << (SqlParser.SYSTEM - 160)) | (1 << (SqlParser.TABLES - 160)) | (1 << (SqlParser.TABLESAMPLE - 160)) | (1 << (SqlParser.TEXT - 160)) | (1 << (SqlParser.TIME - 160)) | (1 << (SqlParser.TIMESTAMP - 160)) | (1 << (SqlParser.TINYINT - 160)) | (1 << (SqlParser.TO - 160)) | (1 << (SqlParser.TRANSACTION - 160)) | (1 << (SqlParser.BOOL_TRUE - 160)) | (1 << (SqlParser.TRY_CAST - 160)) | (1 << (SqlParser.TRY_STATIC_CAST - 160)) | (1 << (SqlParser.TYPE - 160)) | (1 << (SqlParser.UNBOUNDED - 160)) | (1 << (SqlParser.UNCOMMITTED - 160)) | (1 << (SqlParser.UNDEFINED - 160)) | (1 << (SqlParser.USE - 160)) | (1 << (SqlParser.VALIDATE - 160)) | (1 << (SqlParser.VALUES - 160)) | (1 << (SqlParser.VERBOSE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlParser.VIEW - 192)) | (1 << (SqlParser.WORK - 192)) | (1 << (SqlParser.WRITE - 192)) | (1 << (SqlParser.YEAR - 192)) | (1 << (SqlParser.ZONE - 192)) | (1 << (SqlParser.PLUS - 192)) | (1 << (SqlParser.MINUS - 192)) | (1 << (SqlParser.STRING - 192)) | (1 << (SqlParser.UNICODE_STR - 192)) | (1 << (SqlParser.BINARY_LITERAL - 192)) | (1 << (SqlParser.INTEGER_VALUE - 192)) | (1 << (SqlParser.DECIMAL_VALUE - 192)) | (1 << (SqlParser.IDENTIFIER - 192)) | (1 << (SqlParser.QUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.DOUBLE_PRECISION - 192)))) !== 0)) {
                this.state = 345;
                this.expression();
                this.state = 350;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlParser.T__3) {
                    this.state = 346;
                    this.match(SqlParser.T__3);
                    this.state = 347;
                    this.expression();
                    this.state = 352;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 355;
            this.match(SqlParser.T__2);
            break;

        case 3:
            localctx = new CubeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 356;
            this.match(SqlParser.CUBE);
            this.state = 357;
            this.match(SqlParser.T__1);
            this.state = 366;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.T__7) | (1 << SqlParser.T__8) | (1 << SqlParser.T__10) | (1 << SqlParser.ADD) | (1 << SqlParser.ALL) | (1 << SqlParser.ANALYZE) | (1 << SqlParser.ANY) | (1 << SqlParser.ARRAY) | (1 << SqlParser.ASC) | (1 << SqlParser.AT) | (1 << SqlParser.BERNOULLI) | (1 << SqlParser.CALL) | (1 << SqlParser.CASCADE) | (1 << SqlParser.CASE) | (1 << SqlParser.CAST) | (1 << SqlParser.CATALOGS) | (1 << SqlParser.COALESCE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlParser.COLUMN - 32)) | (1 << (SqlParser.COLUMNS - 32)) | (1 << (SqlParser.COMMENT - 32)) | (1 << (SqlParser.COMMIT - 32)) | (1 << (SqlParser.COMMITTED - 32)) | (1 << (SqlParser.CURRENT - 32)) | (1 << (SqlParser.CURRENT_DATE - 32)) | (1 << (SqlParser.CURRENT_DATETIME - 32)) | (1 << (SqlParser.CURRENT_TIME - 32)) | (1 << (SqlParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlParser.DATA - 32)) | (1 << (SqlParser.DATE - 32)) | (1 << (SqlParser.DAY - 32)) | (1 << (SqlParser.DESC - 32)) | (1 << (SqlParser.DISTRIBUTED - 32)) | (1 << (SqlParser.EXCLUDING - 32)) | (1 << (SqlParser.EXISTS - 32)) | (1 << (SqlParser.EXPLAIN - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlParser.EXTRACT - 64)) | (1 << (SqlParser.BOOL_FALSE - 64)) | (1 << (SqlParser.FILTER - 64)) | (1 << (SqlParser.FIRST - 64)) | (1 << (SqlParser.FOLLOWING - 64)) | (1 << (SqlParser.FORMAT - 64)) | (1 << (SqlParser.FUNCTIONS - 64)) | (1 << (SqlParser.GRANT - 64)) | (1 << (SqlParser.GRANTS - 64)) | (1 << (SqlParser.GRAPHVIZ - 64)) | (1 << (SqlParser.GROUPING - 64)) | (1 << (SqlParser.HOUR - 64)) | (1 << (SqlParser.IF - 64)) | (1 << (SqlParser.INCLUDING - 64)) | (1 << (SqlParser.INPUT - 64)) | (1 << (SqlParser.INTEGER - 64)) | (1 << (SqlParser.INTERVAL - 64)) | (1 << (SqlParser.ISOLATION - 64)) | (1 << (SqlParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlParser.LATERAL - 96)) | (1 << (SqlParser.LEVEL - 96)) | (1 << (SqlParser.LIMIT - 96)) | (1 << (SqlParser.LOGICAL - 96)) | (1 << (SqlParser.MAP - 96)) | (1 << (SqlParser.MINUTE - 96)) | (1 << (SqlParser.MONTH - 96)) | (1 << (SqlParser.NFC - 96)) | (1 << (SqlParser.NFD - 96)) | (1 << (SqlParser.NFKC - 96)) | (1 << (SqlParser.NFKD - 96)) | (1 << (SqlParser.NO - 96)) | (1 << (SqlParser.NORMALIZE - 96)) | (1 << (SqlParser.NOT - 96)) | (1 << (SqlParser.XNULL - 96)) | (1 << (SqlParser.NULLIF - 96)) | (1 << (SqlParser.NULLS - 96)) | (1 << (SqlParser.NULL_VALUE - 96)) | (1 << (SqlParser.OFFSET - 96)) | (1 << (SqlParser.ONLY - 96)) | (1 << (SqlParser.OPTION - 96)) | (1 << (SqlParser.ORDINALITY - 96)) | (1 << (SqlParser.OUTPUT - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlParser.OVER - 128)) | (1 << (SqlParser.PARTITION - 128)) | (1 << (SqlParser.PARTITIONS - 128)) | (1 << (SqlParser.POSITION - 128)) | (1 << (SqlParser.PRECEDING - 128)) | (1 << (SqlParser.PRIVILEGES - 128)) | (1 << (SqlParser.PROPERTIES - 128)) | (1 << (SqlParser.PUBLIC - 128)) | (1 << (SqlParser.RANGE - 128)) | (1 << (SqlParser.READ - 128)) | (1 << (SqlParser.RENAME - 128)) | (1 << (SqlParser.REPEATABLE - 128)) | (1 << (SqlParser.REPLACE - 128)) | (1 << (SqlParser.RESET - 128)) | (1 << (SqlParser.RESTRICT - 128)) | (1 << (SqlParser.REVOKE - 128)) | (1 << (SqlParser.ROLLBACK - 128)) | (1 << (SqlParser.ROW - 128)) | (1 << (SqlParser.ROWS - 128)) | (1 << (SqlParser.SCHEMA - 128)) | (1 << (SqlParser.SCHEMAS - 128)) | (1 << (SqlParser.SECOND - 128)) | (1 << (SqlParser.SERIALIZABLE - 128)) | (1 << (SqlParser.SESSION - 128)) | (1 << (SqlParser.SET - 128)) | (1 << (SqlParser.SETS - 128)) | (1 << (SqlParser.SHOW - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlParser.SMALLINT - 160)) | (1 << (SqlParser.SOME - 160)) | (1 << (SqlParser.START - 160)) | (1 << (SqlParser.STATIC_CAST - 160)) | (1 << (SqlParser.STATS - 160)) | (1 << (SqlParser.SUBSTRING - 160)) | (1 << (SqlParser.SYSTEM - 160)) | (1 << (SqlParser.TABLES - 160)) | (1 << (SqlParser.TABLESAMPLE - 160)) | (1 << (SqlParser.TEXT - 160)) | (1 << (SqlParser.TIME - 160)) | (1 << (SqlParser.TIMESTAMP - 160)) | (1 << (SqlParser.TINYINT - 160)) | (1 << (SqlParser.TO - 160)) | (1 << (SqlParser.TRANSACTION - 160)) | (1 << (SqlParser.BOOL_TRUE - 160)) | (1 << (SqlParser.TRY_CAST - 160)) | (1 << (SqlParser.TRY_STATIC_CAST - 160)) | (1 << (SqlParser.TYPE - 160)) | (1 << (SqlParser.UNBOUNDED - 160)) | (1 << (SqlParser.UNCOMMITTED - 160)) | (1 << (SqlParser.UNDEFINED - 160)) | (1 << (SqlParser.USE - 160)) | (1 << (SqlParser.VALIDATE - 160)) | (1 << (SqlParser.VALUES - 160)) | (1 << (SqlParser.VERBOSE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlParser.VIEW - 192)) | (1 << (SqlParser.WORK - 192)) | (1 << (SqlParser.WRITE - 192)) | (1 << (SqlParser.YEAR - 192)) | (1 << (SqlParser.ZONE - 192)) | (1 << (SqlParser.PLUS - 192)) | (1 << (SqlParser.MINUS - 192)) | (1 << (SqlParser.STRING - 192)) | (1 << (SqlParser.UNICODE_STR - 192)) | (1 << (SqlParser.BINARY_LITERAL - 192)) | (1 << (SqlParser.INTEGER_VALUE - 192)) | (1 << (SqlParser.DECIMAL_VALUE - 192)) | (1 << (SqlParser.IDENTIFIER - 192)) | (1 << (SqlParser.QUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.DOUBLE_PRECISION - 192)))) !== 0)) {
                this.state = 358;
                this.expression();
                this.state = 363;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlParser.T__3) {
                    this.state = 359;
                    this.match(SqlParser.T__3);
                    this.state = 360;
                    this.expression();
                    this.state = 365;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 368;
            this.match(SqlParser.T__2);
            break;

        case 4:
            localctx = new MultipleGroupingSetsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 369;
            this.match(SqlParser.GROUPING);
            this.state = 370;
            this.match(SqlParser.SETS);
            this.state = 371;
            this.match(SqlParser.T__1);
            this.state = 372;
            this.groupingExpressions();
            this.state = 377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlParser.T__3) {
                this.state = 373;
                this.match(SqlParser.T__3);
                this.state = 374;
                this.groupingExpressions();
                this.state = 379;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 380;
            this.match(SqlParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupingExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_groupingExpressions;
    return this;
}

GroupingExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingExpressionsContext.prototype.constructor = GroupingExpressionsContext;

GroupingExpressionsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GroupingExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterGroupingExpressions(this);
	}
};

GroupingExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitGroupingExpressions(this);
	}
};

GroupingExpressionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitGroupingExpressions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.GroupingExpressionsContext = GroupingExpressionsContext;

SqlParser.prototype.groupingExpressions = function() {

    var localctx = new GroupingExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SqlParser.RULE_groupingExpressions);
    var _la = 0; // Token type
    try {
        this.state = 397;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 384;
            this.match(SqlParser.T__1);
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.T__7) | (1 << SqlParser.T__8) | (1 << SqlParser.T__10) | (1 << SqlParser.ADD) | (1 << SqlParser.ALL) | (1 << SqlParser.ANALYZE) | (1 << SqlParser.ANY) | (1 << SqlParser.ARRAY) | (1 << SqlParser.ASC) | (1 << SqlParser.AT) | (1 << SqlParser.BERNOULLI) | (1 << SqlParser.CALL) | (1 << SqlParser.CASCADE) | (1 << SqlParser.CASE) | (1 << SqlParser.CAST) | (1 << SqlParser.CATALOGS) | (1 << SqlParser.COALESCE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlParser.COLUMN - 32)) | (1 << (SqlParser.COLUMNS - 32)) | (1 << (SqlParser.COMMENT - 32)) | (1 << (SqlParser.COMMIT - 32)) | (1 << (SqlParser.COMMITTED - 32)) | (1 << (SqlParser.CURRENT - 32)) | (1 << (SqlParser.CURRENT_DATE - 32)) | (1 << (SqlParser.CURRENT_DATETIME - 32)) | (1 << (SqlParser.CURRENT_TIME - 32)) | (1 << (SqlParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlParser.DATA - 32)) | (1 << (SqlParser.DATE - 32)) | (1 << (SqlParser.DAY - 32)) | (1 << (SqlParser.DESC - 32)) | (1 << (SqlParser.DISTRIBUTED - 32)) | (1 << (SqlParser.EXCLUDING - 32)) | (1 << (SqlParser.EXISTS - 32)) | (1 << (SqlParser.EXPLAIN - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlParser.EXTRACT - 64)) | (1 << (SqlParser.BOOL_FALSE - 64)) | (1 << (SqlParser.FILTER - 64)) | (1 << (SqlParser.FIRST - 64)) | (1 << (SqlParser.FOLLOWING - 64)) | (1 << (SqlParser.FORMAT - 64)) | (1 << (SqlParser.FUNCTIONS - 64)) | (1 << (SqlParser.GRANT - 64)) | (1 << (SqlParser.GRANTS - 64)) | (1 << (SqlParser.GRAPHVIZ - 64)) | (1 << (SqlParser.GROUPING - 64)) | (1 << (SqlParser.HOUR - 64)) | (1 << (SqlParser.IF - 64)) | (1 << (SqlParser.INCLUDING - 64)) | (1 << (SqlParser.INPUT - 64)) | (1 << (SqlParser.INTEGER - 64)) | (1 << (SqlParser.INTERVAL - 64)) | (1 << (SqlParser.ISOLATION - 64)) | (1 << (SqlParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlParser.LATERAL - 96)) | (1 << (SqlParser.LEVEL - 96)) | (1 << (SqlParser.LIMIT - 96)) | (1 << (SqlParser.LOGICAL - 96)) | (1 << (SqlParser.MAP - 96)) | (1 << (SqlParser.MINUTE - 96)) | (1 << (SqlParser.MONTH - 96)) | (1 << (SqlParser.NFC - 96)) | (1 << (SqlParser.NFD - 96)) | (1 << (SqlParser.NFKC - 96)) | (1 << (SqlParser.NFKD - 96)) | (1 << (SqlParser.NO - 96)) | (1 << (SqlParser.NORMALIZE - 96)) | (1 << (SqlParser.NOT - 96)) | (1 << (SqlParser.XNULL - 96)) | (1 << (SqlParser.NULLIF - 96)) | (1 << (SqlParser.NULLS - 96)) | (1 << (SqlParser.NULL_VALUE - 96)) | (1 << (SqlParser.OFFSET - 96)) | (1 << (SqlParser.ONLY - 96)) | (1 << (SqlParser.OPTION - 96)) | (1 << (SqlParser.ORDINALITY - 96)) | (1 << (SqlParser.OUTPUT - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlParser.OVER - 128)) | (1 << (SqlParser.PARTITION - 128)) | (1 << (SqlParser.PARTITIONS - 128)) | (1 << (SqlParser.POSITION - 128)) | (1 << (SqlParser.PRECEDING - 128)) | (1 << (SqlParser.PRIVILEGES - 128)) | (1 << (SqlParser.PROPERTIES - 128)) | (1 << (SqlParser.PUBLIC - 128)) | (1 << (SqlParser.RANGE - 128)) | (1 << (SqlParser.READ - 128)) | (1 << (SqlParser.RENAME - 128)) | (1 << (SqlParser.REPEATABLE - 128)) | (1 << (SqlParser.REPLACE - 128)) | (1 << (SqlParser.RESET - 128)) | (1 << (SqlParser.RESTRICT - 128)) | (1 << (SqlParser.REVOKE - 128)) | (1 << (SqlParser.ROLLBACK - 128)) | (1 << (SqlParser.ROW - 128)) | (1 << (SqlParser.ROWS - 128)) | (1 << (SqlParser.SCHEMA - 128)) | (1 << (SqlParser.SCHEMAS - 128)) | (1 << (SqlParser.SECOND - 128)) | (1 << (SqlParser.SERIALIZABLE - 128)) | (1 << (SqlParser.SESSION - 128)) | (1 << (SqlParser.SET - 128)) | (1 << (SqlParser.SETS - 128)) | (1 << (SqlParser.SHOW - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlParser.SMALLINT - 160)) | (1 << (SqlParser.SOME - 160)) | (1 << (SqlParser.START - 160)) | (1 << (SqlParser.STATIC_CAST - 160)) | (1 << (SqlParser.STATS - 160)) | (1 << (SqlParser.SUBSTRING - 160)) | (1 << (SqlParser.SYSTEM - 160)) | (1 << (SqlParser.TABLES - 160)) | (1 << (SqlParser.TABLESAMPLE - 160)) | (1 << (SqlParser.TEXT - 160)) | (1 << (SqlParser.TIME - 160)) | (1 << (SqlParser.TIMESTAMP - 160)) | (1 << (SqlParser.TINYINT - 160)) | (1 << (SqlParser.TO - 160)) | (1 << (SqlParser.TRANSACTION - 160)) | (1 << (SqlParser.BOOL_TRUE - 160)) | (1 << (SqlParser.TRY_CAST - 160)) | (1 << (SqlParser.TRY_STATIC_CAST - 160)) | (1 << (SqlParser.TYPE - 160)) | (1 << (SqlParser.UNBOUNDED - 160)) | (1 << (SqlParser.UNCOMMITTED - 160)) | (1 << (SqlParser.UNDEFINED - 160)) | (1 << (SqlParser.USE - 160)) | (1 << (SqlParser.VALIDATE - 160)) | (1 << (SqlParser.VALUES - 160)) | (1 << (SqlParser.VERBOSE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlParser.VIEW - 192)) | (1 << (SqlParser.WORK - 192)) | (1 << (SqlParser.WRITE - 192)) | (1 << (SqlParser.YEAR - 192)) | (1 << (SqlParser.ZONE - 192)) | (1 << (SqlParser.PLUS - 192)) | (1 << (SqlParser.MINUS - 192)) | (1 << (SqlParser.STRING - 192)) | (1 << (SqlParser.UNICODE_STR - 192)) | (1 << (SqlParser.BINARY_LITERAL - 192)) | (1 << (SqlParser.INTEGER_VALUE - 192)) | (1 << (SqlParser.DECIMAL_VALUE - 192)) | (1 << (SqlParser.IDENTIFIER - 192)) | (1 << (SqlParser.QUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.DOUBLE_PRECISION - 192)))) !== 0)) {
                this.state = 385;
                this.expression();
                this.state = 390;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlParser.T__3) {
                    this.state = 386;
                    this.match(SqlParser.T__3);
                    this.state = 387;
                    this.expression();
                    this.state = 392;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 395;
            this.match(SqlParser.T__2);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 396;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_namedQuery;
    this.name = null; // IdentifierContext
    return this;
}

NamedQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedQueryContext.prototype.constructor = NamedQueryContext;

NamedQueryContext.prototype.AS = function() {
    return this.getToken(SqlParser.AS, 0);
};

NamedQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

NamedQueryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedQueryContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

NamedQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNamedQuery(this);
	}
};

NamedQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNamedQuery(this);
	}
};

NamedQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNamedQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.NamedQueryContext = NamedQueryContext;

SqlParser.prototype.namedQuery = function() {

    var localctx = new NamedQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SqlParser.RULE_namedQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        localctx.name = this.identifier();
        this.state = 401;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.T__1) {
            this.state = 400;
            this.columnAliases();
        }

        this.state = 403;
        this.match(SqlParser.AS);
        this.state = 404;
        this.match(SqlParser.T__1);
        this.state = 405;
        this.query();
        this.state = 406;
        this.match(SqlParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_setQuantifier;
    return this;
}

SetQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetQuantifierContext.prototype.constructor = SetQuantifierContext;

SetQuantifierContext.prototype.DISTINCT = function() {
    return this.getToken(SqlParser.DISTINCT, 0);
};

SetQuantifierContext.prototype.ALL = function() {
    return this.getToken(SqlParser.ALL, 0);
};

SetQuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSetQuantifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.SetQuantifierContext = SetQuantifierContext;

SqlParser.prototype.setQuantifier = function() {

    var localctx = new SetQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SqlParser.RULE_setQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 408;
        _la = this._input.LA(1);
        if(!(_la===SqlParser.ALL || _la===SqlParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_selectItem;
    return this;
}

SelectItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemContext.prototype.constructor = SelectItemContext;


 
SelectItemContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SelectAllContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectAllContext.prototype = Object.create(SelectItemContext.prototype);
SelectAllContext.prototype.constructor = SelectAllContext;

SqlParser.SelectAllContext = SelectAllContext;

SelectAllContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectAllContext.prototype.ASTERISK = function() {
    return this.getToken(SqlParser.ASTERISK, 0);
};
SelectAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSelectAll(this);
	}
};

SelectAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSelectAll(this);
	}
};

SelectAllContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSelectAll(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SelectSingleContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectSingleContext.prototype = Object.create(SelectItemContext.prototype);
SelectSingleContext.prototype.constructor = SelectSingleContext;

SqlParser.SelectSingleContext = SelectSingleContext;

SelectSingleContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectSingleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectSingleContext.prototype.AS = function() {
    return this.getToken(SqlParser.AS, 0);
};
SelectSingleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSelectSingle(this);
	}
};

SelectSingleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSelectSingle(this);
	}
};

SelectSingleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSelectSingle(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.SelectItemContext = SelectItemContext;

SqlParser.prototype.selectItem = function() {

    var localctx = new SelectItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SqlParser.RULE_selectItem);
    var _la = 0; // Token type
    try {
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SelectSingleContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 410;
            this.expression();
            this.state = 415;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
            if(la_===1) {
                this.state = 412;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlParser.AS) {
                    this.state = 411;
                    this.match(SqlParser.AS);
                }

                this.state = 414;
                this.identifier();

            }
            break;

        case 2:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 417;
            this.identifier();
            this.state = 418;
            this.match(SqlParser.T__4);
            this.state = 419;
            this.match(SqlParser.ASTERISK);
            break;

        case 3:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 421;
            this.match(SqlParser.ASTERISK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;


 
RelationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function RelationDefaultContext(parser, ctx) {
	RelationContext.call(this, parser);
    RelationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationDefaultContext.prototype = Object.create(RelationContext.prototype);
RelationDefaultContext.prototype.constructor = RelationDefaultContext;

SqlParser.RelationDefaultContext = RelationDefaultContext;

RelationDefaultContext.prototype.sampledRelation = function() {
    return this.getTypedRuleContext(SampledRelationContext,0);
};

RelationDefaultContext.prototype.hints = function() {
    return this.getTypedRuleContext(HintsContext,0);
};
RelationDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterRelationDefault(this);
	}
};

RelationDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitRelationDefault(this);
	}
};

RelationDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitRelationDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function JoinRelationContext(parser, ctx) {
	RelationContext.call(this, parser);
    this.left = null; // RelationContext;
    this.rightCross = null; // SampledRelationContext;
    this.rightOther = null; // RelationContext;
    this.rightNatural = null; // SampledRelationContext;
    RelationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinRelationContext.prototype = Object.create(RelationContext.prototype);
JoinRelationContext.prototype.constructor = JoinRelationContext;

SqlParser.JoinRelationContext = JoinRelationContext;

JoinRelationContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

JoinRelationContext.prototype.CROSS = function() {
    return this.getToken(SqlParser.CROSS, 0);
};

JoinRelationContext.prototype.JOIN = function() {
    return this.getToken(SqlParser.JOIN, 0);
};

JoinRelationContext.prototype.joinType = function() {
    return this.getTypedRuleContext(JoinTypeContext,0);
};

JoinRelationContext.prototype.joinCriteria = function() {
    return this.getTypedRuleContext(JoinCriteriaContext,0);
};

JoinRelationContext.prototype.NATURAL = function() {
    return this.getToken(SqlParser.NATURAL, 0);
};

JoinRelationContext.prototype.sampledRelation = function() {
    return this.getTypedRuleContext(SampledRelationContext,0);
};

JoinRelationContext.prototype.hints = function() {
    return this.getTypedRuleContext(HintsContext,0);
};
JoinRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterJoinRelation(this);
	}
};

JoinRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitJoinRelation(this);
	}
};

JoinRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitJoinRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.prototype.relation = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 40;
    this.enterRecursionRule(localctx, 40, SqlParser.RULE_relation, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RelationDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 425;
        this.sampledRelation();
        this.state = 427;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        if(la_===1+1) {
            this.state = 426;
            this.hints();

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 450;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JoinRelationContext(this, new RelationContext(this, _parentctx, _parentState));
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_relation);
                this.state = 429;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 443;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlParser.CROSS:
                    this.state = 430;
                    this.match(SqlParser.CROSS);
                    this.state = 431;
                    this.match(SqlParser.JOIN);
                    this.state = 432;
                    localctx.rightCross = this.sampledRelation();
                    break;
                case SqlParser.FULL:
                case SqlParser.INNER:
                case SqlParser.JOIN:
                case SqlParser.LEFT:
                case SqlParser.RIGHT:
                    this.state = 433;
                    this.joinType();
                    this.state = 434;
                    this.match(SqlParser.JOIN);
                    this.state = 435;
                    localctx.rightOther = this.relation(0);
                    this.state = 436;
                    this.joinCriteria();
                    break;
                case SqlParser.NATURAL:
                    this.state = 438;
                    this.match(SqlParser.NATURAL);
                    this.state = 439;
                    this.joinType();
                    this.state = 440;
                    this.match(SqlParser.JOIN);
                    this.state = 441;
                    localctx.rightNatural = this.sampledRelation();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 446;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
                if(la_===1+1) {
                    this.state = 445;
                    this.hints();

                } 
            }
            this.state = 452;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function JoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_joinType;
    return this;
}

JoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinTypeContext.prototype.constructor = JoinTypeContext;

JoinTypeContext.prototype.INNER = function() {
    return this.getToken(SqlParser.INNER, 0);
};

JoinTypeContext.prototype.LEFT = function() {
    return this.getToken(SqlParser.LEFT, 0);
};

JoinTypeContext.prototype.OUTER = function() {
    return this.getToken(SqlParser.OUTER, 0);
};

JoinTypeContext.prototype.RIGHT = function() {
    return this.getToken(SqlParser.RIGHT, 0);
};

JoinTypeContext.prototype.FULL = function() {
    return this.getToken(SqlParser.FULL, 0);
};

JoinTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterJoinType(this);
	}
};

JoinTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitJoinType(this);
	}
};

JoinTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitJoinType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.JoinTypeContext = JoinTypeContext;

SqlParser.prototype.joinType = function() {

    var localctx = new JoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SqlParser.RULE_joinType);
    var _la = 0; // Token type
    try {
        this.state = 468;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.INNER:
        case SqlParser.JOIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 454;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.INNER) {
                this.state = 453;
                this.match(SqlParser.INNER);
            }

            break;
        case SqlParser.LEFT:
            this.enterOuterAlt(localctx, 2);
            this.state = 456;
            this.match(SqlParser.LEFT);
            this.state = 458;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.OUTER) {
                this.state = 457;
                this.match(SqlParser.OUTER);
            }

            break;
        case SqlParser.RIGHT:
            this.enterOuterAlt(localctx, 3);
            this.state = 460;
            this.match(SqlParser.RIGHT);
            this.state = 462;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.OUTER) {
                this.state = 461;
                this.match(SqlParser.OUTER);
            }

            break;
        case SqlParser.FULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 464;
            this.match(SqlParser.FULL);
            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.OUTER) {
                this.state = 465;
                this.match(SqlParser.OUTER);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinCriteriaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_joinCriteria;
    return this;
}

JoinCriteriaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCriteriaContext.prototype.constructor = JoinCriteriaContext;

JoinCriteriaContext.prototype.ON = function() {
    return this.getToken(SqlParser.ON, 0);
};

JoinCriteriaContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinCriteriaContext.prototype.USING = function() {
    return this.getToken(SqlParser.USING, 0);
};

JoinCriteriaContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

JoinCriteriaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterJoinCriteria(this);
	}
};

JoinCriteriaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitJoinCriteria(this);
	}
};

JoinCriteriaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitJoinCriteria(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.JoinCriteriaContext = JoinCriteriaContext;

SqlParser.prototype.joinCriteria = function() {

    var localctx = new JoinCriteriaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SqlParser.RULE_joinCriteria);
    var _la = 0; // Token type
    try {
        this.state = 484;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 470;
            this.match(SqlParser.ON);
            this.state = 471;
            this.booleanExpression(0);
            break;
        case SqlParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 472;
            this.match(SqlParser.USING);
            this.state = 473;
            this.match(SqlParser.T__1);
            this.state = 474;
            this.identifier();
            this.state = 479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlParser.T__3) {
                this.state = 475;
                this.match(SqlParser.T__3);
                this.state = 476;
                this.identifier();
                this.state = 481;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 482;
            this.match(SqlParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SampledRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_sampledRelation;
    this.percentage = null; // Token
    return this;
}

SampledRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampledRelationContext.prototype.constructor = SampledRelationContext;

SampledRelationContext.prototype.aliasedRelation = function() {
    return this.getTypedRuleContext(AliasedRelationContext,0);
};

SampledRelationContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlParser.TABLESAMPLE, 0);
};

SampledRelationContext.prototype.sampleType = function() {
    return this.getTypedRuleContext(SampleTypeContext,0);
};

SampledRelationContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlParser.INTEGER_VALUE, 0);
};

SampledRelationContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlParser.DECIMAL_VALUE, 0);
};

SampledRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSampledRelation(this);
	}
};

SampledRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSampledRelation(this);
	}
};

SampledRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSampledRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.SampledRelationContext = SampledRelationContext;

SqlParser.prototype.sampledRelation = function() {

    var localctx = new SampledRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SqlParser.RULE_sampledRelation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        this.aliasedRelation();
        this.state = 493;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 487;
            this.match(SqlParser.TABLESAMPLE);
            this.state = 488;
            this.sampleType();
            this.state = 489;
            this.match(SqlParser.T__1);
            this.state = 490;
            localctx.percentage = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlParser.INTEGER_VALUE || _la===SqlParser.DECIMAL_VALUE)) {
                localctx.percentage = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 491;
            this.match(SqlParser.T__2);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SampleTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_sampleType;
    return this;
}

SampleTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleTypeContext.prototype.constructor = SampleTypeContext;

SampleTypeContext.prototype.BERNOULLI = function() {
    return this.getToken(SqlParser.BERNOULLI, 0);
};

SampleTypeContext.prototype.SYSTEM = function() {
    return this.getToken(SqlParser.SYSTEM, 0);
};

SampleTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSampleType(this);
	}
};

SampleTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSampleType(this);
	}
};

SampleTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSampleType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.SampleTypeContext = SampleTypeContext;

SqlParser.prototype.sampleType = function() {

    var localctx = new SampleTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SqlParser.RULE_sampleType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        _la = this._input.LA(1);
        if(!(_la===SqlParser.BERNOULLI || _la===SqlParser.SYSTEM)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasedRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_aliasedRelation;
    return this;
}

AliasedRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasedRelationContext.prototype.constructor = AliasedRelationContext;

AliasedRelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

AliasedRelationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AliasedRelationContext.prototype.AS = function() {
    return this.getToken(SqlParser.AS, 0);
};

AliasedRelationContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

AliasedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterAliasedRelation(this);
	}
};

AliasedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitAliasedRelation(this);
	}
};

AliasedRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitAliasedRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.AliasedRelationContext = AliasedRelationContext;

SqlParser.prototype.aliasedRelation = function() {

    var localctx = new AliasedRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SqlParser.RULE_aliasedRelation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.relationPrimary();
        this.state = 505;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.AS) {
                this.state = 498;
                this.match(SqlParser.AS);
            }

            this.state = 501;
            this.identifier();
            this.state = 503;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
            if(la_===1) {
                this.state = 502;
                this.columnAliases();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnAliasesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_columnAliases;
    return this;
}

ColumnAliasesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnAliasesContext.prototype.constructor = ColumnAliasesContext;

ColumnAliasesContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ColumnAliasesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterColumnAliases(this);
	}
};

ColumnAliasesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitColumnAliases(this);
	}
};

ColumnAliasesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitColumnAliases(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.ColumnAliasesContext = ColumnAliasesContext;

SqlParser.prototype.columnAliases = function() {

    var localctx = new ColumnAliasesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SqlParser.RULE_columnAliases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 507;
        this.match(SqlParser.T__1);
        this.state = 508;
        this.identifier();
        this.state = 513;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlParser.T__3) {
            this.state = 509;
            this.match(SqlParser.T__3);
            this.state = 510;
            this.identifier();
            this.state = 515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 516;
        this.match(SqlParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_relationPrimary;
    return this;
}

RelationPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationPrimaryContext.prototype.constructor = RelationPrimaryContext;


 
RelationPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
SubqueryRelationContext.prototype.constructor = SubqueryRelationContext;

SqlParser.SubqueryRelationContext = SubqueryRelationContext;

SubqueryRelationContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSubqueryRelation(this);
	}
};

SubqueryRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSubqueryRelation(this);
	}
};

SubqueryRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSubqueryRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
ParenthesizedRelationContext.prototype.constructor = ParenthesizedRelationContext;

SqlParser.ParenthesizedRelationContext = ParenthesizedRelationContext;

ParenthesizedRelationContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};
ParenthesizedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterParenthesizedRelation(this);
	}
};

ParenthesizedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitParenthesizedRelation(this);
	}
};

ParenthesizedRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitParenthesizedRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnnestContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    this.alias = null; // IdentifierContext;
    this.ordinality = null; // IdentifierContext;
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnnestContext.prototype = Object.create(RelationPrimaryContext.prototype);
UnnestContext.prototype.constructor = UnnestContext;

SqlParser.UnnestContext = UnnestContext;

UnnestContext.prototype.UNNEST = function() {
    return this.getToken(SqlParser.UNNEST, 0);
};

UnnestContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UnnestContext.prototype.WITH = function() {
    return this.getToken(SqlParser.WITH, 0);
};

UnnestContext.prototype.ORDINALITY = function() {
    return this.getToken(SqlParser.ORDINALITY, 0);
};

UnnestContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

UnnestContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlParser.AS);
    } else {
        return this.getToken(SqlParser.AS, i);
    }
};

UnnestContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterUnnest(this);
	}
};

UnnestContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitUnnest(this);
	}
};

UnnestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitUnnest(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LateralContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LateralContext.prototype = Object.create(RelationPrimaryContext.prototype);
LateralContext.prototype.constructor = LateralContext;

SqlParser.LateralContext = LateralContext;

LateralContext.prototype.LATERAL = function() {
    return this.getToken(SqlParser.LATERAL, 0);
};

LateralContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
LateralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterLateral(this);
	}
};

LateralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitLateral(this);
	}
};

LateralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitLateral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableNameContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableNameContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

SqlParser.TableNameContext = TableNameContext;

TableNameContext.prototype.tableQualifiedName = function() {
    return this.getTypedRuleContext(TableQualifiedNameContext,0);
};
TableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTableName(this);
	}
};

TableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTableName(this);
	}
};

TableNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTableName(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.RelationPrimaryContext = RelationPrimaryContext;

SqlParser.prototype.relationPrimary = function() {

    var localctx = new RelationPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SqlParser.RULE_relationPrimary);
    var _la = 0; // Token type
    try {
        this.state = 551;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableNameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 518;
            this.tableQualifiedName();
            break;

        case 2:
            localctx = new SubqueryRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 519;
            this.match(SqlParser.T__1);
            this.state = 520;
            this.query();
            this.state = 521;
            this.match(SqlParser.T__2);
            break;

        case 3:
            localctx = new UnnestContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 523;
            this.match(SqlParser.UNNEST);
            this.state = 524;
            this.match(SqlParser.T__1);
            this.state = 525;
            this.expression();
            this.state = 530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.ADD) | (1 << SqlParser.ALL) | (1 << SqlParser.ANALYZE) | (1 << SqlParser.ANY) | (1 << SqlParser.ARRAY) | (1 << SqlParser.AS) | (1 << SqlParser.ASC) | (1 << SqlParser.AT) | (1 << SqlParser.BERNOULLI) | (1 << SqlParser.CALL) | (1 << SqlParser.CASCADE) | (1 << SqlParser.CATALOGS) | (1 << SqlParser.COALESCE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlParser.COLUMN - 32)) | (1 << (SqlParser.COLUMNS - 32)) | (1 << (SqlParser.COMMENT - 32)) | (1 << (SqlParser.COMMIT - 32)) | (1 << (SqlParser.COMMITTED - 32)) | (1 << (SqlParser.CURRENT - 32)) | (1 << (SqlParser.DATA - 32)) | (1 << (SqlParser.DATE - 32)) | (1 << (SqlParser.DAY - 32)) | (1 << (SqlParser.DESC - 32)) | (1 << (SqlParser.DISTRIBUTED - 32)) | (1 << (SqlParser.EXCLUDING - 32)) | (1 << (SqlParser.EXPLAIN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SqlParser.FILTER - 66)) | (1 << (SqlParser.FIRST - 66)) | (1 << (SqlParser.FOLLOWING - 66)) | (1 << (SqlParser.FORMAT - 66)) | (1 << (SqlParser.FUNCTIONS - 66)) | (1 << (SqlParser.GRANT - 66)) | (1 << (SqlParser.GRANTS - 66)) | (1 << (SqlParser.GRAPHVIZ - 66)) | (1 << (SqlParser.HOUR - 66)) | (1 << (SqlParser.IF - 66)) | (1 << (SqlParser.INCLUDING - 66)) | (1 << (SqlParser.INPUT - 66)) | (1 << (SqlParser.INTEGER - 66)) | (1 << (SqlParser.INTERVAL - 66)) | (1 << (SqlParser.ISOLATION - 66)) | (1 << (SqlParser.LAST - 66)) | (1 << (SqlParser.LATERAL - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SqlParser.LEVEL - 98)) | (1 << (SqlParser.LIMIT - 98)) | (1 << (SqlParser.LOGICAL - 98)) | (1 << (SqlParser.MAP - 98)) | (1 << (SqlParser.MINUTE - 98)) | (1 << (SqlParser.MONTH - 98)) | (1 << (SqlParser.NFC - 98)) | (1 << (SqlParser.NFD - 98)) | (1 << (SqlParser.NFKC - 98)) | (1 << (SqlParser.NFKD - 98)) | (1 << (SqlParser.NO - 98)) | (1 << (SqlParser.NULLIF - 98)) | (1 << (SqlParser.NULLS - 98)) | (1 << (SqlParser.OFFSET - 98)) | (1 << (SqlParser.ONLY - 98)) | (1 << (SqlParser.OPTION - 98)) | (1 << (SqlParser.ORDINALITY - 98)) | (1 << (SqlParser.OUTPUT - 98)) | (1 << (SqlParser.OVER - 98)) | (1 << (SqlParser.PARTITION - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (SqlParser.PARTITIONS - 130)) | (1 << (SqlParser.POSITION - 130)) | (1 << (SqlParser.PRECEDING - 130)) | (1 << (SqlParser.PRIVILEGES - 130)) | (1 << (SqlParser.PROPERTIES - 130)) | (1 << (SqlParser.PUBLIC - 130)) | (1 << (SqlParser.RANGE - 130)) | (1 << (SqlParser.READ - 130)) | (1 << (SqlParser.RENAME - 130)) | (1 << (SqlParser.REPEATABLE - 130)) | (1 << (SqlParser.REPLACE - 130)) | (1 << (SqlParser.RESET - 130)) | (1 << (SqlParser.RESTRICT - 130)) | (1 << (SqlParser.REVOKE - 130)) | (1 << (SqlParser.ROLLBACK - 130)) | (1 << (SqlParser.ROW - 130)) | (1 << (SqlParser.ROWS - 130)) | (1 << (SqlParser.SCHEMA - 130)) | (1 << (SqlParser.SCHEMAS - 130)) | (1 << (SqlParser.SECOND - 130)) | (1 << (SqlParser.SERIALIZABLE - 130)) | (1 << (SqlParser.SESSION - 130)) | (1 << (SqlParser.SET - 130)) | (1 << (SqlParser.SETS - 130)) | (1 << (SqlParser.SHOW - 130)) | (1 << (SqlParser.SMALLINT - 130)) | (1 << (SqlParser.SOME - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (SqlParser.START - 162)) | (1 << (SqlParser.STATS - 162)) | (1 << (SqlParser.SUBSTRING - 162)) | (1 << (SqlParser.SYSTEM - 162)) | (1 << (SqlParser.TABLES - 162)) | (1 << (SqlParser.TABLESAMPLE - 162)) | (1 << (SqlParser.TEXT - 162)) | (1 << (SqlParser.TIME - 162)) | (1 << (SqlParser.TIMESTAMP - 162)) | (1 << (SqlParser.TINYINT - 162)) | (1 << (SqlParser.TO - 162)) | (1 << (SqlParser.TRANSACTION - 162)) | (1 << (SqlParser.TRY_CAST - 162)) | (1 << (SqlParser.TYPE - 162)) | (1 << (SqlParser.UNBOUNDED - 162)) | (1 << (SqlParser.UNCOMMITTED - 162)) | (1 << (SqlParser.USE - 162)) | (1 << (SqlParser.VALIDATE - 162)) | (1 << (SqlParser.VALUES - 162)) | (1 << (SqlParser.VERBOSE - 162)) | (1 << (SqlParser.VIEW - 162)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (SqlParser.WORK - 196)) | (1 << (SqlParser.WRITE - 196)) | (1 << (SqlParser.YEAR - 196)) | (1 << (SqlParser.ZONE - 196)) | (1 << (SqlParser.IDENTIFIER - 196)) | (1 << (SqlParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlParser.BACKQUOTED_IDENTIFIER - 196)))) !== 0)) {
                this.state = 527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlParser.AS) {
                    this.state = 526;
                    this.match(SqlParser.AS);
                }

                this.state = 529;
                localctx.alias = this.identifier();
            }

            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.WITH) {
                this.state = 532;
                this.match(SqlParser.WITH);
                this.state = 533;
                this.match(SqlParser.ORDINALITY);
                this.state = 535;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlParser.AS) {
                    this.state = 534;
                    this.match(SqlParser.AS);
                }

                this.state = 537;
                localctx.ordinality = this.identifier();
            }

            this.state = 540;
            this.match(SqlParser.T__2);
            break;

        case 4:
            localctx = new LateralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 542;
            this.match(SqlParser.LATERAL);
            this.state = 543;
            this.match(SqlParser.T__1);
            this.state = 544;
            this.query();
            this.state = 545;
            this.match(SqlParser.T__2);
            break;

        case 5:
            localctx = new ParenthesizedRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 547;
            this.match(SqlParser.T__1);
            this.state = 548;
            this.relation(0);
            this.state = 549;
            this.match(SqlParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_tablePrefix;
    return this;
}

TablePrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePrefixContext.prototype.constructor = TablePrefixContext;

TablePrefixContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TablePrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTablePrefix(this);
	}
};

TablePrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTablePrefix(this);
	}
};

TablePrefixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTablePrefix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.TablePrefixContext = TablePrefixContext;

SqlParser.prototype.tablePrefix = function() {

    var localctx = new TablePrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SqlParser.RULE_tablePrefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.match(SqlParser.T__5);
        this.state = 554;
        this.identifier();
        this.state = 555;
        this.match(SqlParser.T__4);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableWorkspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_tableWorkspace;
    return this;
}

TableWorkspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableWorkspaceContext.prototype.constructor = TableWorkspaceContext;

TableWorkspaceContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TableWorkspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTableWorkspace(this);
	}
};

TableWorkspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTableWorkspace(this);
	}
};

TableWorkspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTableWorkspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.TableWorkspaceContext = TableWorkspaceContext;

SqlParser.prototype.tableWorkspace = function() {

    var localctx = new TableWorkspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SqlParser.RULE_tableWorkspace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 557;
            this.identifier();
            this.state = 558;
            this.match(SqlParser.T__4);
            this.state = 562; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.ADD) | (1 << SqlParser.ALL) | (1 << SqlParser.ANALYZE) | (1 << SqlParser.ANY) | (1 << SqlParser.ARRAY) | (1 << SqlParser.ASC) | (1 << SqlParser.AT) | (1 << SqlParser.BERNOULLI) | (1 << SqlParser.CALL) | (1 << SqlParser.CASCADE) | (1 << SqlParser.CATALOGS) | (1 << SqlParser.COALESCE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlParser.COLUMN - 32)) | (1 << (SqlParser.COLUMNS - 32)) | (1 << (SqlParser.COMMENT - 32)) | (1 << (SqlParser.COMMIT - 32)) | (1 << (SqlParser.COMMITTED - 32)) | (1 << (SqlParser.CURRENT - 32)) | (1 << (SqlParser.DATA - 32)) | (1 << (SqlParser.DATE - 32)) | (1 << (SqlParser.DAY - 32)) | (1 << (SqlParser.DESC - 32)) | (1 << (SqlParser.DISTRIBUTED - 32)) | (1 << (SqlParser.EXCLUDING - 32)) | (1 << (SqlParser.EXPLAIN - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SqlParser.FILTER - 66)) | (1 << (SqlParser.FIRST - 66)) | (1 << (SqlParser.FOLLOWING - 66)) | (1 << (SqlParser.FORMAT - 66)) | (1 << (SqlParser.FUNCTIONS - 66)) | (1 << (SqlParser.GRANT - 66)) | (1 << (SqlParser.GRANTS - 66)) | (1 << (SqlParser.GRAPHVIZ - 66)) | (1 << (SqlParser.HOUR - 66)) | (1 << (SqlParser.IF - 66)) | (1 << (SqlParser.INCLUDING - 66)) | (1 << (SqlParser.INPUT - 66)) | (1 << (SqlParser.INTEGER - 66)) | (1 << (SqlParser.INTERVAL - 66)) | (1 << (SqlParser.ISOLATION - 66)) | (1 << (SqlParser.LAST - 66)) | (1 << (SqlParser.LATERAL - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SqlParser.LEVEL - 98)) | (1 << (SqlParser.LIMIT - 98)) | (1 << (SqlParser.LOGICAL - 98)) | (1 << (SqlParser.MAP - 98)) | (1 << (SqlParser.MINUTE - 98)) | (1 << (SqlParser.MONTH - 98)) | (1 << (SqlParser.NFC - 98)) | (1 << (SqlParser.NFD - 98)) | (1 << (SqlParser.NFKC - 98)) | (1 << (SqlParser.NFKD - 98)) | (1 << (SqlParser.NO - 98)) | (1 << (SqlParser.NULLIF - 98)) | (1 << (SqlParser.NULLS - 98)) | (1 << (SqlParser.OFFSET - 98)) | (1 << (SqlParser.ONLY - 98)) | (1 << (SqlParser.OPTION - 98)) | (1 << (SqlParser.ORDINALITY - 98)) | (1 << (SqlParser.OUTPUT - 98)) | (1 << (SqlParser.OVER - 98)) | (1 << (SqlParser.PARTITION - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (SqlParser.PARTITIONS - 130)) | (1 << (SqlParser.POSITION - 130)) | (1 << (SqlParser.PRECEDING - 130)) | (1 << (SqlParser.PRIVILEGES - 130)) | (1 << (SqlParser.PROPERTIES - 130)) | (1 << (SqlParser.PUBLIC - 130)) | (1 << (SqlParser.RANGE - 130)) | (1 << (SqlParser.READ - 130)) | (1 << (SqlParser.RENAME - 130)) | (1 << (SqlParser.REPEATABLE - 130)) | (1 << (SqlParser.REPLACE - 130)) | (1 << (SqlParser.RESET - 130)) | (1 << (SqlParser.RESTRICT - 130)) | (1 << (SqlParser.REVOKE - 130)) | (1 << (SqlParser.ROLLBACK - 130)) | (1 << (SqlParser.ROW - 130)) | (1 << (SqlParser.ROWS - 130)) | (1 << (SqlParser.SCHEMA - 130)) | (1 << (SqlParser.SCHEMAS - 130)) | (1 << (SqlParser.SECOND - 130)) | (1 << (SqlParser.SERIALIZABLE - 130)) | (1 << (SqlParser.SESSION - 130)) | (1 << (SqlParser.SET - 130)) | (1 << (SqlParser.SETS - 130)) | (1 << (SqlParser.SHOW - 130)) | (1 << (SqlParser.SMALLINT - 130)) | (1 << (SqlParser.SOME - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (SqlParser.START - 162)) | (1 << (SqlParser.STATS - 162)) | (1 << (SqlParser.SUBSTRING - 162)) | (1 << (SqlParser.SYSTEM - 162)) | (1 << (SqlParser.TABLES - 162)) | (1 << (SqlParser.TABLESAMPLE - 162)) | (1 << (SqlParser.TEXT - 162)) | (1 << (SqlParser.TIME - 162)) | (1 << (SqlParser.TIMESTAMP - 162)) | (1 << (SqlParser.TINYINT - 162)) | (1 << (SqlParser.TO - 162)) | (1 << (SqlParser.TRANSACTION - 162)) | (1 << (SqlParser.TRY_CAST - 162)) | (1 << (SqlParser.TYPE - 162)) | (1 << (SqlParser.UNBOUNDED - 162)) | (1 << (SqlParser.UNCOMMITTED - 162)) | (1 << (SqlParser.USE - 162)) | (1 << (SqlParser.VALIDATE - 162)) | (1 << (SqlParser.VALUES - 162)) | (1 << (SqlParser.VERBOSE - 162)) | (1 << (SqlParser.VIEW - 162)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (SqlParser.WORK - 196)) | (1 << (SqlParser.WRITE - 196)) | (1 << (SqlParser.YEAR - 196)) | (1 << (SqlParser.ZONE - 196)) | (1 << (SqlParser.IDENTIFIER - 196)) | (1 << (SqlParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlParser.BACKQUOTED_IDENTIFIER - 196)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableFieldPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_tableFieldPart;
    this.glob = null; // Token
    return this;
}

TableFieldPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFieldPartContext.prototype.constructor = TableFieldPartContext;

TableFieldPartContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableFieldPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTableFieldPart(this);
	}
};

TableFieldPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTableFieldPart(this);
	}
};

TableFieldPartContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTableFieldPart(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.TableFieldPartContext = TableFieldPartContext;

SqlParser.prototype.tableFieldPart = function() {

    var localctx = new TableFieldPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SqlParser.RULE_tableFieldPart);
    try {
        this.state = 567;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.T__4:
            this.enterOuterAlt(localctx, 1);
            this.state = 564;
            this.match(SqlParser.T__4);
            this.state = 565;
            this.identifier();
            break;
        case SqlParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 566;
            localctx.glob = this.match(SqlParser.T__6);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_tableField;
    return this;
}

TableFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFieldContext.prototype.constructor = TableFieldContext;

TableFieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableFieldContext.prototype.tableFieldPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableFieldPartContext);
    } else {
        return this.getTypedRuleContext(TableFieldPartContext,i);
    }
};

TableFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTableField(this);
	}
};

TableFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTableField(this);
	}
};

TableFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTableField(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.TableFieldContext = TableFieldContext;

SqlParser.prototype.tableField = function() {

    var localctx = new TableFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SqlParser.RULE_tableField);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.match(SqlParser.T__7);
        this.state = 570;
        this.identifier();
        this.state = 574;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 571;
                this.tableFieldPart(); 
            }
            this.state = 576;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableQualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_tableQualifiedName;
    return this;
}

TableQualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableQualifiedNameContext.prototype.constructor = TableQualifiedNameContext;

TableQualifiedNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

TableQualifiedNameContext.prototype.tablePrefix = function() {
    return this.getTypedRuleContext(TablePrefixContext,0);
};

TableQualifiedNameContext.prototype.tableField = function() {
    return this.getTypedRuleContext(TableFieldContext,0);
};

TableQualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTableQualifiedName(this);
	}
};

TableQualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTableQualifiedName(this);
	}
};

TableQualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTableQualifiedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.TableQualifiedNameContext = TableQualifiedNameContext;

SqlParser.prototype.tableQualifiedName = function() {

    var localctx = new TableQualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SqlParser.RULE_tableQualifiedName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.T__5) {
            this.state = 577;
            this.tablePrefix();
        }

        this.state = 580;
        this.qualifiedName();
        this.state = 582;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        if(la_===1) {
            this.state = 581;
            this.tableField();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldPathPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_fieldPathPart;
    this.glob = null; // Token
    return this;
}

FieldPathPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldPathPartContext.prototype.constructor = FieldPathPartContext;

FieldPathPartContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FieldPathPartContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlParser.INTEGER_VALUE, 0);
};

FieldPathPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterFieldPathPart(this);
	}
};

FieldPathPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitFieldPathPart(this);
	}
};

FieldPathPartContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitFieldPathPart(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.FieldPathPartContext = FieldPathPartContext;

SqlParser.prototype.fieldPathPart = function() {

    var localctx = new FieldPathPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SqlParser.RULE_fieldPathPart);
    try {
        this.state = 590;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.T__4:
            this.enterOuterAlt(localctx, 1);
            this.state = 584;
            this.match(SqlParser.T__4);
            this.state = 585;
            this.identifier();
            break;
        case SqlParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 586;
            localctx.glob = this.match(SqlParser.T__6);
            break;
        case SqlParser.T__8:
            this.enterOuterAlt(localctx, 3);
            this.state = 587;
            this.match(SqlParser.T__8);
            this.state = 588;
            this.match(SqlParser.INTEGER_VALUE);
            this.state = 589;
            this.match(SqlParser.T__9);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_fieldPath;
    return this;
}

FieldPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldPathContext.prototype.constructor = FieldPathContext;

FieldPathContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FieldPathContext.prototype.fieldPathPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldPathPartContext);
    } else {
        return this.getTypedRuleContext(FieldPathPartContext,i);
    }
};

FieldPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterFieldPath(this);
	}
};

FieldPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitFieldPath(this);
	}
};

FieldPathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitFieldPath(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.FieldPathContext = FieldPathContext;

SqlParser.prototype.fieldPath = function() {

    var localctx = new FieldPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SqlParser.RULE_fieldPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 592;
        this.identifier();
        this.state = 596;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.T__4) | (1 << SqlParser.T__6) | (1 << SqlParser.T__8))) !== 0)) {
            this.state = 593;
            this.fieldPathPart();
            this.state = 598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.ExpressionContext = ExpressionContext;

SqlParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SqlParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 599;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


 
BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

SqlParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(SqlParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
LogicalNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterLogicalNot(this);
	}
};

LogicalNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitLogicalNot(this);
	}
};

LogicalNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitLogicalNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanDefaultContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanDefaultContext.prototype = Object.create(BooleanExpressionContext.prototype);
BooleanDefaultContext.prototype.constructor = BooleanDefaultContext;

SqlParser.BooleanDefaultContext = BooleanDefaultContext;

BooleanDefaultContext.prototype.predicated = function() {
    return this.getTypedRuleContext(PredicatedContext,0);
};
BooleanDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBooleanDefault(this);
	}
};

BooleanDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBooleanDefault(this);
	}
};

BooleanDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBooleanDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.op = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

SqlParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(SqlParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(SqlParser.OR, 0);
};
LogicalBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitLogicalBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, SqlParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 605;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.T__1:
        case SqlParser.T__7:
        case SqlParser.T__8:
        case SqlParser.T__10:
        case SqlParser.ADD:
        case SqlParser.ALL:
        case SqlParser.ANALYZE:
        case SqlParser.ANY:
        case SqlParser.ARRAY:
        case SqlParser.ASC:
        case SqlParser.AT:
        case SqlParser.BERNOULLI:
        case SqlParser.CALL:
        case SqlParser.CASCADE:
        case SqlParser.CASE:
        case SqlParser.CAST:
        case SqlParser.CATALOGS:
        case SqlParser.COALESCE:
        case SqlParser.COLUMN:
        case SqlParser.COLUMNS:
        case SqlParser.COMMENT:
        case SqlParser.COMMIT:
        case SqlParser.COMMITTED:
        case SqlParser.CURRENT:
        case SqlParser.CURRENT_DATE:
        case SqlParser.CURRENT_DATETIME:
        case SqlParser.CURRENT_TIME:
        case SqlParser.CURRENT_TIMESTAMP:
        case SqlParser.DATA:
        case SqlParser.DATE:
        case SqlParser.DAY:
        case SqlParser.DESC:
        case SqlParser.DISTRIBUTED:
        case SqlParser.EXCLUDING:
        case SqlParser.EXISTS:
        case SqlParser.EXPLAIN:
        case SqlParser.EXTRACT:
        case SqlParser.BOOL_FALSE:
        case SqlParser.FILTER:
        case SqlParser.FIRST:
        case SqlParser.FOLLOWING:
        case SqlParser.FORMAT:
        case SqlParser.FUNCTIONS:
        case SqlParser.GRANT:
        case SqlParser.GRANTS:
        case SqlParser.GRAPHVIZ:
        case SqlParser.GROUPING:
        case SqlParser.HOUR:
        case SqlParser.IF:
        case SqlParser.INCLUDING:
        case SqlParser.INPUT:
        case SqlParser.INTEGER:
        case SqlParser.INTERVAL:
        case SqlParser.ISOLATION:
        case SqlParser.LAST:
        case SqlParser.LATERAL:
        case SqlParser.LEVEL:
        case SqlParser.LIMIT:
        case SqlParser.LOGICAL:
        case SqlParser.MAP:
        case SqlParser.MINUTE:
        case SqlParser.MONTH:
        case SqlParser.NFC:
        case SqlParser.NFD:
        case SqlParser.NFKC:
        case SqlParser.NFKD:
        case SqlParser.NO:
        case SqlParser.NORMALIZE:
        case SqlParser.XNULL:
        case SqlParser.NULLIF:
        case SqlParser.NULLS:
        case SqlParser.NULL_VALUE:
        case SqlParser.OFFSET:
        case SqlParser.ONLY:
        case SqlParser.OPTION:
        case SqlParser.ORDINALITY:
        case SqlParser.OUTPUT:
        case SqlParser.OVER:
        case SqlParser.PARTITION:
        case SqlParser.PARTITIONS:
        case SqlParser.POSITION:
        case SqlParser.PRECEDING:
        case SqlParser.PRIVILEGES:
        case SqlParser.PROPERTIES:
        case SqlParser.PUBLIC:
        case SqlParser.RANGE:
        case SqlParser.READ:
        case SqlParser.RENAME:
        case SqlParser.REPEATABLE:
        case SqlParser.REPLACE:
        case SqlParser.RESET:
        case SqlParser.RESTRICT:
        case SqlParser.REVOKE:
        case SqlParser.ROLLBACK:
        case SqlParser.ROW:
        case SqlParser.ROWS:
        case SqlParser.SCHEMA:
        case SqlParser.SCHEMAS:
        case SqlParser.SECOND:
        case SqlParser.SERIALIZABLE:
        case SqlParser.SESSION:
        case SqlParser.SET:
        case SqlParser.SETS:
        case SqlParser.SHOW:
        case SqlParser.SMALLINT:
        case SqlParser.SOME:
        case SqlParser.START:
        case SqlParser.STATIC_CAST:
        case SqlParser.STATS:
        case SqlParser.SUBSTRING:
        case SqlParser.SYSTEM:
        case SqlParser.TABLES:
        case SqlParser.TABLESAMPLE:
        case SqlParser.TEXT:
        case SqlParser.TIME:
        case SqlParser.TIMESTAMP:
        case SqlParser.TINYINT:
        case SqlParser.TO:
        case SqlParser.TRANSACTION:
        case SqlParser.BOOL_TRUE:
        case SqlParser.TRY_CAST:
        case SqlParser.TRY_STATIC_CAST:
        case SqlParser.TYPE:
        case SqlParser.UNBOUNDED:
        case SqlParser.UNCOMMITTED:
        case SqlParser.UNDEFINED:
        case SqlParser.USE:
        case SqlParser.VALIDATE:
        case SqlParser.VALUES:
        case SqlParser.VERBOSE:
        case SqlParser.VIEW:
        case SqlParser.WORK:
        case SqlParser.WRITE:
        case SqlParser.YEAR:
        case SqlParser.ZONE:
        case SqlParser.PLUS:
        case SqlParser.MINUS:
        case SqlParser.STRING:
        case SqlParser.UNICODE_STR:
        case SqlParser.BINARY_LITERAL:
        case SqlParser.INTEGER_VALUE:
        case SqlParser.DECIMAL_VALUE:
        case SqlParser.IDENTIFIER:
        case SqlParser.QUOTED_IDENTIFIER:
        case SqlParser.BACKQUOTED_IDENTIFIER:
        case SqlParser.DOUBLE_PRECISION:
            localctx = new BooleanDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 602;
            this.predicated();
            break;
        case SqlParser.NOT:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 603;
            this.match(SqlParser.NOT);
            this.state = 604;
            this.booleanExpression(3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 615;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 613;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_booleanExpression);
                    this.state = 607;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 608;
                    localctx.op = this.match(SqlParser.AND);
                    this.state = 609;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_booleanExpression);
                    this.state = 610;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 611;
                    localctx.op = this.match(SqlParser.OR);
                    this.state = 612;
                    localctx.right = this.booleanExpression(2);
                    break;

                } 
            }
            this.state = 617;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PredicatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_predicated;
    return this;
}

PredicatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

PredicatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterPredicated(this);
	}
};

PredicatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitPredicated(this);
	}
};

PredicatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitPredicated(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.PredicatedContext = PredicatedContext;

SqlParser.prototype.predicated = function() {

    var localctx = new PredicatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SqlParser.RULE_predicated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.valueExpression(0);
        this.state = 620;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        if(la_===1) {
            this.state = 619;
            this.predicate();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;


 
PredicateContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ComparisonContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonContext.prototype = Object.create(PredicateContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

SqlParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LikeContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.pattern = null; // ValueExpressionContext;
    this.escape = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LikeContext.prototype = Object.create(PredicateContext.prototype);
LikeContext.prototype.constructor = LikeContext;

SqlParser.LikeContext = LikeContext;

LikeContext.prototype.LIKE = function() {
    return this.getToken(SqlParser.LIKE, 0);
};

LikeContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

LikeContext.prototype.NOT = function() {
    return this.getToken(SqlParser.NOT, 0);
};

LikeContext.prototype.ESCAPE = function() {
    return this.getToken(SqlParser.ESCAPE, 0);
};
LikeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterLike(this);
	}
};

LikeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitLike(this);
	}
};

LikeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitLike(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InSubqueryContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InSubqueryContext.prototype = Object.create(PredicateContext.prototype);
InSubqueryContext.prototype.constructor = InSubqueryContext;

SqlParser.InSubqueryContext = InSubqueryContext;

InSubqueryContext.prototype.IN = function() {
    return this.getToken(SqlParser.IN, 0);
};

InSubqueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

InSubqueryContext.prototype.NOT = function() {
    return this.getToken(SqlParser.NOT, 0);
};
InSubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterInSubquery(this);
	}
};

InSubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitInSubquery(this);
	}
};

InSubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitInSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DistinctFromContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DistinctFromContext.prototype = Object.create(PredicateContext.prototype);
DistinctFromContext.prototype.constructor = DistinctFromContext;

SqlParser.DistinctFromContext = DistinctFromContext;

DistinctFromContext.prototype.IS = function() {
    return this.getToken(SqlParser.IS, 0);
};

DistinctFromContext.prototype.DISTINCT = function() {
    return this.getToken(SqlParser.DISTINCT, 0);
};

DistinctFromContext.prototype.FROM = function() {
    return this.getToken(SqlParser.FROM, 0);
};

DistinctFromContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

DistinctFromContext.prototype.NOT = function() {
    return this.getToken(SqlParser.NOT, 0);
};
DistinctFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterDistinctFrom(this);
	}
};

DistinctFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitDistinctFrom(this);
	}
};

DistinctFromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitDistinctFrom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InListContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InListContext.prototype = Object.create(PredicateContext.prototype);
InListContext.prototype.constructor = InListContext;

SqlParser.InListContext = InListContext;

InListContext.prototype.IN = function() {
    return this.getToken(SqlParser.IN, 0);
};

InListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InListContext.prototype.NOT = function() {
    return this.getToken(SqlParser.NOT, 0);
};
InListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterInList(this);
	}
};

InListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitInList(this);
	}
};

InListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitInList(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NullPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullPredicateContext.prototype = Object.create(PredicateContext.prototype);
NullPredicateContext.prototype.constructor = NullPredicateContext;

SqlParser.NullPredicateContext = NullPredicateContext;

NullPredicateContext.prototype.IS = function() {
    return this.getToken(SqlParser.IS, 0);
};

NullPredicateContext.prototype.XNULL = function() {
    return this.getToken(SqlParser.XNULL, 0);
};

NullPredicateContext.prototype.NOT = function() {
    return this.getToken(SqlParser.NOT, 0);
};
NullPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNullPredicate(this);
	}
};

NullPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNullPredicate(this);
	}
};

NullPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNullPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BetweenContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.lower = null; // ValueExpressionContext;
    this.upper = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenContext.prototype = Object.create(PredicateContext.prototype);
BetweenContext.prototype.constructor = BetweenContext;

SqlParser.BetweenContext = BetweenContext;

BetweenContext.prototype.BETWEEN = function() {
    return this.getToken(SqlParser.BETWEEN, 0);
};

BetweenContext.prototype.AND = function() {
    return this.getToken(SqlParser.AND, 0);
};

BetweenContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

BetweenContext.prototype.NOT = function() {
    return this.getToken(SqlParser.NOT, 0);
};
BetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBetween(this);
	}
};

BetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBetween(this);
	}
};

BetweenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBetween(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UndefinedPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UndefinedPredicateContext.prototype = Object.create(PredicateContext.prototype);
UndefinedPredicateContext.prototype.constructor = UndefinedPredicateContext;

SqlParser.UndefinedPredicateContext = UndefinedPredicateContext;

UndefinedPredicateContext.prototype.IS = function() {
    return this.getToken(SqlParser.IS, 0);
};

UndefinedPredicateContext.prototype.UNDEFINED = function() {
    return this.getToken(SqlParser.UNDEFINED, 0);
};

UndefinedPredicateContext.prototype.NOT = function() {
    return this.getToken(SqlParser.NOT, 0);
};
UndefinedPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterUndefinedPredicate(this);
	}
};

UndefinedPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitUndefinedPredicate(this);
	}
};

UndefinedPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitUndefinedPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QuantifiedComparisonContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuantifiedComparisonContext.prototype = Object.create(PredicateContext.prototype);
QuantifiedComparisonContext.prototype.constructor = QuantifiedComparisonContext;

SqlParser.QuantifiedComparisonContext = QuantifiedComparisonContext;

QuantifiedComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

QuantifiedComparisonContext.prototype.comparisonQuantifier = function() {
    return this.getTypedRuleContext(ComparisonQuantifierContext,0);
};

QuantifiedComparisonContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
QuantifiedComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQuantifiedComparison(this);
	}
};

QuantifiedComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQuantifiedComparison(this);
	}
};

QuantifiedComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQuantifiedComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.PredicateContext = PredicateContext;

SqlParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SqlParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 688;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ComparisonContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 622;
            this.comparisonOperator();
            this.state = 623;
            localctx.right = this.valueExpression(0);
            break;

        case 2:
            localctx = new QuantifiedComparisonContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 625;
            this.comparisonOperator();
            this.state = 626;
            this.comparisonQuantifier();
            this.state = 627;
            this.match(SqlParser.T__1);
            this.state = 628;
            this.query();
            this.state = 629;
            this.match(SqlParser.T__2);
            break;

        case 3:
            localctx = new BetweenContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.NOT) {
                this.state = 631;
                this.match(SqlParser.NOT);
            }

            this.state = 634;
            this.match(SqlParser.BETWEEN);
            this.state = 635;
            localctx.lower = this.valueExpression(0);
            this.state = 636;
            this.match(SqlParser.AND);
            this.state = 637;
            localctx.upper = this.valueExpression(0);
            break;

        case 4:
            localctx = new InListContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 640;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.NOT) {
                this.state = 639;
                this.match(SqlParser.NOT);
            }

            this.state = 642;
            this.match(SqlParser.IN);
            this.state = 643;
            this.match(SqlParser.T__1);
            this.state = 644;
            this.expression();
            this.state = 649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlParser.T__3) {
                this.state = 645;
                this.match(SqlParser.T__3);
                this.state = 646;
                this.expression();
                this.state = 651;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 652;
            this.match(SqlParser.T__2);
            break;

        case 5:
            localctx = new InSubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.NOT) {
                this.state = 654;
                this.match(SqlParser.NOT);
            }

            this.state = 657;
            this.match(SqlParser.IN);
            this.state = 658;
            this.match(SqlParser.T__1);
            this.state = 659;
            this.query();
            this.state = 660;
            this.match(SqlParser.T__2);
            break;

        case 6:
            localctx = new LikeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.NOT) {
                this.state = 662;
                this.match(SqlParser.NOT);
            }

            this.state = 665;
            this.match(SqlParser.LIKE);
            this.state = 666;
            localctx.pattern = this.valueExpression(0);
            this.state = 669;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
            if(la_===1) {
                this.state = 667;
                this.match(SqlParser.ESCAPE);
                this.state = 668;
                localctx.escape = this.valueExpression(0);

            }
            break;

        case 7:
            localctx = new NullPredicateContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 671;
            this.match(SqlParser.IS);
            this.state = 673;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.NOT) {
                this.state = 672;
                this.match(SqlParser.NOT);
            }

            this.state = 675;
            this.match(SqlParser.XNULL);
            break;

        case 8:
            localctx = new UndefinedPredicateContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 676;
            this.match(SqlParser.IS);
            this.state = 678;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.NOT) {
                this.state = 677;
                this.match(SqlParser.NOT);
            }

            this.state = 680;
            this.match(SqlParser.UNDEFINED);
            break;

        case 9:
            localctx = new DistinctFromContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 681;
            this.match(SqlParser.IS);
            this.state = 683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.NOT) {
                this.state = 682;
                this.match(SqlParser.NOT);
            }

            this.state = 685;
            this.match(SqlParser.DISTINCT);
            this.state = 686;
            this.match(SqlParser.FROM);
            this.state = 687;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_valueExpression;
    return this;
}

ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;


 
ValueExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

SqlParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ValueExpressionDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitValueExpressionDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConcatenationContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcatenationContext.prototype = Object.create(ValueExpressionContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

SqlParser.ConcatenationContext = ConcatenationContext;

ConcatenationContext.prototype.CONCAT = function() {
    return this.getToken(SqlParser.CONCAT, 0);
};

ConcatenationContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitConcatenation(this);
	}
};

ConcatenationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitConcatenation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.op = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

SqlParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK = function() {
    return this.getToken(SqlParser.ASTERISK, 0);
};

ArithmeticBinaryContext.prototype.SLASH = function() {
    return this.getToken(SqlParser.SLASH, 0);
};

ArithmeticBinaryContext.prototype.PERCENT = function() {
    return this.getToken(SqlParser.PERCENT, 0);
};

ArithmeticBinaryContext.prototype.PLUS = function() {
    return this.getToken(SqlParser.PLUS, 0);
};

ArithmeticBinaryContext.prototype.MINUS = function() {
    return this.getToken(SqlParser.MINUS, 0);
};
ArithmeticBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitArithmeticBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.op = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

SqlParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.MINUS = function() {
    return this.getToken(SqlParser.MINUS, 0);
};

ArithmeticUnaryContext.prototype.PLUS = function() {
    return this.getToken(SqlParser.PLUS, 0);
};
ArithmeticUnaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitArithmeticUnary(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtTimeZoneContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.value = null; // ValueExpressionContext;
    this.tz = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtTimeZoneContext.prototype = Object.create(ValueExpressionContext.prototype);
AtTimeZoneContext.prototype.constructor = AtTimeZoneContext;

SqlParser.AtTimeZoneContext = AtTimeZoneContext;

AtTimeZoneContext.prototype.AT = function() {
    return this.getToken(SqlParser.AT, 0);
};

AtTimeZoneContext.prototype.TIME = function() {
    return this.getToken(SqlParser.TIME, 0);
};

AtTimeZoneContext.prototype.ZONE = function() {
    return this.getToken(SqlParser.ZONE, 0);
};

AtTimeZoneContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
AtTimeZoneContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterAtTimeZone(this);
	}
};

AtTimeZoneContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitAtTimeZone(this);
	}
};

AtTimeZoneContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitAtTimeZone(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, SqlParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.T__1:
        case SqlParser.T__7:
        case SqlParser.T__8:
        case SqlParser.T__10:
        case SqlParser.ADD:
        case SqlParser.ALL:
        case SqlParser.ANALYZE:
        case SqlParser.ANY:
        case SqlParser.ARRAY:
        case SqlParser.ASC:
        case SqlParser.AT:
        case SqlParser.BERNOULLI:
        case SqlParser.CALL:
        case SqlParser.CASCADE:
        case SqlParser.CASE:
        case SqlParser.CAST:
        case SqlParser.CATALOGS:
        case SqlParser.COALESCE:
        case SqlParser.COLUMN:
        case SqlParser.COLUMNS:
        case SqlParser.COMMENT:
        case SqlParser.COMMIT:
        case SqlParser.COMMITTED:
        case SqlParser.CURRENT:
        case SqlParser.CURRENT_DATE:
        case SqlParser.CURRENT_DATETIME:
        case SqlParser.CURRENT_TIME:
        case SqlParser.CURRENT_TIMESTAMP:
        case SqlParser.DATA:
        case SqlParser.DATE:
        case SqlParser.DAY:
        case SqlParser.DESC:
        case SqlParser.DISTRIBUTED:
        case SqlParser.EXCLUDING:
        case SqlParser.EXISTS:
        case SqlParser.EXPLAIN:
        case SqlParser.EXTRACT:
        case SqlParser.BOOL_FALSE:
        case SqlParser.FILTER:
        case SqlParser.FIRST:
        case SqlParser.FOLLOWING:
        case SqlParser.FORMAT:
        case SqlParser.FUNCTIONS:
        case SqlParser.GRANT:
        case SqlParser.GRANTS:
        case SqlParser.GRAPHVIZ:
        case SqlParser.GROUPING:
        case SqlParser.HOUR:
        case SqlParser.IF:
        case SqlParser.INCLUDING:
        case SqlParser.INPUT:
        case SqlParser.INTEGER:
        case SqlParser.INTERVAL:
        case SqlParser.ISOLATION:
        case SqlParser.LAST:
        case SqlParser.LATERAL:
        case SqlParser.LEVEL:
        case SqlParser.LIMIT:
        case SqlParser.LOGICAL:
        case SqlParser.MAP:
        case SqlParser.MINUTE:
        case SqlParser.MONTH:
        case SqlParser.NFC:
        case SqlParser.NFD:
        case SqlParser.NFKC:
        case SqlParser.NFKD:
        case SqlParser.NO:
        case SqlParser.NORMALIZE:
        case SqlParser.XNULL:
        case SqlParser.NULLIF:
        case SqlParser.NULLS:
        case SqlParser.NULL_VALUE:
        case SqlParser.OFFSET:
        case SqlParser.ONLY:
        case SqlParser.OPTION:
        case SqlParser.ORDINALITY:
        case SqlParser.OUTPUT:
        case SqlParser.OVER:
        case SqlParser.PARTITION:
        case SqlParser.PARTITIONS:
        case SqlParser.POSITION:
        case SqlParser.PRECEDING:
        case SqlParser.PRIVILEGES:
        case SqlParser.PROPERTIES:
        case SqlParser.PUBLIC:
        case SqlParser.RANGE:
        case SqlParser.READ:
        case SqlParser.RENAME:
        case SqlParser.REPEATABLE:
        case SqlParser.REPLACE:
        case SqlParser.RESET:
        case SqlParser.RESTRICT:
        case SqlParser.REVOKE:
        case SqlParser.ROLLBACK:
        case SqlParser.ROW:
        case SqlParser.ROWS:
        case SqlParser.SCHEMA:
        case SqlParser.SCHEMAS:
        case SqlParser.SECOND:
        case SqlParser.SERIALIZABLE:
        case SqlParser.SESSION:
        case SqlParser.SET:
        case SqlParser.SETS:
        case SqlParser.SHOW:
        case SqlParser.SMALLINT:
        case SqlParser.SOME:
        case SqlParser.START:
        case SqlParser.STATIC_CAST:
        case SqlParser.STATS:
        case SqlParser.SUBSTRING:
        case SqlParser.SYSTEM:
        case SqlParser.TABLES:
        case SqlParser.TABLESAMPLE:
        case SqlParser.TEXT:
        case SqlParser.TIME:
        case SqlParser.TIMESTAMP:
        case SqlParser.TINYINT:
        case SqlParser.TO:
        case SqlParser.TRANSACTION:
        case SqlParser.BOOL_TRUE:
        case SqlParser.TRY_CAST:
        case SqlParser.TRY_STATIC_CAST:
        case SqlParser.TYPE:
        case SqlParser.UNBOUNDED:
        case SqlParser.UNCOMMITTED:
        case SqlParser.UNDEFINED:
        case SqlParser.USE:
        case SqlParser.VALIDATE:
        case SqlParser.VALUES:
        case SqlParser.VERBOSE:
        case SqlParser.VIEW:
        case SqlParser.WORK:
        case SqlParser.WRITE:
        case SqlParser.YEAR:
        case SqlParser.ZONE:
        case SqlParser.STRING:
        case SqlParser.UNICODE_STR:
        case SqlParser.BINARY_LITERAL:
        case SqlParser.INTEGER_VALUE:
        case SqlParser.DECIMAL_VALUE:
        case SqlParser.IDENTIFIER:
        case SqlParser.QUOTED_IDENTIFIER:
        case SqlParser.BACKQUOTED_IDENTIFIER:
        case SqlParser.DOUBLE_PRECISION:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 691;
            this.primaryExpression(0);
            break;
        case SqlParser.PLUS:
        case SqlParser.MINUS:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 692;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlParser.PLUS || _la===SqlParser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 693;
            this.valueExpression(4);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 712;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 710;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AtTimeZoneContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_valueExpression);
                    this.state = 696;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 697;
                    this.match(SqlParser.AT);
                    this.state = 698;
                    this.match(SqlParser.TIME);
                    this.state = 699;
                    this.match(SqlParser.ZONE);
                    this.state = 700;
                    localctx.tz = this.valueExpression(6);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_valueExpression);
                    this.state = 701;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 702;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 208)) & ~0x1f) == 0 && ((1 << (_la - 208)) & ((1 << (SqlParser.ASTERISK - 208)) | (1 << (SqlParser.SLASH - 208)) | (1 << (SqlParser.PERCENT - 208)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 703;
                    localctx.right = this.valueExpression(4);
                    break;

                case 3:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_valueExpression);
                    this.state = 704;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 705;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlParser.PLUS || _la===SqlParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 706;
                    localctx.right = this.valueExpression(3);
                    break;

                case 4:
                    localctx = new ConcatenationContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_valueExpression);
                    this.state = 707;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 708;
                    this.match(SqlParser.CONCAT);
                    this.state = 709;
                    localctx.right = this.valueExpression(2);
                    break;

                } 
            }
            this.state = 714;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;


 
PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DereferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.base = null; // PrimaryExpressionContext;
    this.fieldName = null; // IdentifierContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;

SqlParser.DereferenceContext = DereferenceContext;

DereferenceContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

DereferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DereferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterDereference(this);
	}
};

DereferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitDereference(this);
	}
};

DereferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitDereference(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NamedParameterContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NamedParameterContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NamedParameterContext.prototype.constructor = NamedParameterContext;

SqlParser.NamedParameterContext = NamedParameterContext;

NamedParameterContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlParser.INTEGER_VALUE, 0);
};

NamedParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
NamedParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNamedParameter(this);
	}
};

NamedParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNamedParameter(this);
	}
};

NamedParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNamedParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TypeConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
TypeConstructorContext.prototype.constructor = TypeConstructorContext;

SqlParser.TypeConstructorContext = TypeConstructorContext;

TypeConstructorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeConstructorContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

TypeConstructorContext.prototype.DOUBLE_PRECISION = function() {
    return this.getToken(SqlParser.DOUBLE_PRECISION, 0);
};
TypeConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTypeConstructor(this);
	}
};

TypeConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTypeConstructor(this);
	}
};

TypeConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTypeConstructor(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UndefinedLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UndefinedLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
UndefinedLiteralContext.prototype.constructor = UndefinedLiteralContext;

SqlParser.UndefinedLiteralContext = UndefinedLiteralContext;

UndefinedLiteralContext.prototype.UNDEFINED = function() {
    return this.getToken(SqlParser.UNDEFINED, 0);
};
UndefinedLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterUndefinedLiteral(this);
	}
};

UndefinedLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitUndefinedLiteral(this);
	}
};

UndefinedLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitUndefinedLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubstringContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.expr = null; // ValueExpressionContext;
    this.start = null; // ValueExpressionContext;
    this.len = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubstringContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubstringContext.prototype.constructor = SubstringContext;

SqlParser.SubstringContext = SubstringContext;

SubstringContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlParser.SUBSTRING, 0);
};

SubstringContext.prototype.FROM = function() {
    return this.getToken(SqlParser.FROM, 0);
};

SubstringContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

SubstringContext.prototype.FOR = function() {
    return this.getToken(SqlParser.FOR, 0);
};
SubstringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSubstring(this);
	}
};

SubstringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSubstring(this);
	}
};

SubstringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSubstring(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;

SqlParser.CastContext = CastContext;

CastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastContext.prototype.AS = function() {
    return this.getToken(SqlParser.AS, 0);
};

CastContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CastContext.prototype.CAST = function() {
    return this.getToken(SqlParser.CAST, 0);
};

CastContext.prototype.TRY_CAST = function() {
    return this.getToken(SqlParser.TRY_CAST, 0);
};

CastContext.prototype.STATIC_CAST = function() {
    return this.getToken(SqlParser.STATIC_CAST, 0);
};

CastContext.prototype.TRY_STATIC_CAST = function() {
    return this.getToken(SqlParser.TRY_STATIC_CAST, 0);
};
CastContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterCast(this);
	}
};

CastContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitCast(this);
	}
};

CastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitCast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

SqlParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitParenthesizedExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NormalizeContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NormalizeContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NormalizeContext.prototype.constructor = NormalizeContext;

SqlParser.NormalizeContext = NormalizeContext;

NormalizeContext.prototype.NORMALIZE = function() {
    return this.getToken(SqlParser.NORMALIZE, 0);
};

NormalizeContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

NormalizeContext.prototype.normalForm = function() {
    return this.getTypedRuleContext(NormalFormContext,0);
};
NormalizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNormalize(this);
	}
};

NormalizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNormalize(this);
	}
};

NormalizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNormalize(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DateFunctionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.fun = null; // DateFunctionNameContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateFunctionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DateFunctionContext.prototype.constructor = DateFunctionContext;

SqlParser.DateFunctionContext = DateFunctionContext;

DateFunctionContext.prototype.dateFunctionName = function() {
    return this.getTypedRuleContext(DateFunctionNameContext,0);
};

DateFunctionContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};
DateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterDateFunction(this);
	}
};

DateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitDateFunction(this);
	}
};

DateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitDateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntervalLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
IntervalLiteralContext.prototype.constructor = IntervalLiteralContext;

SqlParser.IntervalLiteralContext = IntervalLiteralContext;

IntervalLiteralContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
IntervalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterIntervalLiteral(this);
	}
};

IntervalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitIntervalLiteral(this);
	}
};

IntervalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitIntervalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

SqlParser.NumericLiteralContext = NumericLiteralContext;

NumericLiteralContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNumericLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

SqlParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

SqlParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(SqlParser.CASE, 0);
};

SimpleCaseContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(SqlParser.END, 0);
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlParser.ELSE, 0);
};

SimpleCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SimpleCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSimpleCase(this);
	}
};

SimpleCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSimpleCase(this);
	}
};

SimpleCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSimpleCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;

SqlParser.ColumnReferenceContext = ColumnReferenceContext;

ColumnReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterColumnReference(this);
	}
};

ColumnReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitColumnReference(this);
	}
};

ColumnReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitColumnReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NullLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

SqlParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.XNULL = function() {
    return this.getToken(SqlParser.XNULL, 0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNullLiteral(this);
	}
};

NullLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNullLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SqlParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSubscript(this);
	}
};

SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSubscript(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubqueryExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubqueryExpressionContext.prototype.constructor = SubqueryExpressionContext;

SqlParser.SubqueryExpressionContext = SubqueryExpressionContext;

SubqueryExpressionContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSubqueryExpression(this);
	}
};

SubqueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSubqueryExpression(this);
	}
};

SubqueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSubqueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColonCastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColonCastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColonCastContext.prototype.constructor = ColonCastContext;

SqlParser.ColonCastContext = ColonCastContext;

ColonCastContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ColonCastContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ColonCastContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterColonCast(this);
	}
};

ColonCastContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitColonCast(this);
	}
};

ColonCastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitColonCast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BinaryLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
BinaryLiteralContext.prototype.constructor = BinaryLiteralContext;

SqlParser.BinaryLiteralContext = BinaryLiteralContext;

BinaryLiteralContext.prototype.BINARY_LITERAL = function() {
    return this.getToken(SqlParser.BINARY_LITERAL, 0);
};
BinaryLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBinaryLiteral(this);
	}
};

BinaryLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBinaryLiteral(this);
	}
};

BinaryLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBinaryLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExtractContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExtractContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExtractContext.prototype.constructor = ExtractContext;

SqlParser.ExtractContext = ExtractContext;

ExtractContext.prototype.EXTRACT = function() {
    return this.getToken(SqlParser.EXTRACT, 0);
};

ExtractContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExtractContext.prototype.FROM = function() {
    return this.getToken(SqlParser.FROM, 0);
};

ExtractContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ExtractContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterExtract(this);
	}
};

ExtractContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitExtract(this);
	}
};

ExtractContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitExtract(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StringLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

SqlParser.StringLiteralContext = StringLiteralContext;

StringLiteralContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};
StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NullValueLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullValueLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NullValueLiteralContext.prototype.constructor = NullValueLiteralContext;

SqlParser.NullValueLiteralContext = NullValueLiteralContext;

NullValueLiteralContext.prototype.NULL_VALUE = function() {
    return this.getToken(SqlParser.NULL_VALUE, 0);
};
NullValueLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNullValueLiteral(this);
	}
};

NullValueLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNullValueLiteral(this);
	}
};

NullValueLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNullValueLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrayConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ArrayConstructorContext.prototype.constructor = ArrayConstructorContext;

SqlParser.ArrayConstructorContext = ArrayConstructorContext;

ArrayConstructorContext.prototype.ARRAY = function() {
    return this.getToken(SqlParser.ARRAY, 0);
};

ArrayConstructorContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};
ArrayConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterArrayConstructor(this);
	}
};

ArrayConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitArrayConstructor(this);
	}
};

ArrayConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitArrayConstructor(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionCallContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

SqlParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

FunctionCallContext.prototype.ASTERISK = function() {
    return this.getToken(SqlParser.ASTERISK, 0);
};

FunctionCallContext.prototype.filter = function() {
    return this.getTypedRuleContext(FilterContext,0);
};

FunctionCallContext.prototype.over = function() {
    return this.getTypedRuleContext(OverContext,0);
};

FunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionCallContext.prototype.callOptions = function() {
    return this.getTypedRuleContext(CallOptionsContext,0);
};

FunctionCallContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};
FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitFunctionCall(this);
	}
};

FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExistsContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExistsContext.prototype.constructor = ExistsContext;

SqlParser.ExistsContext = ExistsContext;

ExistsContext.prototype.EXISTS = function() {
    return this.getToken(SqlParser.EXISTS, 0);
};

ExistsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
ExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterExists(this);
	}
};

ExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitExists(this);
	}
};

ExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PositionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.needle = null; // ValueExpressionContext;
    this.haystack = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;

SqlParser.PositionContext = PositionContext;

PositionContext.prototype.POSITION = function() {
    return this.getToken(SqlParser.POSITION, 0);
};

PositionContext.prototype.IN = function() {
    return this.getToken(SqlParser.IN, 0);
};

PositionContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
PositionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterPosition(this);
	}
};

PositionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitPosition(this);
	}
};

PositionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitPosition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

SqlParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(SqlParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(SqlParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SearchedCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterSearchedCase(this);
	}
};

SearchedCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitSearchedCase(this);
	}
};

SearchedCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitSearchedCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PositionalParameterContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionalParameterContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionalParameterContext.prototype.constructor = PositionalParameterContext;

SqlParser.PositionalParameterContext = PositionalParameterContext;

PositionalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterPositionalParameter(this);
	}
};

PositionalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitPositionalParameter(this);
	}
};

PositionalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitPositionalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GroupingOperationContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GroupingOperationContext.prototype = Object.create(PrimaryExpressionContext.prototype);
GroupingOperationContext.prototype.constructor = GroupingOperationContext;

SqlParser.GroupingOperationContext = GroupingOperationContext;

GroupingOperationContext.prototype.GROUPING = function() {
    return this.getToken(SqlParser.GROUPING, 0);
};

GroupingOperationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GroupingOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterGroupingOperation(this);
	}
};

GroupingOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitGroupingOperation(this);
	}
};

GroupingOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitGroupingOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, SqlParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 873;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NullLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 716;
            this.match(SqlParser.XNULL);
            break;

        case 2:
            localctx = new UndefinedLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 717;
            this.match(SqlParser.UNDEFINED);
            break;

        case 3:
            localctx = new NullValueLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 718;
            this.match(SqlParser.NULL_VALUE);
            break;

        case 4:
            localctx = new IntervalLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 719;
            this.interval();
            break;

        case 5:
            localctx = new TypeConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 720;
            this.identifier();
            this.state = 721;
            this.string();
            break;

        case 6:
            localctx = new TypeConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 723;
            this.match(SqlParser.DOUBLE_PRECISION);
            this.state = 724;
            this.string();
            break;

        case 7:
            localctx = new NumericLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 725;
            this.number();
            break;

        case 8:
            localctx = new BooleanLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 726;
            this.booleanValue();
            break;

        case 9:
            localctx = new StringLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 727;
            this.string();
            break;

        case 10:
            localctx = new ArrayConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 728;
            this.match(SqlParser.ARRAY);
            this.state = 729;
            this.array();
            break;

        case 11:
            localctx = new ArrayConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 730;
            this.array();
            break;

        case 12:
            localctx = new BinaryLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 731;
            this.match(SqlParser.BINARY_LITERAL);
            break;

        case 13:
            localctx = new PositionalParameterContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 732;
            this.match(SqlParser.T__10);
            break;

        case 14:
            localctx = new NamedParameterContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 733;
            this.match(SqlParser.T__7);
            this.state = 734;
            this.match(SqlParser.INTEGER_VALUE);
            break;

        case 15:
            localctx = new NamedParameterContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 735;
            this.match(SqlParser.T__7);
            this.state = 736;
            this.identifier();
            break;

        case 16:
            localctx = new PositionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 737;
            this.match(SqlParser.POSITION);
            this.state = 738;
            this.match(SqlParser.T__1);
            this.state = 739;
            localctx.needle = this.valueExpression(0);
            this.state = 740;
            this.match(SqlParser.IN);
            this.state = 741;
            localctx.haystack = this.valueExpression(0);
            this.state = 742;
            this.match(SqlParser.T__2);
            break;

        case 17:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 744;
            this.qualifiedName();
            this.state = 745;
            this.match(SqlParser.T__1);
            this.state = 746;
            this.match(SqlParser.ASTERISK);
            this.state = 747;
            this.match(SqlParser.T__2);
            this.state = 749;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 748;
                this.filter();

            }
            this.state = 752;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
            if(la_===1) {
                this.state = 751;
                this.over();

            }
            break;

        case 18:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 754;
            this.qualifiedName();
            this.state = 755;
            this.match(SqlParser.T__1);
            this.state = 767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.T__7) | (1 << SqlParser.T__8) | (1 << SqlParser.T__10) | (1 << SqlParser.ADD) | (1 << SqlParser.ALL) | (1 << SqlParser.ANALYZE) | (1 << SqlParser.ANY) | (1 << SqlParser.ARRAY) | (1 << SqlParser.ASC) | (1 << SqlParser.AT) | (1 << SqlParser.BERNOULLI) | (1 << SqlParser.CALL) | (1 << SqlParser.CASCADE) | (1 << SqlParser.CASE) | (1 << SqlParser.CAST) | (1 << SqlParser.CATALOGS) | (1 << SqlParser.COALESCE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlParser.COLUMN - 32)) | (1 << (SqlParser.COLUMNS - 32)) | (1 << (SqlParser.COMMENT - 32)) | (1 << (SqlParser.COMMIT - 32)) | (1 << (SqlParser.COMMITTED - 32)) | (1 << (SqlParser.CURRENT - 32)) | (1 << (SqlParser.CURRENT_DATE - 32)) | (1 << (SqlParser.CURRENT_DATETIME - 32)) | (1 << (SqlParser.CURRENT_TIME - 32)) | (1 << (SqlParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlParser.DATA - 32)) | (1 << (SqlParser.DATE - 32)) | (1 << (SqlParser.DAY - 32)) | (1 << (SqlParser.DESC - 32)) | (1 << (SqlParser.DISTINCT - 32)) | (1 << (SqlParser.DISTRIBUTED - 32)) | (1 << (SqlParser.EXCLUDING - 32)) | (1 << (SqlParser.EXISTS - 32)) | (1 << (SqlParser.EXPLAIN - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlParser.EXTRACT - 64)) | (1 << (SqlParser.BOOL_FALSE - 64)) | (1 << (SqlParser.FILTER - 64)) | (1 << (SqlParser.FIRST - 64)) | (1 << (SqlParser.FOLLOWING - 64)) | (1 << (SqlParser.FORMAT - 64)) | (1 << (SqlParser.FUNCTIONS - 64)) | (1 << (SqlParser.GRANT - 64)) | (1 << (SqlParser.GRANTS - 64)) | (1 << (SqlParser.GRAPHVIZ - 64)) | (1 << (SqlParser.GROUPING - 64)) | (1 << (SqlParser.HOUR - 64)) | (1 << (SqlParser.IF - 64)) | (1 << (SqlParser.INCLUDING - 64)) | (1 << (SqlParser.INPUT - 64)) | (1 << (SqlParser.INTEGER - 64)) | (1 << (SqlParser.INTERVAL - 64)) | (1 << (SqlParser.ISOLATION - 64)) | (1 << (SqlParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlParser.LATERAL - 96)) | (1 << (SqlParser.LEVEL - 96)) | (1 << (SqlParser.LIMIT - 96)) | (1 << (SqlParser.LOGICAL - 96)) | (1 << (SqlParser.MAP - 96)) | (1 << (SqlParser.MINUTE - 96)) | (1 << (SqlParser.MONTH - 96)) | (1 << (SqlParser.NFC - 96)) | (1 << (SqlParser.NFD - 96)) | (1 << (SqlParser.NFKC - 96)) | (1 << (SqlParser.NFKD - 96)) | (1 << (SqlParser.NO - 96)) | (1 << (SqlParser.NORMALIZE - 96)) | (1 << (SqlParser.NOT - 96)) | (1 << (SqlParser.XNULL - 96)) | (1 << (SqlParser.NULLIF - 96)) | (1 << (SqlParser.NULLS - 96)) | (1 << (SqlParser.NULL_VALUE - 96)) | (1 << (SqlParser.OFFSET - 96)) | (1 << (SqlParser.ONLY - 96)) | (1 << (SqlParser.OPTION - 96)) | (1 << (SqlParser.ORDINALITY - 96)) | (1 << (SqlParser.OUTPUT - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlParser.OVER - 128)) | (1 << (SqlParser.PARTITION - 128)) | (1 << (SqlParser.PARTITIONS - 128)) | (1 << (SqlParser.POSITION - 128)) | (1 << (SqlParser.PRECEDING - 128)) | (1 << (SqlParser.PRIVILEGES - 128)) | (1 << (SqlParser.PROPERTIES - 128)) | (1 << (SqlParser.PUBLIC - 128)) | (1 << (SqlParser.RANGE - 128)) | (1 << (SqlParser.READ - 128)) | (1 << (SqlParser.RENAME - 128)) | (1 << (SqlParser.REPEATABLE - 128)) | (1 << (SqlParser.REPLACE - 128)) | (1 << (SqlParser.RESET - 128)) | (1 << (SqlParser.RESTRICT - 128)) | (1 << (SqlParser.REVOKE - 128)) | (1 << (SqlParser.ROLLBACK - 128)) | (1 << (SqlParser.ROW - 128)) | (1 << (SqlParser.ROWS - 128)) | (1 << (SqlParser.SCHEMA - 128)) | (1 << (SqlParser.SCHEMAS - 128)) | (1 << (SqlParser.SECOND - 128)) | (1 << (SqlParser.SERIALIZABLE - 128)) | (1 << (SqlParser.SESSION - 128)) | (1 << (SqlParser.SET - 128)) | (1 << (SqlParser.SETS - 128)) | (1 << (SqlParser.SHOW - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlParser.SMALLINT - 160)) | (1 << (SqlParser.SOME - 160)) | (1 << (SqlParser.START - 160)) | (1 << (SqlParser.STATIC_CAST - 160)) | (1 << (SqlParser.STATS - 160)) | (1 << (SqlParser.SUBSTRING - 160)) | (1 << (SqlParser.SYSTEM - 160)) | (1 << (SqlParser.TABLES - 160)) | (1 << (SqlParser.TABLESAMPLE - 160)) | (1 << (SqlParser.TEXT - 160)) | (1 << (SqlParser.TIME - 160)) | (1 << (SqlParser.TIMESTAMP - 160)) | (1 << (SqlParser.TINYINT - 160)) | (1 << (SqlParser.TO - 160)) | (1 << (SqlParser.TRANSACTION - 160)) | (1 << (SqlParser.BOOL_TRUE - 160)) | (1 << (SqlParser.TRY_CAST - 160)) | (1 << (SqlParser.TRY_STATIC_CAST - 160)) | (1 << (SqlParser.TYPE - 160)) | (1 << (SqlParser.UNBOUNDED - 160)) | (1 << (SqlParser.UNCOMMITTED - 160)) | (1 << (SqlParser.UNDEFINED - 160)) | (1 << (SqlParser.USE - 160)) | (1 << (SqlParser.VALIDATE - 160)) | (1 << (SqlParser.VALUES - 160)) | (1 << (SqlParser.VERBOSE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlParser.VIEW - 192)) | (1 << (SqlParser.WORK - 192)) | (1 << (SqlParser.WRITE - 192)) | (1 << (SqlParser.YEAR - 192)) | (1 << (SqlParser.ZONE - 192)) | (1 << (SqlParser.PLUS - 192)) | (1 << (SqlParser.MINUS - 192)) | (1 << (SqlParser.STRING - 192)) | (1 << (SqlParser.UNICODE_STR - 192)) | (1 << (SqlParser.BINARY_LITERAL - 192)) | (1 << (SqlParser.INTEGER_VALUE - 192)) | (1 << (SqlParser.DECIMAL_VALUE - 192)) | (1 << (SqlParser.IDENTIFIER - 192)) | (1 << (SqlParser.QUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.DOUBLE_PRECISION - 192)))) !== 0)) {
                this.state = 757;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
                if(la_===1) {
                    this.state = 756;
                    this.setQuantifier();

                }
                this.state = 759;
                this.expression();
                this.state = 764;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlParser.T__3) {
                    this.state = 760;
                    this.match(SqlParser.T__3);
                    this.state = 761;
                    this.expression();
                    this.state = 766;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 769;
            this.match(SqlParser.T__2);
            this.state = 771;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
            if(la_===1) {
                this.state = 770;
                this.callOptions();

            }
            this.state = 774;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
            if(la_===1) {
                this.state = 773;
                this.filter();

            }
            this.state = 777;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
            if(la_===1) {
                this.state = 776;
                this.over();

            }
            break;

        case 19:
            localctx = new SubqueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 779;
            this.match(SqlParser.T__1);
            this.state = 780;
            this.query();
            this.state = 781;
            this.match(SqlParser.T__2);
            break;

        case 20:
            localctx = new ExistsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 783;
            this.match(SqlParser.EXISTS);
            this.state = 784;
            this.match(SqlParser.T__1);
            this.state = 785;
            this.query();
            this.state = 786;
            this.match(SqlParser.T__2);
            break;

        case 21:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 788;
            this.match(SqlParser.CASE);
            this.state = 789;
            this.valueExpression(0);
            this.state = 791; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 790;
                this.whenClause();
                this.state = 793; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlParser.WHEN);
            this.state = 797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.ELSE) {
                this.state = 795;
                this.match(SqlParser.ELSE);
                this.state = 796;
                localctx.elseExpression = this.expression();
            }

            this.state = 799;
            this.match(SqlParser.END);
            break;

        case 22:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 801;
            this.match(SqlParser.CASE);
            this.state = 803; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 802;
                this.whenClause();
                this.state = 805; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlParser.WHEN);
            this.state = 809;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.ELSE) {
                this.state = 807;
                this.match(SqlParser.ELSE);
                this.state = 808;
                localctx.elseExpression = this.expression();
            }

            this.state = 811;
            this.match(SqlParser.END);
            break;

        case 23:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 813;
            _la = this._input.LA(1);
            if(!(_la===SqlParser.CAST || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (SqlParser.STATIC_CAST - 163)) | (1 << (SqlParser.TRY_CAST - 163)) | (1 << (SqlParser.TRY_STATIC_CAST - 163)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 814;
            this.match(SqlParser.T__1);
            this.state = 815;
            this.expression();
            this.state = 816;
            this.match(SqlParser.AS);
            this.state = 817;
            this.type();
            this.state = 818;
            this.match(SqlParser.T__2);
            break;

        case 24:
            localctx = new ColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 820;
            this.identifier();
            break;

        case 25:
            localctx = new SubstringContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 821;
            this.match(SqlParser.SUBSTRING);
            this.state = 822;
            this.match(SqlParser.T__1);
            this.state = 823;
            localctx.expr = this.valueExpression(0);
            this.state = 824;
            this.match(SqlParser.FROM);
            this.state = 825;
            localctx.start = this.valueExpression(0);
            this.state = 828;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.FOR) {
                this.state = 826;
                this.match(SqlParser.FOR);
                this.state = 827;
                localctx.len = this.valueExpression(0);
            }

            this.state = 830;
            this.match(SqlParser.T__2);
            break;

        case 26:
            localctx = new NormalizeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 832;
            this.match(SqlParser.NORMALIZE);
            this.state = 833;
            this.match(SqlParser.T__1);
            this.state = 834;
            this.valueExpression(0);
            this.state = 837;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.T__3) {
                this.state = 835;
                this.match(SqlParser.T__3);
                this.state = 836;
                this.normalForm();
            }

            this.state = 839;
            this.match(SqlParser.T__2);
            break;

        case 27:
            localctx = new ExtractContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 841;
            this.match(SqlParser.EXTRACT);
            this.state = 842;
            this.match(SqlParser.T__1);
            this.state = 843;
            this.identifier();
            this.state = 844;
            this.match(SqlParser.FROM);
            this.state = 845;
            this.valueExpression(0);
            this.state = 846;
            this.match(SqlParser.T__2);
            break;

        case 28:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 848;
            this.match(SqlParser.T__1);
            this.state = 849;
            this.expression();
            this.state = 850;
            this.match(SqlParser.T__2);
            break;

        case 29:
            localctx = new GroupingOperationContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 852;
            this.match(SqlParser.GROUPING);
            this.state = 853;
            this.match(SqlParser.T__1);
            this.state = 862;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.T__7) | (1 << SqlParser.T__8) | (1 << SqlParser.T__10) | (1 << SqlParser.ADD) | (1 << SqlParser.ALL) | (1 << SqlParser.ANALYZE) | (1 << SqlParser.ANY) | (1 << SqlParser.ARRAY) | (1 << SqlParser.ASC) | (1 << SqlParser.AT) | (1 << SqlParser.BERNOULLI) | (1 << SqlParser.CALL) | (1 << SqlParser.CASCADE) | (1 << SqlParser.CASE) | (1 << SqlParser.CAST) | (1 << SqlParser.CATALOGS) | (1 << SqlParser.COALESCE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlParser.COLUMN - 32)) | (1 << (SqlParser.COLUMNS - 32)) | (1 << (SqlParser.COMMENT - 32)) | (1 << (SqlParser.COMMIT - 32)) | (1 << (SqlParser.COMMITTED - 32)) | (1 << (SqlParser.CURRENT - 32)) | (1 << (SqlParser.CURRENT_DATE - 32)) | (1 << (SqlParser.CURRENT_DATETIME - 32)) | (1 << (SqlParser.CURRENT_TIME - 32)) | (1 << (SqlParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlParser.DATA - 32)) | (1 << (SqlParser.DATE - 32)) | (1 << (SqlParser.DAY - 32)) | (1 << (SqlParser.DESC - 32)) | (1 << (SqlParser.DISTRIBUTED - 32)) | (1 << (SqlParser.EXCLUDING - 32)) | (1 << (SqlParser.EXISTS - 32)) | (1 << (SqlParser.EXPLAIN - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlParser.EXTRACT - 64)) | (1 << (SqlParser.BOOL_FALSE - 64)) | (1 << (SqlParser.FILTER - 64)) | (1 << (SqlParser.FIRST - 64)) | (1 << (SqlParser.FOLLOWING - 64)) | (1 << (SqlParser.FORMAT - 64)) | (1 << (SqlParser.FUNCTIONS - 64)) | (1 << (SqlParser.GRANT - 64)) | (1 << (SqlParser.GRANTS - 64)) | (1 << (SqlParser.GRAPHVIZ - 64)) | (1 << (SqlParser.GROUPING - 64)) | (1 << (SqlParser.HOUR - 64)) | (1 << (SqlParser.IF - 64)) | (1 << (SqlParser.INCLUDING - 64)) | (1 << (SqlParser.INPUT - 64)) | (1 << (SqlParser.INTEGER - 64)) | (1 << (SqlParser.INTERVAL - 64)) | (1 << (SqlParser.ISOLATION - 64)) | (1 << (SqlParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlParser.LATERAL - 96)) | (1 << (SqlParser.LEVEL - 96)) | (1 << (SqlParser.LIMIT - 96)) | (1 << (SqlParser.LOGICAL - 96)) | (1 << (SqlParser.MAP - 96)) | (1 << (SqlParser.MINUTE - 96)) | (1 << (SqlParser.MONTH - 96)) | (1 << (SqlParser.NFC - 96)) | (1 << (SqlParser.NFD - 96)) | (1 << (SqlParser.NFKC - 96)) | (1 << (SqlParser.NFKD - 96)) | (1 << (SqlParser.NO - 96)) | (1 << (SqlParser.NORMALIZE - 96)) | (1 << (SqlParser.NOT - 96)) | (1 << (SqlParser.XNULL - 96)) | (1 << (SqlParser.NULLIF - 96)) | (1 << (SqlParser.NULLS - 96)) | (1 << (SqlParser.NULL_VALUE - 96)) | (1 << (SqlParser.OFFSET - 96)) | (1 << (SqlParser.ONLY - 96)) | (1 << (SqlParser.OPTION - 96)) | (1 << (SqlParser.ORDINALITY - 96)) | (1 << (SqlParser.OUTPUT - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlParser.OVER - 128)) | (1 << (SqlParser.PARTITION - 128)) | (1 << (SqlParser.PARTITIONS - 128)) | (1 << (SqlParser.POSITION - 128)) | (1 << (SqlParser.PRECEDING - 128)) | (1 << (SqlParser.PRIVILEGES - 128)) | (1 << (SqlParser.PROPERTIES - 128)) | (1 << (SqlParser.PUBLIC - 128)) | (1 << (SqlParser.RANGE - 128)) | (1 << (SqlParser.READ - 128)) | (1 << (SqlParser.RENAME - 128)) | (1 << (SqlParser.REPEATABLE - 128)) | (1 << (SqlParser.REPLACE - 128)) | (1 << (SqlParser.RESET - 128)) | (1 << (SqlParser.RESTRICT - 128)) | (1 << (SqlParser.REVOKE - 128)) | (1 << (SqlParser.ROLLBACK - 128)) | (1 << (SqlParser.ROW - 128)) | (1 << (SqlParser.ROWS - 128)) | (1 << (SqlParser.SCHEMA - 128)) | (1 << (SqlParser.SCHEMAS - 128)) | (1 << (SqlParser.SECOND - 128)) | (1 << (SqlParser.SERIALIZABLE - 128)) | (1 << (SqlParser.SESSION - 128)) | (1 << (SqlParser.SET - 128)) | (1 << (SqlParser.SETS - 128)) | (1 << (SqlParser.SHOW - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlParser.SMALLINT - 160)) | (1 << (SqlParser.SOME - 160)) | (1 << (SqlParser.START - 160)) | (1 << (SqlParser.STATIC_CAST - 160)) | (1 << (SqlParser.STATS - 160)) | (1 << (SqlParser.SUBSTRING - 160)) | (1 << (SqlParser.SYSTEM - 160)) | (1 << (SqlParser.TABLES - 160)) | (1 << (SqlParser.TABLESAMPLE - 160)) | (1 << (SqlParser.TEXT - 160)) | (1 << (SqlParser.TIME - 160)) | (1 << (SqlParser.TIMESTAMP - 160)) | (1 << (SqlParser.TINYINT - 160)) | (1 << (SqlParser.TO - 160)) | (1 << (SqlParser.TRANSACTION - 160)) | (1 << (SqlParser.BOOL_TRUE - 160)) | (1 << (SqlParser.TRY_CAST - 160)) | (1 << (SqlParser.TRY_STATIC_CAST - 160)) | (1 << (SqlParser.TYPE - 160)) | (1 << (SqlParser.UNBOUNDED - 160)) | (1 << (SqlParser.UNCOMMITTED - 160)) | (1 << (SqlParser.UNDEFINED - 160)) | (1 << (SqlParser.USE - 160)) | (1 << (SqlParser.VALIDATE - 160)) | (1 << (SqlParser.VALUES - 160)) | (1 << (SqlParser.VERBOSE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlParser.VIEW - 192)) | (1 << (SqlParser.WORK - 192)) | (1 << (SqlParser.WRITE - 192)) | (1 << (SqlParser.YEAR - 192)) | (1 << (SqlParser.ZONE - 192)) | (1 << (SqlParser.PLUS - 192)) | (1 << (SqlParser.MINUS - 192)) | (1 << (SqlParser.STRING - 192)) | (1 << (SqlParser.UNICODE_STR - 192)) | (1 << (SqlParser.BINARY_LITERAL - 192)) | (1 << (SqlParser.INTEGER_VALUE - 192)) | (1 << (SqlParser.DECIMAL_VALUE - 192)) | (1 << (SqlParser.IDENTIFIER - 192)) | (1 << (SqlParser.QUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.DOUBLE_PRECISION - 192)))) !== 0)) {
                this.state = 854;
                this.expression();
                this.state = 859;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlParser.T__3) {
                    this.state = 855;
                    this.match(SqlParser.T__3);
                    this.state = 856;
                    this.expression();
                    this.state = 861;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 864;
            this.match(SqlParser.T__2);
            break;

        case 30:
            localctx = new DateFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 865;
            localctx.fun = this.dateFunctionName();
            this.state = 871;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
            if(la_===1) {
                this.state = 866;
                this.match(SqlParser.T__1);
                this.state = 868;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlParser.STRING || _la===SqlParser.UNICODE_STR) {
                    this.state = 867;
                    this.string();
                }

                this.state = 870;
                this.match(SqlParser.T__2);

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 888;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 886;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ColonCastContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_primaryExpression);
                    this.state = 875;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 876;
                    this.match(SqlParser.T__11);
                    this.state = 877;
                    this.type();
                    break;

                case 2:
                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_primaryExpression);
                    this.state = 878;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 879;
                    this.match(SqlParser.T__8);
                    this.state = 880;
                    localctx.index = this.valueExpression(0);
                    this.state = 881;
                    this.match(SqlParser.T__9);
                    break;

                case 3:
                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.base = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlParser.RULE_primaryExpression);
                    this.state = 883;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 884;
                    this.match(SqlParser.T__4);
                    this.state = 885;
                    localctx.fieldName = this.identifier();
                    break;

                } 
            }
            this.state = 890;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitArray(this);
	}
};

ArrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitArray(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.ArrayContext = ArrayContext;

SqlParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SqlParser.RULE_array);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 891;
        this.match(SqlParser.T__8);
        this.state = 900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.T__7) | (1 << SqlParser.T__8) | (1 << SqlParser.T__10) | (1 << SqlParser.ADD) | (1 << SqlParser.ALL) | (1 << SqlParser.ANALYZE) | (1 << SqlParser.ANY) | (1 << SqlParser.ARRAY) | (1 << SqlParser.ASC) | (1 << SqlParser.AT) | (1 << SqlParser.BERNOULLI) | (1 << SqlParser.CALL) | (1 << SqlParser.CASCADE) | (1 << SqlParser.CASE) | (1 << SqlParser.CAST) | (1 << SqlParser.CATALOGS) | (1 << SqlParser.COALESCE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlParser.COLUMN - 32)) | (1 << (SqlParser.COLUMNS - 32)) | (1 << (SqlParser.COMMENT - 32)) | (1 << (SqlParser.COMMIT - 32)) | (1 << (SqlParser.COMMITTED - 32)) | (1 << (SqlParser.CURRENT - 32)) | (1 << (SqlParser.CURRENT_DATE - 32)) | (1 << (SqlParser.CURRENT_DATETIME - 32)) | (1 << (SqlParser.CURRENT_TIME - 32)) | (1 << (SqlParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlParser.DATA - 32)) | (1 << (SqlParser.DATE - 32)) | (1 << (SqlParser.DAY - 32)) | (1 << (SqlParser.DESC - 32)) | (1 << (SqlParser.DISTRIBUTED - 32)) | (1 << (SqlParser.EXCLUDING - 32)) | (1 << (SqlParser.EXISTS - 32)) | (1 << (SqlParser.EXPLAIN - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlParser.EXTRACT - 64)) | (1 << (SqlParser.BOOL_FALSE - 64)) | (1 << (SqlParser.FILTER - 64)) | (1 << (SqlParser.FIRST - 64)) | (1 << (SqlParser.FOLLOWING - 64)) | (1 << (SqlParser.FORMAT - 64)) | (1 << (SqlParser.FUNCTIONS - 64)) | (1 << (SqlParser.GRANT - 64)) | (1 << (SqlParser.GRANTS - 64)) | (1 << (SqlParser.GRAPHVIZ - 64)) | (1 << (SqlParser.GROUPING - 64)) | (1 << (SqlParser.HOUR - 64)) | (1 << (SqlParser.IF - 64)) | (1 << (SqlParser.INCLUDING - 64)) | (1 << (SqlParser.INPUT - 64)) | (1 << (SqlParser.INTEGER - 64)) | (1 << (SqlParser.INTERVAL - 64)) | (1 << (SqlParser.ISOLATION - 64)) | (1 << (SqlParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlParser.LATERAL - 96)) | (1 << (SqlParser.LEVEL - 96)) | (1 << (SqlParser.LIMIT - 96)) | (1 << (SqlParser.LOGICAL - 96)) | (1 << (SqlParser.MAP - 96)) | (1 << (SqlParser.MINUTE - 96)) | (1 << (SqlParser.MONTH - 96)) | (1 << (SqlParser.NFC - 96)) | (1 << (SqlParser.NFD - 96)) | (1 << (SqlParser.NFKC - 96)) | (1 << (SqlParser.NFKD - 96)) | (1 << (SqlParser.NO - 96)) | (1 << (SqlParser.NORMALIZE - 96)) | (1 << (SqlParser.NOT - 96)) | (1 << (SqlParser.XNULL - 96)) | (1 << (SqlParser.NULLIF - 96)) | (1 << (SqlParser.NULLS - 96)) | (1 << (SqlParser.NULL_VALUE - 96)) | (1 << (SqlParser.OFFSET - 96)) | (1 << (SqlParser.ONLY - 96)) | (1 << (SqlParser.OPTION - 96)) | (1 << (SqlParser.ORDINALITY - 96)) | (1 << (SqlParser.OUTPUT - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlParser.OVER - 128)) | (1 << (SqlParser.PARTITION - 128)) | (1 << (SqlParser.PARTITIONS - 128)) | (1 << (SqlParser.POSITION - 128)) | (1 << (SqlParser.PRECEDING - 128)) | (1 << (SqlParser.PRIVILEGES - 128)) | (1 << (SqlParser.PROPERTIES - 128)) | (1 << (SqlParser.PUBLIC - 128)) | (1 << (SqlParser.RANGE - 128)) | (1 << (SqlParser.READ - 128)) | (1 << (SqlParser.RENAME - 128)) | (1 << (SqlParser.REPEATABLE - 128)) | (1 << (SqlParser.REPLACE - 128)) | (1 << (SqlParser.RESET - 128)) | (1 << (SqlParser.RESTRICT - 128)) | (1 << (SqlParser.REVOKE - 128)) | (1 << (SqlParser.ROLLBACK - 128)) | (1 << (SqlParser.ROW - 128)) | (1 << (SqlParser.ROWS - 128)) | (1 << (SqlParser.SCHEMA - 128)) | (1 << (SqlParser.SCHEMAS - 128)) | (1 << (SqlParser.SECOND - 128)) | (1 << (SqlParser.SERIALIZABLE - 128)) | (1 << (SqlParser.SESSION - 128)) | (1 << (SqlParser.SET - 128)) | (1 << (SqlParser.SETS - 128)) | (1 << (SqlParser.SHOW - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlParser.SMALLINT - 160)) | (1 << (SqlParser.SOME - 160)) | (1 << (SqlParser.START - 160)) | (1 << (SqlParser.STATIC_CAST - 160)) | (1 << (SqlParser.STATS - 160)) | (1 << (SqlParser.SUBSTRING - 160)) | (1 << (SqlParser.SYSTEM - 160)) | (1 << (SqlParser.TABLES - 160)) | (1 << (SqlParser.TABLESAMPLE - 160)) | (1 << (SqlParser.TEXT - 160)) | (1 << (SqlParser.TIME - 160)) | (1 << (SqlParser.TIMESTAMP - 160)) | (1 << (SqlParser.TINYINT - 160)) | (1 << (SqlParser.TO - 160)) | (1 << (SqlParser.TRANSACTION - 160)) | (1 << (SqlParser.BOOL_TRUE - 160)) | (1 << (SqlParser.TRY_CAST - 160)) | (1 << (SqlParser.TRY_STATIC_CAST - 160)) | (1 << (SqlParser.TYPE - 160)) | (1 << (SqlParser.UNBOUNDED - 160)) | (1 << (SqlParser.UNCOMMITTED - 160)) | (1 << (SqlParser.UNDEFINED - 160)) | (1 << (SqlParser.USE - 160)) | (1 << (SqlParser.VALIDATE - 160)) | (1 << (SqlParser.VALUES - 160)) | (1 << (SqlParser.VERBOSE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlParser.VIEW - 192)) | (1 << (SqlParser.WORK - 192)) | (1 << (SqlParser.WRITE - 192)) | (1 << (SqlParser.YEAR - 192)) | (1 << (SqlParser.ZONE - 192)) | (1 << (SqlParser.PLUS - 192)) | (1 << (SqlParser.MINUS - 192)) | (1 << (SqlParser.STRING - 192)) | (1 << (SqlParser.UNICODE_STR - 192)) | (1 << (SqlParser.BINARY_LITERAL - 192)) | (1 << (SqlParser.INTEGER_VALUE - 192)) | (1 << (SqlParser.DECIMAL_VALUE - 192)) | (1 << (SqlParser.IDENTIFIER - 192)) | (1 << (SqlParser.QUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (SqlParser.DOUBLE_PRECISION - 192)))) !== 0)) {
            this.state = 892;
            this.expression();
            this.state = 897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlParser.T__3) {
                this.state = 893;
                this.match(SqlParser.T__3);
                this.state = 894;
                this.expression();
                this.state = 899;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 902;
        this.match(SqlParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;


 
StringContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnicodeStringLiteralContext(parser, ctx) {
	StringContext.call(this, parser);
    StringContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnicodeStringLiteralContext.prototype = Object.create(StringContext.prototype);
UnicodeStringLiteralContext.prototype.constructor = UnicodeStringLiteralContext;

SqlParser.UnicodeStringLiteralContext = UnicodeStringLiteralContext;

UnicodeStringLiteralContext.prototype.UNICODE_STR = function() {
    return this.getToken(SqlParser.UNICODE_STR, 0);
};

UnicodeStringLiteralContext.prototype.UESCAPE = function() {
    return this.getToken(SqlParser.UESCAPE, 0);
};

UnicodeStringLiteralContext.prototype.STRING = function() {
    return this.getToken(SqlParser.STRING, 0);
};
UnicodeStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterUnicodeStringLiteral(this);
	}
};

UnicodeStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitUnicodeStringLiteral(this);
	}
};

UnicodeStringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitUnicodeStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BasicStringLiteralContext(parser, ctx) {
	StringContext.call(this, parser);
    StringContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BasicStringLiteralContext.prototype = Object.create(StringContext.prototype);
BasicStringLiteralContext.prototype.constructor = BasicStringLiteralContext;

SqlParser.BasicStringLiteralContext = BasicStringLiteralContext;

BasicStringLiteralContext.prototype.STRING = function() {
    return this.getToken(SqlParser.STRING, 0);
};
BasicStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBasicStringLiteral(this);
	}
};

BasicStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBasicStringLiteral(this);
	}
};

BasicStringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBasicStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.StringContext = StringContext;

SqlParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SqlParser.RULE_string);
    try {
        this.state = 910;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.STRING:
            localctx = new BasicStringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 904;
            this.match(SqlParser.STRING);
            break;
        case SqlParser.UNICODE_STR:
            localctx = new UnicodeStringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 905;
            this.match(SqlParser.UNICODE_STR);
            this.state = 908;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
            if(la_===1) {
                this.state = 906;
                this.match(SqlParser.UESCAPE);
                this.state = 907;
                this.match(SqlParser.STRING);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQ = function() {
    return this.getToken(SqlParser.EQ, 0);
};

ComparisonOperatorContext.prototype.NEQ = function() {
    return this.getToken(SqlParser.NEQ, 0);
};

ComparisonOperatorContext.prototype.LT = function() {
    return this.getToken(SqlParser.LT, 0);
};

ComparisonOperatorContext.prototype.LTE = function() {
    return this.getToken(SqlParser.LTE, 0);
};

ComparisonOperatorContext.prototype.GT = function() {
    return this.getToken(SqlParser.GT, 0);
};

ComparisonOperatorContext.prototype.GTE = function() {
    return this.getToken(SqlParser.GTE, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitComparisonOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.ComparisonOperatorContext = ComparisonOperatorContext;

SqlParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SqlParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 912;
        _la = this._input.LA(1);
        if(!(((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (SqlParser.EQ - 200)) | (1 << (SqlParser.NEQ - 200)) | (1 << (SqlParser.LT - 200)) | (1 << (SqlParser.LTE - 200)) | (1 << (SqlParser.GT - 200)) | (1 << (SqlParser.GTE - 200)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_comparisonQuantifier;
    return this;
}

ComparisonQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonQuantifierContext.prototype.constructor = ComparisonQuantifierContext;

ComparisonQuantifierContext.prototype.ALL = function() {
    return this.getToken(SqlParser.ALL, 0);
};

ComparisonQuantifierContext.prototype.SOME = function() {
    return this.getToken(SqlParser.SOME, 0);
};

ComparisonQuantifierContext.prototype.ANY = function() {
    return this.getToken(SqlParser.ANY, 0);
};

ComparisonQuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterComparisonQuantifier(this);
	}
};

ComparisonQuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitComparisonQuantifier(this);
	}
};

ComparisonQuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitComparisonQuantifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.ComparisonQuantifierContext = ComparisonQuantifierContext;

SqlParser.prototype.comparisonQuantifier = function() {

    var localctx = new ComparisonQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SqlParser.RULE_comparisonQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 914;
        _la = this._input.LA(1);
        if(!(_la===SqlParser.ALL || _la===SqlParser.ANY || _la===SqlParser.SOME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_booleanValue;
    return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.BOOL_TRUE = function() {
    return this.getToken(SqlParser.BOOL_TRUE, 0);
};

BooleanValueContext.prototype.BOOL_FALSE = function() {
    return this.getToken(SqlParser.BOOL_FALSE, 0);
};

BooleanValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBooleanValue(this);
	}
};

BooleanValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBooleanValue(this);
	}
};

BooleanValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBooleanValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.BooleanValueContext = BooleanValueContext;

SqlParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SqlParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        _la = this._input.LA(1);
        if(!(_la===SqlParser.BOOL_FALSE || _la===SqlParser.BOOL_TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DateFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_dateFunctionName;
    return this;
}

DateFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DateFunctionNameContext.prototype.constructor = DateFunctionNameContext;

DateFunctionNameContext.prototype.CURRENT_DATE = function() {
    return this.getToken(SqlParser.CURRENT_DATE, 0);
};

DateFunctionNameContext.prototype.CURRENT_DATETIME = function() {
    return this.getToken(SqlParser.CURRENT_DATETIME, 0);
};

DateFunctionNameContext.prototype.CURRENT_TIME = function() {
    return this.getToken(SqlParser.CURRENT_TIME, 0);
};

DateFunctionNameContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(SqlParser.CURRENT_TIMESTAMP, 0);
};

DateFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterDateFunctionName(this);
	}
};

DateFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitDateFunctionName(this);
	}
};

DateFunctionNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitDateFunctionName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.DateFunctionNameContext = DateFunctionNameContext;

SqlParser.prototype.dateFunctionName = function() {

    var localctx = new DateFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SqlParser.RULE_dateFunctionName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        _la = this._input.LA(1);
        if(!(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (SqlParser.CURRENT_DATE - 42)) | (1 << (SqlParser.CURRENT_DATETIME - 42)) | (1 << (SqlParser.CURRENT_TIME - 42)) | (1 << (SqlParser.CURRENT_TIMESTAMP - 42)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_interval;
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;


 
IntervalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StringOnlyIntervalContext(parser, ctx) {
	IntervalContext.call(this, parser);
    IntervalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringOnlyIntervalContext.prototype = Object.create(IntervalContext.prototype);
StringOnlyIntervalContext.prototype.constructor = StringOnlyIntervalContext;

SqlParser.StringOnlyIntervalContext = StringOnlyIntervalContext;

StringOnlyIntervalContext.prototype.INTERVAL = function() {
    return this.getToken(SqlParser.INTERVAL, 0);
};

StringOnlyIntervalContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};
StringOnlyIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterStringOnlyInterval(this);
	}
};

StringOnlyIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitStringOnlyInterval(this);
	}
};

StringOnlyIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitStringOnlyInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StringIntervalContext(parser, ctx) {
	IntervalContext.call(this, parser);
    this.from = null; // IntervalFieldContext;
    this.to = null; // IntervalFieldContext;
    IntervalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringIntervalContext.prototype = Object.create(IntervalContext.prototype);
StringIntervalContext.prototype.constructor = StringIntervalContext;

SqlParser.StringIntervalContext = StringIntervalContext;

StringIntervalContext.prototype.INTERVAL = function() {
    return this.getToken(SqlParser.INTERVAL, 0);
};

StringIntervalContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

StringIntervalContext.prototype.intervalField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalFieldContext);
    } else {
        return this.getTypedRuleContext(IntervalFieldContext,i);
    }
};

StringIntervalContext.prototype.TO = function() {
    return this.getToken(SqlParser.TO, 0);
};
StringIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterStringInterval(this);
	}
};

StringIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitStringInterval(this);
	}
};

StringIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitStringInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericIntervalContext(parser, ctx) {
	IntervalContext.call(this, parser);
    this.integralPart = null; // Token;
    this.fractionalPart = null; // Token;
    this.field = null; // IntervalFieldContext;
    IntervalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericIntervalContext.prototype = Object.create(IntervalContext.prototype);
NumericIntervalContext.prototype.constructor = NumericIntervalContext;

SqlParser.NumericIntervalContext = NumericIntervalContext;

NumericIntervalContext.prototype.INTERVAL = function() {
    return this.getToken(SqlParser.INTERVAL, 0);
};

NumericIntervalContext.prototype.INTEGER_VALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlParser.INTEGER_VALUE);
    } else {
        return this.getToken(SqlParser.INTEGER_VALUE, i);
    }
};


NumericIntervalContext.prototype.intervalField = function() {
    return this.getTypedRuleContext(IntervalFieldContext,0);
};

NumericIntervalContext.prototype.PLUS = function() {
    return this.getToken(SqlParser.PLUS, 0);
};

NumericIntervalContext.prototype.MINUS = function() {
    return this.getToken(SqlParser.MINUS, 0);
};
NumericIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNumericInterval(this);
	}
};

NumericIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNumericInterval(this);
	}
};

NumericIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNumericInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.IntervalContext = IntervalContext;

SqlParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SqlParser.RULE_interval);
    var _la = 0; // Token type
    try {
        this.state = 939;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        switch(la_) {
        case 1:
            localctx = new StringIntervalContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 920;
            this.match(SqlParser.INTERVAL);
            this.state = 921;
            this.string();
            this.state = 922;
            localctx.from = this.intervalField();
            this.state = 925;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
            if(la_===1) {
                this.state = 923;
                this.match(SqlParser.TO);
                this.state = 924;
                localctx.to = this.intervalField();

            }
            break;

        case 2:
            localctx = new NumericIntervalContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 927;
            this.match(SqlParser.INTERVAL);
            this.state = 929;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.PLUS || _la===SqlParser.MINUS) {
                this.state = 928;
                _la = this._input.LA(1);
                if(!(_la===SqlParser.PLUS || _la===SqlParser.MINUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 931;
            localctx.integralPart = this.match(SqlParser.INTEGER_VALUE);
            this.state = 934;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlParser.T__4) {
                this.state = 932;
                this.match(SqlParser.T__4);
                this.state = 933;
                localctx.fractionalPart = this.match(SqlParser.INTEGER_VALUE);
            }

            this.state = 936;
            localctx.field = this.intervalField();
            break;

        case 3:
            localctx = new StringOnlyIntervalContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 937;
            this.match(SqlParser.INTERVAL);
            this.state = 938;
            this.string();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_intervalField;
    return this;
}

IntervalFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalFieldContext.prototype.constructor = IntervalFieldContext;

IntervalFieldContext.prototype.YEAR = function() {
    return this.getToken(SqlParser.YEAR, 0);
};

IntervalFieldContext.prototype.MONTH = function() {
    return this.getToken(SqlParser.MONTH, 0);
};

IntervalFieldContext.prototype.DAY = function() {
    return this.getToken(SqlParser.DAY, 0);
};

IntervalFieldContext.prototype.HOUR = function() {
    return this.getToken(SqlParser.HOUR, 0);
};

IntervalFieldContext.prototype.MINUTE = function() {
    return this.getToken(SqlParser.MINUTE, 0);
};

IntervalFieldContext.prototype.SECOND = function() {
    return this.getToken(SqlParser.SECOND, 0);
};

IntervalFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterIntervalField(this);
	}
};

IntervalFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitIntervalField(this);
	}
};

IntervalFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitIntervalField(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.IntervalFieldContext = IntervalFieldContext;

SqlParser.prototype.intervalField = function() {

    var localctx = new IntervalFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SqlParser.RULE_intervalField);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 941;
        _la = this._input.LA(1);
        if(!(_la===SqlParser.DAY || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (SqlParser.HOUR - 81)) | (1 << (SqlParser.MINUTE - 81)) | (1 << (SqlParser.MONTH - 81)))) !== 0) || _la===SqlParser.SECOND || _la===SqlParser.YEAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NormalFormContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_normalForm;
    return this;
}

NormalFormContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NormalFormContext.prototype.constructor = NormalFormContext;

NormalFormContext.prototype.NFD = function() {
    return this.getToken(SqlParser.NFD, 0);
};

NormalFormContext.prototype.NFC = function() {
    return this.getToken(SqlParser.NFC, 0);
};

NormalFormContext.prototype.NFKD = function() {
    return this.getToken(SqlParser.NFKD, 0);
};

NormalFormContext.prototype.NFKC = function() {
    return this.getToken(SqlParser.NFKC, 0);
};

NormalFormContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNormalForm(this);
	}
};

NormalFormContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNormalForm(this);
	}
};

NormalFormContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNormalForm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.NormalFormContext = NormalFormContext;

SqlParser.prototype.normalForm = function() {

    var localctx = new NormalFormContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SqlParser.RULE_normalForm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 943;
        _la = this._input.LA(1);
        if(!(((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (SqlParser.NFC - 108)) | (1 << (SqlParser.NFD - 108)) | (1 << (SqlParser.NFKC - 108)) | (1 << (SqlParser.NFKD - 108)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.ARRAY = function() {
    return this.getToken(SqlParser.ARRAY, 0);
};

TypeContext.prototype.MAP = function() {
    return this.getToken(SqlParser.MAP, 0);
};

TypeContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

TypeContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.TypeContext = TypeContext;

SqlParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SqlParser.RULE_type);
    var _la = 0; // Token type
    try {
        this.state = 961;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 945;
            this.match(SqlParser.ARRAY);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 946;
            this.match(SqlParser.MAP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 947;
            this.baseType();
            this.state = 959;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
            if(la_===1) {
                this.state = 948;
                this.match(SqlParser.T__1);
                this.state = 949;
                this.typeParameter();
                this.state = 954;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlParser.T__3) {
                    this.state = 950;
                    this.match(SqlParser.T__3);
                    this.state = 951;
                    this.typeParameter();
                    this.state = 956;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 957;
                this.match(SqlParser.T__2);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlParser.INTEGER_VALUE, 0);
};

TypeParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitTypeParameter(this);
	}
};

TypeParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitTypeParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.TypeParameterContext = TypeParameterContext;

SqlParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SqlParser.RULE_typeParameter);
    try {
        this.state = 965;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.INTEGER_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 963;
            this.match(SqlParser.INTEGER_VALUE);
            break;
        case SqlParser.ADD:
        case SqlParser.ALL:
        case SqlParser.ANALYZE:
        case SqlParser.ANY:
        case SqlParser.ARRAY:
        case SqlParser.ASC:
        case SqlParser.AT:
        case SqlParser.BERNOULLI:
        case SqlParser.CALL:
        case SqlParser.CASCADE:
        case SqlParser.CATALOGS:
        case SqlParser.COALESCE:
        case SqlParser.COLUMN:
        case SqlParser.COLUMNS:
        case SqlParser.COMMENT:
        case SqlParser.COMMIT:
        case SqlParser.COMMITTED:
        case SqlParser.CURRENT:
        case SqlParser.DATA:
        case SqlParser.DATE:
        case SqlParser.DAY:
        case SqlParser.DESC:
        case SqlParser.DISTRIBUTED:
        case SqlParser.EXCLUDING:
        case SqlParser.EXPLAIN:
        case SqlParser.FILTER:
        case SqlParser.FIRST:
        case SqlParser.FOLLOWING:
        case SqlParser.FORMAT:
        case SqlParser.FUNCTIONS:
        case SqlParser.GRANT:
        case SqlParser.GRANTS:
        case SqlParser.GRAPHVIZ:
        case SqlParser.HOUR:
        case SqlParser.IF:
        case SqlParser.INCLUDING:
        case SqlParser.INPUT:
        case SqlParser.INTEGER:
        case SqlParser.INTERVAL:
        case SqlParser.ISOLATION:
        case SqlParser.LAST:
        case SqlParser.LATERAL:
        case SqlParser.LEVEL:
        case SqlParser.LIMIT:
        case SqlParser.LOGICAL:
        case SqlParser.MAP:
        case SqlParser.MINUTE:
        case SqlParser.MONTH:
        case SqlParser.NFC:
        case SqlParser.NFD:
        case SqlParser.NFKC:
        case SqlParser.NFKD:
        case SqlParser.NO:
        case SqlParser.NULLIF:
        case SqlParser.NULLS:
        case SqlParser.OFFSET:
        case SqlParser.ONLY:
        case SqlParser.OPTION:
        case SqlParser.ORDINALITY:
        case SqlParser.OUTPUT:
        case SqlParser.OVER:
        case SqlParser.PARTITION:
        case SqlParser.PARTITIONS:
        case SqlParser.POSITION:
        case SqlParser.PRECEDING:
        case SqlParser.PRIVILEGES:
        case SqlParser.PROPERTIES:
        case SqlParser.PUBLIC:
        case SqlParser.RANGE:
        case SqlParser.READ:
        case SqlParser.RENAME:
        case SqlParser.REPEATABLE:
        case SqlParser.REPLACE:
        case SqlParser.RESET:
        case SqlParser.RESTRICT:
        case SqlParser.REVOKE:
        case SqlParser.ROLLBACK:
        case SqlParser.ROW:
        case SqlParser.ROWS:
        case SqlParser.SCHEMA:
        case SqlParser.SCHEMAS:
        case SqlParser.SECOND:
        case SqlParser.SERIALIZABLE:
        case SqlParser.SESSION:
        case SqlParser.SET:
        case SqlParser.SETS:
        case SqlParser.SHOW:
        case SqlParser.SMALLINT:
        case SqlParser.SOME:
        case SqlParser.START:
        case SqlParser.STATS:
        case SqlParser.SUBSTRING:
        case SqlParser.SYSTEM:
        case SqlParser.TABLES:
        case SqlParser.TABLESAMPLE:
        case SqlParser.TEXT:
        case SqlParser.TIME:
        case SqlParser.TIMESTAMP:
        case SqlParser.TINYINT:
        case SqlParser.TO:
        case SqlParser.TRANSACTION:
        case SqlParser.TRY_CAST:
        case SqlParser.TYPE:
        case SqlParser.UNBOUNDED:
        case SqlParser.UNCOMMITTED:
        case SqlParser.USE:
        case SqlParser.VALIDATE:
        case SqlParser.VALUES:
        case SqlParser.VERBOSE:
        case SqlParser.VIEW:
        case SqlParser.WORK:
        case SqlParser.WRITE:
        case SqlParser.YEAR:
        case SqlParser.ZONE:
        case SqlParser.IDENTIFIER:
        case SqlParser.QUOTED_IDENTIFIER:
        case SqlParser.BACKQUOTED_IDENTIFIER:
        case SqlParser.DOUBLE_PRECISION:
            this.enterOuterAlt(localctx, 2);
            this.state = 964;
            this.type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.DOUBLE_PRECISION = function() {
    return this.getToken(SqlParser.DOUBLE_PRECISION, 0);
};

BaseTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBaseType(this);
	}
};

BaseTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBaseType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.BaseTypeContext = BaseTypeContext;

SqlParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SqlParser.RULE_baseType);
    try {
        this.state = 969;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.DOUBLE_PRECISION:
            this.enterOuterAlt(localctx, 1);
            this.state = 967;
            this.match(SqlParser.DOUBLE_PRECISION);
            break;
        case SqlParser.ADD:
        case SqlParser.ALL:
        case SqlParser.ANALYZE:
        case SqlParser.ANY:
        case SqlParser.ARRAY:
        case SqlParser.ASC:
        case SqlParser.AT:
        case SqlParser.BERNOULLI:
        case SqlParser.CALL:
        case SqlParser.CASCADE:
        case SqlParser.CATALOGS:
        case SqlParser.COALESCE:
        case SqlParser.COLUMN:
        case SqlParser.COLUMNS:
        case SqlParser.COMMENT:
        case SqlParser.COMMIT:
        case SqlParser.COMMITTED:
        case SqlParser.CURRENT:
        case SqlParser.DATA:
        case SqlParser.DATE:
        case SqlParser.DAY:
        case SqlParser.DESC:
        case SqlParser.DISTRIBUTED:
        case SqlParser.EXCLUDING:
        case SqlParser.EXPLAIN:
        case SqlParser.FILTER:
        case SqlParser.FIRST:
        case SqlParser.FOLLOWING:
        case SqlParser.FORMAT:
        case SqlParser.FUNCTIONS:
        case SqlParser.GRANT:
        case SqlParser.GRANTS:
        case SqlParser.GRAPHVIZ:
        case SqlParser.HOUR:
        case SqlParser.IF:
        case SqlParser.INCLUDING:
        case SqlParser.INPUT:
        case SqlParser.INTEGER:
        case SqlParser.INTERVAL:
        case SqlParser.ISOLATION:
        case SqlParser.LAST:
        case SqlParser.LATERAL:
        case SqlParser.LEVEL:
        case SqlParser.LIMIT:
        case SqlParser.LOGICAL:
        case SqlParser.MAP:
        case SqlParser.MINUTE:
        case SqlParser.MONTH:
        case SqlParser.NFC:
        case SqlParser.NFD:
        case SqlParser.NFKC:
        case SqlParser.NFKD:
        case SqlParser.NO:
        case SqlParser.NULLIF:
        case SqlParser.NULLS:
        case SqlParser.OFFSET:
        case SqlParser.ONLY:
        case SqlParser.OPTION:
        case SqlParser.ORDINALITY:
        case SqlParser.OUTPUT:
        case SqlParser.OVER:
        case SqlParser.PARTITION:
        case SqlParser.PARTITIONS:
        case SqlParser.POSITION:
        case SqlParser.PRECEDING:
        case SqlParser.PRIVILEGES:
        case SqlParser.PROPERTIES:
        case SqlParser.PUBLIC:
        case SqlParser.RANGE:
        case SqlParser.READ:
        case SqlParser.RENAME:
        case SqlParser.REPEATABLE:
        case SqlParser.REPLACE:
        case SqlParser.RESET:
        case SqlParser.RESTRICT:
        case SqlParser.REVOKE:
        case SqlParser.ROLLBACK:
        case SqlParser.ROW:
        case SqlParser.ROWS:
        case SqlParser.SCHEMA:
        case SqlParser.SCHEMAS:
        case SqlParser.SECOND:
        case SqlParser.SERIALIZABLE:
        case SqlParser.SESSION:
        case SqlParser.SET:
        case SqlParser.SETS:
        case SqlParser.SHOW:
        case SqlParser.SMALLINT:
        case SqlParser.SOME:
        case SqlParser.START:
        case SqlParser.STATS:
        case SqlParser.SUBSTRING:
        case SqlParser.SYSTEM:
        case SqlParser.TABLES:
        case SqlParser.TABLESAMPLE:
        case SqlParser.TEXT:
        case SqlParser.TIME:
        case SqlParser.TIMESTAMP:
        case SqlParser.TINYINT:
        case SqlParser.TO:
        case SqlParser.TRANSACTION:
        case SqlParser.TRY_CAST:
        case SqlParser.TYPE:
        case SqlParser.UNBOUNDED:
        case SqlParser.UNCOMMITTED:
        case SqlParser.USE:
        case SqlParser.VALIDATE:
        case SqlParser.VALUES:
        case SqlParser.VERBOSE:
        case SqlParser.VIEW:
        case SqlParser.WORK:
        case SqlParser.WRITE:
        case SqlParser.YEAR:
        case SqlParser.ZONE:
        case SqlParser.IDENTIFIER:
        case SqlParser.QUOTED_IDENTIFIER:
        case SqlParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 968;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}

WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(SqlParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(SqlParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WhenClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterWhenClause(this);
	}
};

WhenClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitWhenClause(this);
	}
};

WhenClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitWhenClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.WhenClauseContext = WhenClauseContext;

SqlParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SqlParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 971;
        this.match(SqlParser.WHEN);
        this.state = 972;
        localctx.condition = this.expression();
        this.state = 973;
        this.match(SqlParser.THEN);
        this.state = 974;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_filter;
    return this;
}

FilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterContext.prototype.constructor = FilterContext;

FilterContext.prototype.FILTER = function() {
    return this.getToken(SqlParser.FILTER, 0);
};

FilterContext.prototype.WHERE = function() {
    return this.getToken(SqlParser.WHERE, 0);
};

FilterContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

FilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterFilter(this);
	}
};

FilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitFilter(this);
	}
};

FilterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitFilter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.FilterContext = FilterContext;

SqlParser.prototype.filter = function() {

    var localctx = new FilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SqlParser.RULE_filter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.match(SqlParser.FILTER);
        this.state = 977;
        this.match(SqlParser.T__1);
        this.state = 978;
        this.match(SqlParser.WHERE);
        this.state = 979;
        this.booleanExpression(0);
        this.state = 980;
        this.match(SqlParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_callOptions;
    return this;
}

CallOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallOptionsContext.prototype.constructor = CallOptionsContext;

CallOptionsContext.prototype.OPTION = function() {
    return this.getToken(SqlParser.OPTION, 0);
};

CallOptionsContext.prototype.hintList = function() {
    return this.getTypedRuleContext(HintListContext,0);
};

CallOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterCallOptions(this);
	}
};

CallOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitCallOptions(this);
	}
};

CallOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitCallOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.CallOptionsContext = CallOptionsContext;

SqlParser.prototype.callOptions = function() {

    var localctx = new CallOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SqlParser.RULE_callOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 982;
        this.match(SqlParser.OPTION);
        this.state = 983;
        this.match(SqlParser.T__1);
        this.state = 984;
        this.hintList();
        this.state = 985;
        this.match(SqlParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_over;
    this._expression = null; // ExpressionContext
    this.partition = []; // of ExpressionContexts
    return this;
}

OverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OverContext.prototype.constructor = OverContext;

OverContext.prototype.OVER = function() {
    return this.getToken(SqlParser.OVER, 0);
};

OverContext.prototype.PARTITION = function() {
    return this.getToken(SqlParser.PARTITION, 0);
};

OverContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlParser.BY);
    } else {
        return this.getToken(SqlParser.BY, i);
    }
};


OverContext.prototype.ORDER = function() {
    return this.getToken(SqlParser.ORDER, 0);
};

OverContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

OverContext.prototype.windowFrame = function() {
    return this.getTypedRuleContext(WindowFrameContext,0);
};

OverContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OverContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterOver(this);
	}
};

OverContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitOver(this);
	}
};

OverContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitOver(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.OverContext = OverContext;

SqlParser.prototype.over = function() {

    var localctx = new OverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SqlParser.RULE_over);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 987;
        this.match(SqlParser.OVER);
        this.state = 988;
        this.match(SqlParser.T__1);
        this.state = 999;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.PARTITION) {
            this.state = 989;
            this.match(SqlParser.PARTITION);
            this.state = 990;
            this.match(SqlParser.BY);
            this.state = 991;
            localctx._expression = this.expression();
            localctx.partition.push(localctx._expression);
            this.state = 996;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlParser.T__3) {
                this.state = 992;
                this.match(SqlParser.T__3);
                this.state = 993;
                localctx._expression = this.expression();
                localctx.partition.push(localctx._expression);
                this.state = 998;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1011;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.ORDER) {
            this.state = 1001;
            this.match(SqlParser.ORDER);
            this.state = 1002;
            this.match(SqlParser.BY);
            this.state = 1003;
            this.sortItem();
            this.state = 1008;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlParser.T__3) {
                this.state = 1004;
                this.match(SqlParser.T__3);
                this.state = 1005;
                this.sortItem();
                this.state = 1010;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1014;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlParser.RANGE || _la===SqlParser.ROWS) {
            this.state = 1013;
            this.windowFrame();
        }

        this.state = 1016;
        this.match(SqlParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_windowFrame;
    this.frameType = null; // Token
    this.start = null; // FrameBoundContext
    this.end = null; // FrameBoundContext
    return this;
}

WindowFrameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameContext.prototype.constructor = WindowFrameContext;

WindowFrameContext.prototype.RANGE = function() {
    return this.getToken(SqlParser.RANGE, 0);
};

WindowFrameContext.prototype.frameBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FrameBoundContext);
    } else {
        return this.getTypedRuleContext(FrameBoundContext,i);
    }
};

WindowFrameContext.prototype.ROWS = function() {
    return this.getToken(SqlParser.ROWS, 0);
};

WindowFrameContext.prototype.BETWEEN = function() {
    return this.getToken(SqlParser.BETWEEN, 0);
};

WindowFrameContext.prototype.AND = function() {
    return this.getToken(SqlParser.AND, 0);
};

WindowFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterWindowFrame(this);
	}
};

WindowFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitWindowFrame(this);
	}
};

WindowFrameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitWindowFrame(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.WindowFrameContext = WindowFrameContext;

SqlParser.prototype.windowFrame = function() {

    var localctx = new WindowFrameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SqlParser.RULE_windowFrame);
    try {
        this.state = 1034;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1018;
            localctx.frameType = this.match(SqlParser.RANGE);
            this.state = 1019;
            localctx.start = this.frameBound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1020;
            localctx.frameType = this.match(SqlParser.ROWS);
            this.state = 1021;
            localctx.start = this.frameBound();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1022;
            localctx.frameType = this.match(SqlParser.RANGE);
            this.state = 1023;
            this.match(SqlParser.BETWEEN);
            this.state = 1024;
            localctx.start = this.frameBound();
            this.state = 1025;
            this.match(SqlParser.AND);
            this.state = 1026;
            localctx.end = this.frameBound();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1028;
            localctx.frameType = this.match(SqlParser.ROWS);
            this.state = 1029;
            this.match(SqlParser.BETWEEN);
            this.state = 1030;
            localctx.start = this.frameBound();
            this.state = 1031;
            this.match(SqlParser.AND);
            this.state = 1032;
            localctx.end = this.frameBound();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_frameBound;
    return this;
}

FrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FrameBoundContext.prototype.constructor = FrameBoundContext;


 
FrameBoundContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BoundedFrameContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    this.boundType = null; // Token;
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BoundedFrameContext.prototype = Object.create(FrameBoundContext.prototype);
BoundedFrameContext.prototype.constructor = BoundedFrameContext;

SqlParser.BoundedFrameContext = BoundedFrameContext;

BoundedFrameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BoundedFrameContext.prototype.PRECEDING = function() {
    return this.getToken(SqlParser.PRECEDING, 0);
};

BoundedFrameContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlParser.FOLLOWING, 0);
};
BoundedFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBoundedFrame(this);
	}
};

BoundedFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBoundedFrame(this);
	}
};

BoundedFrameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBoundedFrame(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnboundedFrameContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    this.boundType = null; // Token;
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnboundedFrameContext.prototype = Object.create(FrameBoundContext.prototype);
UnboundedFrameContext.prototype.constructor = UnboundedFrameContext;

SqlParser.UnboundedFrameContext = UnboundedFrameContext;

UnboundedFrameContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlParser.UNBOUNDED, 0);
};

UnboundedFrameContext.prototype.PRECEDING = function() {
    return this.getToken(SqlParser.PRECEDING, 0);
};

UnboundedFrameContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlParser.FOLLOWING, 0);
};
UnboundedFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterUnboundedFrame(this);
	}
};

UnboundedFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitUnboundedFrame(this);
	}
};

UnboundedFrameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitUnboundedFrame(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CurrentRowBoundContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentRowBoundContext.prototype = Object.create(FrameBoundContext.prototype);
CurrentRowBoundContext.prototype.constructor = CurrentRowBoundContext;

SqlParser.CurrentRowBoundContext = CurrentRowBoundContext;

CurrentRowBoundContext.prototype.CURRENT = function() {
    return this.getToken(SqlParser.CURRENT, 0);
};

CurrentRowBoundContext.prototype.ROW = function() {
    return this.getToken(SqlParser.ROW, 0);
};
CurrentRowBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterCurrentRowBound(this);
	}
};

CurrentRowBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitCurrentRowBound(this);
	}
};

CurrentRowBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitCurrentRowBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.FrameBoundContext = FrameBoundContext;

SqlParser.prototype.frameBound = function() {

    var localctx = new FrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SqlParser.RULE_frameBound);
    var _la = 0; // Token type
    try {
        this.state = 1045;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnboundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1036;
            this.match(SqlParser.UNBOUNDED);
            this.state = 1037;
            localctx.boundType = this.match(SqlParser.PRECEDING);
            break;

        case 2:
            localctx = new UnboundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1038;
            this.match(SqlParser.UNBOUNDED);
            this.state = 1039;
            localctx.boundType = this.match(SqlParser.FOLLOWING);
            break;

        case 3:
            localctx = new CurrentRowBoundContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1040;
            this.match(SqlParser.CURRENT);
            this.state = 1041;
            this.match(SqlParser.ROW);
            break;

        case 4:
            localctx = new BoundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1042;
            this.expression();
            this.state = 1043;
            localctx.boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlParser.FOLLOWING || _la===SqlParser.PRECEDING)) {
                localctx.boundType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQualifiedName(this);
	}
};

QualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQualifiedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.QualifiedNameContext = QualifiedNameContext;

SqlParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SqlParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.identifier();
        this.state = 1052;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1048;
                this.match(SqlParser.T__4);
                this.state = 1049;
                this.identifier(); 
            }
            this.state = 1054;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BackQuotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BackQuotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
BackQuotedIdentifierContext.prototype.constructor = BackQuotedIdentifierContext;

SqlParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

BackQuotedIdentifierContext.prototype.BACKQUOTED_IDENTIFIER = function() {
    return this.getToken(SqlParser.BACKQUOTED_IDENTIFIER, 0);
};
BackQuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterBackQuotedIdentifier(this);
	}
};

BackQuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitBackQuotedIdentifier(this);
	}
};

BackQuotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitBackQuotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QuotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;

SqlParser.QuotedIdentifierContext = QuotedIdentifierContext;

QuotedIdentifierContext.prototype.QUOTED_IDENTIFIER = function() {
    return this.getToken(SqlParser.QUOTED_IDENTIFIER, 0);
};
QuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitQuotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnquotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnquotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

SqlParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlParser.IDENTIFIER, 0);
};

UnquotedIdentifierContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};
UnquotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitUnquotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.IdentifierContext = IdentifierContext;

SqlParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SqlParser.RULE_identifier);
    try {
        this.state = 1059;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.IDENTIFIER:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1055;
            this.match(SqlParser.IDENTIFIER);
            break;
        case SqlParser.QUOTED_IDENTIFIER:
            localctx = new QuotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1056;
            this.match(SqlParser.QUOTED_IDENTIFIER);
            break;
        case SqlParser.ADD:
        case SqlParser.ALL:
        case SqlParser.ANALYZE:
        case SqlParser.ANY:
        case SqlParser.ARRAY:
        case SqlParser.ASC:
        case SqlParser.AT:
        case SqlParser.BERNOULLI:
        case SqlParser.CALL:
        case SqlParser.CASCADE:
        case SqlParser.CATALOGS:
        case SqlParser.COALESCE:
        case SqlParser.COLUMN:
        case SqlParser.COLUMNS:
        case SqlParser.COMMENT:
        case SqlParser.COMMIT:
        case SqlParser.COMMITTED:
        case SqlParser.CURRENT:
        case SqlParser.DATA:
        case SqlParser.DATE:
        case SqlParser.DAY:
        case SqlParser.DESC:
        case SqlParser.DISTRIBUTED:
        case SqlParser.EXCLUDING:
        case SqlParser.EXPLAIN:
        case SqlParser.FILTER:
        case SqlParser.FIRST:
        case SqlParser.FOLLOWING:
        case SqlParser.FORMAT:
        case SqlParser.FUNCTIONS:
        case SqlParser.GRANT:
        case SqlParser.GRANTS:
        case SqlParser.GRAPHVIZ:
        case SqlParser.HOUR:
        case SqlParser.IF:
        case SqlParser.INCLUDING:
        case SqlParser.INPUT:
        case SqlParser.INTEGER:
        case SqlParser.INTERVAL:
        case SqlParser.ISOLATION:
        case SqlParser.LAST:
        case SqlParser.LATERAL:
        case SqlParser.LEVEL:
        case SqlParser.LIMIT:
        case SqlParser.LOGICAL:
        case SqlParser.MAP:
        case SqlParser.MINUTE:
        case SqlParser.MONTH:
        case SqlParser.NFC:
        case SqlParser.NFD:
        case SqlParser.NFKC:
        case SqlParser.NFKD:
        case SqlParser.NO:
        case SqlParser.NULLIF:
        case SqlParser.NULLS:
        case SqlParser.OFFSET:
        case SqlParser.ONLY:
        case SqlParser.OPTION:
        case SqlParser.ORDINALITY:
        case SqlParser.OUTPUT:
        case SqlParser.OVER:
        case SqlParser.PARTITION:
        case SqlParser.PARTITIONS:
        case SqlParser.POSITION:
        case SqlParser.PRECEDING:
        case SqlParser.PRIVILEGES:
        case SqlParser.PROPERTIES:
        case SqlParser.PUBLIC:
        case SqlParser.RANGE:
        case SqlParser.READ:
        case SqlParser.RENAME:
        case SqlParser.REPEATABLE:
        case SqlParser.REPLACE:
        case SqlParser.RESET:
        case SqlParser.RESTRICT:
        case SqlParser.REVOKE:
        case SqlParser.ROLLBACK:
        case SqlParser.ROW:
        case SqlParser.ROWS:
        case SqlParser.SCHEMA:
        case SqlParser.SCHEMAS:
        case SqlParser.SECOND:
        case SqlParser.SERIALIZABLE:
        case SqlParser.SESSION:
        case SqlParser.SET:
        case SqlParser.SETS:
        case SqlParser.SHOW:
        case SqlParser.SMALLINT:
        case SqlParser.SOME:
        case SqlParser.START:
        case SqlParser.STATS:
        case SqlParser.SUBSTRING:
        case SqlParser.SYSTEM:
        case SqlParser.TABLES:
        case SqlParser.TABLESAMPLE:
        case SqlParser.TEXT:
        case SqlParser.TIME:
        case SqlParser.TIMESTAMP:
        case SqlParser.TINYINT:
        case SqlParser.TO:
        case SqlParser.TRANSACTION:
        case SqlParser.TRY_CAST:
        case SqlParser.TYPE:
        case SqlParser.UNBOUNDED:
        case SqlParser.UNCOMMITTED:
        case SqlParser.USE:
        case SqlParser.VALIDATE:
        case SqlParser.VALUES:
        case SqlParser.VERBOSE:
        case SqlParser.VIEW:
        case SqlParser.WORK:
        case SqlParser.WRITE:
        case SqlParser.YEAR:
        case SqlParser.ZONE:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1057;
            this.nonReserved();
            break;
        case SqlParser.BACKQUOTED_IDENTIFIER:
            localctx = new BackQuotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1058;
            this.match(SqlParser.BACKQUOTED_IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;


 
NumberContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

SqlParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlParser.DECIMAL_VALUE, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitDecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntegerLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(NumberContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

SqlParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlParser.INTEGER_VALUE, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitIntegerLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlParser.NumberContext = NumberContext;

SqlParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SqlParser.RULE_number);
    try {
        this.state = 1063;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlParser.DECIMAL_VALUE:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1061;
            this.match(SqlParser.DECIMAL_VALUE);
            break;
        case SqlParser.INTEGER_VALUE:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1062;
            this.match(SqlParser.INTEGER_VALUE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlParser.RULE_nonReserved;
    return this;
}

NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.ADD = function() {
    return this.getToken(SqlParser.ADD, 0);
};

NonReservedContext.prototype.ALL = function() {
    return this.getToken(SqlParser.ALL, 0);
};

NonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(SqlParser.ANALYZE, 0);
};

NonReservedContext.prototype.ANY = function() {
    return this.getToken(SqlParser.ANY, 0);
};

NonReservedContext.prototype.ARRAY = function() {
    return this.getToken(SqlParser.ARRAY, 0);
};

NonReservedContext.prototype.ASC = function() {
    return this.getToken(SqlParser.ASC, 0);
};

NonReservedContext.prototype.AT = function() {
    return this.getToken(SqlParser.AT, 0);
};

NonReservedContext.prototype.BERNOULLI = function() {
    return this.getToken(SqlParser.BERNOULLI, 0);
};

NonReservedContext.prototype.CALL = function() {
    return this.getToken(SqlParser.CALL, 0);
};

NonReservedContext.prototype.CASCADE = function() {
    return this.getToken(SqlParser.CASCADE, 0);
};

NonReservedContext.prototype.CATALOGS = function() {
    return this.getToken(SqlParser.CATALOGS, 0);
};

NonReservedContext.prototype.COALESCE = function() {
    return this.getToken(SqlParser.COALESCE, 0);
};

NonReservedContext.prototype.COLUMN = function() {
    return this.getToken(SqlParser.COLUMN, 0);
};

NonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(SqlParser.COLUMNS, 0);
};

NonReservedContext.prototype.COMMENT = function() {
    return this.getToken(SqlParser.COMMENT, 0);
};

NonReservedContext.prototype.COMMIT = function() {
    return this.getToken(SqlParser.COMMIT, 0);
};

NonReservedContext.prototype.COMMITTED = function() {
    return this.getToken(SqlParser.COMMITTED, 0);
};

NonReservedContext.prototype.CURRENT = function() {
    return this.getToken(SqlParser.CURRENT, 0);
};

NonReservedContext.prototype.DATA = function() {
    return this.getToken(SqlParser.DATA, 0);
};

NonReservedContext.prototype.DATE = function() {
    return this.getToken(SqlParser.DATE, 0);
};

NonReservedContext.prototype.DAY = function() {
    return this.getToken(SqlParser.DAY, 0);
};

NonReservedContext.prototype.DESC = function() {
    return this.getToken(SqlParser.DESC, 0);
};

NonReservedContext.prototype.DISTRIBUTED = function() {
    return this.getToken(SqlParser.DISTRIBUTED, 0);
};

NonReservedContext.prototype.EXCLUDING = function() {
    return this.getToken(SqlParser.EXCLUDING, 0);
};

NonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlParser.EXPLAIN, 0);
};

NonReservedContext.prototype.FILTER = function() {
    return this.getToken(SqlParser.FILTER, 0);
};

NonReservedContext.prototype.FIRST = function() {
    return this.getToken(SqlParser.FIRST, 0);
};

NonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlParser.FOLLOWING, 0);
};

NonReservedContext.prototype.FORMAT = function() {
    return this.getToken(SqlParser.FORMAT, 0);
};

NonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlParser.FUNCTIONS, 0);
};

NonReservedContext.prototype.GRANT = function() {
    return this.getToken(SqlParser.GRANT, 0);
};

NonReservedContext.prototype.GRANTS = function() {
    return this.getToken(SqlParser.GRANTS, 0);
};

NonReservedContext.prototype.GRAPHVIZ = function() {
    return this.getToken(SqlParser.GRAPHVIZ, 0);
};

NonReservedContext.prototype.HOUR = function() {
    return this.getToken(SqlParser.HOUR, 0);
};

NonReservedContext.prototype.IF = function() {
    return this.getToken(SqlParser.IF, 0);
};

NonReservedContext.prototype.INCLUDING = function() {
    return this.getToken(SqlParser.INCLUDING, 0);
};

NonReservedContext.prototype.INPUT = function() {
    return this.getToken(SqlParser.INPUT, 0);
};

NonReservedContext.prototype.INTEGER = function() {
    return this.getToken(SqlParser.INTEGER, 0);
};

NonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(SqlParser.INTERVAL, 0);
};

NonReservedContext.prototype.ISOLATION = function() {
    return this.getToken(SqlParser.ISOLATION, 0);
};

NonReservedContext.prototype.LAST = function() {
    return this.getToken(SqlParser.LAST, 0);
};

NonReservedContext.prototype.LATERAL = function() {
    return this.getToken(SqlParser.LATERAL, 0);
};

NonReservedContext.prototype.LEVEL = function() {
    return this.getToken(SqlParser.LEVEL, 0);
};

NonReservedContext.prototype.LIMIT = function() {
    return this.getToken(SqlParser.LIMIT, 0);
};

NonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(SqlParser.LOGICAL, 0);
};

NonReservedContext.prototype.MAP = function() {
    return this.getToken(SqlParser.MAP, 0);
};

NonReservedContext.prototype.MINUTE = function() {
    return this.getToken(SqlParser.MINUTE, 0);
};

NonReservedContext.prototype.MONTH = function() {
    return this.getToken(SqlParser.MONTH, 0);
};

NonReservedContext.prototype.NFC = function() {
    return this.getToken(SqlParser.NFC, 0);
};

NonReservedContext.prototype.NFD = function() {
    return this.getToken(SqlParser.NFD, 0);
};

NonReservedContext.prototype.NFKC = function() {
    return this.getToken(SqlParser.NFKC, 0);
};

NonReservedContext.prototype.NFKD = function() {
    return this.getToken(SqlParser.NFKD, 0);
};

NonReservedContext.prototype.NO = function() {
    return this.getToken(SqlParser.NO, 0);
};

NonReservedContext.prototype.NULLIF = function() {
    return this.getToken(SqlParser.NULLIF, 0);
};

NonReservedContext.prototype.NULLS = function() {
    return this.getToken(SqlParser.NULLS, 0);
};

NonReservedContext.prototype.OFFSET = function() {
    return this.getToken(SqlParser.OFFSET, 0);
};

NonReservedContext.prototype.ONLY = function() {
    return this.getToken(SqlParser.ONLY, 0);
};

NonReservedContext.prototype.OPTION = function() {
    return this.getToken(SqlParser.OPTION, 0);
};

NonReservedContext.prototype.ORDINALITY = function() {
    return this.getToken(SqlParser.ORDINALITY, 0);
};

NonReservedContext.prototype.OUTPUT = function() {
    return this.getToken(SqlParser.OUTPUT, 0);
};

NonReservedContext.prototype.OVER = function() {
    return this.getToken(SqlParser.OVER, 0);
};

NonReservedContext.prototype.PARTITION = function() {
    return this.getToken(SqlParser.PARTITION, 0);
};

NonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlParser.PARTITIONS, 0);
};

NonReservedContext.prototype.POSITION = function() {
    return this.getToken(SqlParser.POSITION, 0);
};

NonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(SqlParser.PRECEDING, 0);
};

NonReservedContext.prototype.PRIVILEGES = function() {
    return this.getToken(SqlParser.PRIVILEGES, 0);
};

NonReservedContext.prototype.PROPERTIES = function() {
    return this.getToken(SqlParser.PROPERTIES, 0);
};

NonReservedContext.prototype.PUBLIC = function() {
    return this.getToken(SqlParser.PUBLIC, 0);
};

NonReservedContext.prototype.RANGE = function() {
    return this.getToken(SqlParser.RANGE, 0);
};

NonReservedContext.prototype.READ = function() {
    return this.getToken(SqlParser.READ, 0);
};

NonReservedContext.prototype.RENAME = function() {
    return this.getToken(SqlParser.RENAME, 0);
};

NonReservedContext.prototype.REPEATABLE = function() {
    return this.getToken(SqlParser.REPEATABLE, 0);
};

NonReservedContext.prototype.REPLACE = function() {
    return this.getToken(SqlParser.REPLACE, 0);
};

NonReservedContext.prototype.RESET = function() {
    return this.getToken(SqlParser.RESET, 0);
};

NonReservedContext.prototype.RESTRICT = function() {
    return this.getToken(SqlParser.RESTRICT, 0);
};

NonReservedContext.prototype.REVOKE = function() {
    return this.getToken(SqlParser.REVOKE, 0);
};

NonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlParser.ROLLBACK, 0);
};

NonReservedContext.prototype.ROW = function() {
    return this.getToken(SqlParser.ROW, 0);
};

NonReservedContext.prototype.ROWS = function() {
    return this.getToken(SqlParser.ROWS, 0);
};

NonReservedContext.prototype.SCHEMA = function() {
    return this.getToken(SqlParser.SCHEMA, 0);
};

NonReservedContext.prototype.SCHEMAS = function() {
    return this.getToken(SqlParser.SCHEMAS, 0);
};

NonReservedContext.prototype.SECOND = function() {
    return this.getToken(SqlParser.SECOND, 0);
};

NonReservedContext.prototype.SERIALIZABLE = function() {
    return this.getToken(SqlParser.SERIALIZABLE, 0);
};

NonReservedContext.prototype.SESSION = function() {
    return this.getToken(SqlParser.SESSION, 0);
};

NonReservedContext.prototype.SET = function() {
    return this.getToken(SqlParser.SET, 0);
};

NonReservedContext.prototype.SETS = function() {
    return this.getToken(SqlParser.SETS, 0);
};

NonReservedContext.prototype.SHOW = function() {
    return this.getToken(SqlParser.SHOW, 0);
};

NonReservedContext.prototype.SMALLINT = function() {
    return this.getToken(SqlParser.SMALLINT, 0);
};

NonReservedContext.prototype.SOME = function() {
    return this.getToken(SqlParser.SOME, 0);
};

NonReservedContext.prototype.START = function() {
    return this.getToken(SqlParser.START, 0);
};

NonReservedContext.prototype.STATS = function() {
    return this.getToken(SqlParser.STATS, 0);
};

NonReservedContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlParser.SUBSTRING, 0);
};

NonReservedContext.prototype.SYSTEM = function() {
    return this.getToken(SqlParser.SYSTEM, 0);
};

NonReservedContext.prototype.TABLES = function() {
    return this.getToken(SqlParser.TABLES, 0);
};

NonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlParser.TABLESAMPLE, 0);
};

NonReservedContext.prototype.TEXT = function() {
    return this.getToken(SqlParser.TEXT, 0);
};

NonReservedContext.prototype.TIME = function() {
    return this.getToken(SqlParser.TIME, 0);
};

NonReservedContext.prototype.TIMESTAMP = function() {
    return this.getToken(SqlParser.TIMESTAMP, 0);
};

NonReservedContext.prototype.TINYINT = function() {
    return this.getToken(SqlParser.TINYINT, 0);
};

NonReservedContext.prototype.TO = function() {
    return this.getToken(SqlParser.TO, 0);
};

NonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlParser.TRANSACTION, 0);
};

NonReservedContext.prototype.TRY_CAST = function() {
    return this.getToken(SqlParser.TRY_CAST, 0);
};

NonReservedContext.prototype.TYPE = function() {
    return this.getToken(SqlParser.TYPE, 0);
};

NonReservedContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlParser.UNBOUNDED, 0);
};

NonReservedContext.prototype.UNCOMMITTED = function() {
    return this.getToken(SqlParser.UNCOMMITTED, 0);
};

NonReservedContext.prototype.USE = function() {
    return this.getToken(SqlParser.USE, 0);
};

NonReservedContext.prototype.VALIDATE = function() {
    return this.getToken(SqlParser.VALIDATE, 0);
};

NonReservedContext.prototype.VALUES = function() {
    return this.getToken(SqlParser.VALUES, 0);
};

NonReservedContext.prototype.VERBOSE = function() {
    return this.getToken(SqlParser.VERBOSE, 0);
};

NonReservedContext.prototype.VIEW = function() {
    return this.getToken(SqlParser.VIEW, 0);
};

NonReservedContext.prototype.WORK = function() {
    return this.getToken(SqlParser.WORK, 0);
};

NonReservedContext.prototype.WRITE = function() {
    return this.getToken(SqlParser.WRITE, 0);
};

NonReservedContext.prototype.YEAR = function() {
    return this.getToken(SqlParser.YEAR, 0);
};

NonReservedContext.prototype.ZONE = function() {
    return this.getToken(SqlParser.ZONE, 0);
};

NonReservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.enterNonReserved(this);
	}
};

NonReservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlListener ) {
        listener.exitNonReserved(this);
	}
};

NonReservedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlVisitor ) {
        return visitor.visitNonReserved(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlParser.NonReservedContext = NonReservedContext;

SqlParser.prototype.nonReserved = function() {

    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SqlParser.RULE_nonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1065;
        _la = this._input.LA(1);
        if(!(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (SqlParser.ADD - 13)) | (1 << (SqlParser.ALL - 13)) | (1 << (SqlParser.ANALYZE - 13)) | (1 << (SqlParser.ANY - 13)) | (1 << (SqlParser.ARRAY - 13)) | (1 << (SqlParser.ASC - 13)) | (1 << (SqlParser.AT - 13)) | (1 << (SqlParser.BERNOULLI - 13)) | (1 << (SqlParser.CALL - 13)) | (1 << (SqlParser.CASCADE - 13)) | (1 << (SqlParser.CATALOGS - 13)) | (1 << (SqlParser.COALESCE - 13)) | (1 << (SqlParser.COLUMN - 13)) | (1 << (SqlParser.COLUMNS - 13)) | (1 << (SqlParser.COMMENT - 13)) | (1 << (SqlParser.COMMIT - 13)) | (1 << (SqlParser.COMMITTED - 13)) | (1 << (SqlParser.CURRENT - 13)))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SqlParser.DATA - 46)) | (1 << (SqlParser.DATE - 46)) | (1 << (SqlParser.DAY - 46)) | (1 << (SqlParser.DESC - 46)) | (1 << (SqlParser.DISTRIBUTED - 46)) | (1 << (SqlParser.EXCLUDING - 46)) | (1 << (SqlParser.EXPLAIN - 46)) | (1 << (SqlParser.FILTER - 46)) | (1 << (SqlParser.FIRST - 46)) | (1 << (SqlParser.FOLLOWING - 46)) | (1 << (SqlParser.FORMAT - 46)) | (1 << (SqlParser.FUNCTIONS - 46)) | (1 << (SqlParser.GRANT - 46)) | (1 << (SqlParser.GRANTS - 46)) | (1 << (SqlParser.GRAPHVIZ - 46)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (SqlParser.HOUR - 81)) | (1 << (SqlParser.IF - 81)) | (1 << (SqlParser.INCLUDING - 81)) | (1 << (SqlParser.INPUT - 81)) | (1 << (SqlParser.INTEGER - 81)) | (1 << (SqlParser.INTERVAL - 81)) | (1 << (SqlParser.ISOLATION - 81)) | (1 << (SqlParser.LAST - 81)) | (1 << (SqlParser.LATERAL - 81)) | (1 << (SqlParser.LEVEL - 81)) | (1 << (SqlParser.LIMIT - 81)) | (1 << (SqlParser.LOGICAL - 81)) | (1 << (SqlParser.MAP - 81)) | (1 << (SqlParser.MINUTE - 81)) | (1 << (SqlParser.MONTH - 81)) | (1 << (SqlParser.NFC - 81)) | (1 << (SqlParser.NFD - 81)) | (1 << (SqlParser.NFKC - 81)) | (1 << (SqlParser.NFKD - 81)) | (1 << (SqlParser.NO - 81)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SqlParser.NULLIF - 116)) | (1 << (SqlParser.NULLS - 116)) | (1 << (SqlParser.OFFSET - 116)) | (1 << (SqlParser.ONLY - 116)) | (1 << (SqlParser.OPTION - 116)) | (1 << (SqlParser.ORDINALITY - 116)) | (1 << (SqlParser.OUTPUT - 116)) | (1 << (SqlParser.OVER - 116)) | (1 << (SqlParser.PARTITION - 116)) | (1 << (SqlParser.PARTITIONS - 116)) | (1 << (SqlParser.POSITION - 116)) | (1 << (SqlParser.PRECEDING - 116)) | (1 << (SqlParser.PRIVILEGES - 116)) | (1 << (SqlParser.PROPERTIES - 116)) | (1 << (SqlParser.PUBLIC - 116)) | (1 << (SqlParser.RANGE - 116)) | (1 << (SqlParser.READ - 116)) | (1 << (SqlParser.RENAME - 116)) | (1 << (SqlParser.REPEATABLE - 116)) | (1 << (SqlParser.REPLACE - 116)) | (1 << (SqlParser.RESET - 116)) | (1 << (SqlParser.RESTRICT - 116)) | (1 << (SqlParser.REVOKE - 116)) | (1 << (SqlParser.ROLLBACK - 116)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (SqlParser.ROW - 149)) | (1 << (SqlParser.ROWS - 149)) | (1 << (SqlParser.SCHEMA - 149)) | (1 << (SqlParser.SCHEMAS - 149)) | (1 << (SqlParser.SECOND - 149)) | (1 << (SqlParser.SERIALIZABLE - 149)) | (1 << (SqlParser.SESSION - 149)) | (1 << (SqlParser.SET - 149)) | (1 << (SqlParser.SETS - 149)) | (1 << (SqlParser.SHOW - 149)) | (1 << (SqlParser.SMALLINT - 149)) | (1 << (SqlParser.SOME - 149)) | (1 << (SqlParser.START - 149)) | (1 << (SqlParser.STATS - 149)) | (1 << (SqlParser.SUBSTRING - 149)) | (1 << (SqlParser.SYSTEM - 149)) | (1 << (SqlParser.TABLES - 149)) | (1 << (SqlParser.TABLESAMPLE - 149)) | (1 << (SqlParser.TEXT - 149)) | (1 << (SqlParser.TIME - 149)) | (1 << (SqlParser.TIMESTAMP - 149)) | (1 << (SqlParser.TINYINT - 149)) | (1 << (SqlParser.TO - 149)) | (1 << (SqlParser.TRANSACTION - 149)) | (1 << (SqlParser.TRY_CAST - 149)) | (1 << (SqlParser.TYPE - 149)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (SqlParser.UNBOUNDED - 182)) | (1 << (SqlParser.UNCOMMITTED - 182)) | (1 << (SqlParser.USE - 182)) | (1 << (SqlParser.VALIDATE - 182)) | (1 << (SqlParser.VALUES - 182)) | (1 << (SqlParser.VERBOSE - 182)) | (1 << (SqlParser.VIEW - 182)) | (1 << (SqlParser.WORK - 182)) | (1 << (SqlParser.WRITE - 182)) | (1 << (SqlParser.YEAR - 182)) | (1 << (SqlParser.ZONE - 182)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 10:
			return this.queryBody_sempred(localctx, predIndex);
	case 20:
			return this.relation_sempred(localctx, predIndex);
	case 36:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 39:
			return this.valueExpression_sempred(localctx, predIndex);
	case 40:
			return this.primaryExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SqlParser.prototype.queryBody_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlParser.prototype.relation_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 5);
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 10);
		case 9:
			return this.precpred(this._ctx, 9);
		case 10:
			return this.precpred(this._ctx, 7);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SqlParser = SqlParser;
