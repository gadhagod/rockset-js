/* eslint-disable unicorn/filename-case */
// Generated file, please do not edit directly

import { flags } from '@oclif/command';
import { main } from '@rockset/core';
import { runApiCall, Args } from '../../../helper/util';
import { RockCommand } from '../../../base-command';

import * as chalk from 'chalk';
import { cli } from 'cli-ux';

const bodySchema = `{{{bodySchema}}}`;

class {{{className}}} extends RockCommand {
  static flags = {
    help: flags.help({ char: 'h' }),
    {{#if bodySchema}}
    body: flags.string({
      required: {{{ bodyRequired }}},
      description: 'Path to a file whose contents will be passed as the POST body of this request. Format must be [json|yaml]. An example schema is shown below.',
    }),
    {{/if}}

    raw: flags.boolean({
      description: 'Show the raw output from the server, instead of grabbing the results. Usually used in conjunction with --output=json'
    }),
    ...cli.table.flags({only: ['columns', 'output']}),
    {{#if loadTest}}
    loadTestRps: flags.integer({
      char: 'l',
      description: 'If this flag is active, a load test will be conducted using this endpoint. The value passed to this flag determines how many requests per second will be sent'
    }),
    yes: flags.boolean({
      char: 'y',
      description: 'Skip all safety prompts',
      default: false
    })
    {{/if}}
  };

  static args = {{{args}}};
  static description = `{{{description}}}`;
  static examples = {{{examples}}};

  async run() {
    const { args, flags } = this.parse({{{className}}});

    // Rockset client object
    const client = await main.createClient();

    const namedArgs :Args = {{{className}}}.args;

    // apicall 
    const apicall = {{{apicall}}};

    // endpoint
    const endpoint = '{{{endpoint}}}';
    const method = '{{{method}}}';

    await runApiCall.bind(this)({args, flags, namedArgs, apicall, method, endpoint, bodySchema});
  }
}

export default {{className}};
